<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stimulsoft.Editor</name>
    </assembly>
    <members>
        <member name="T:Stimulsoft.Editor.ColorBox">
            <summary>
            Represents a combo-box like control used to select color from drop-down list of colors.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ColorBox.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <c>ColorBox</c> class with specified container.
            </summary>
            <param name="container">Specifies IContainer that contains this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ColorBox.#ctor">
            <summary>
            Initializes a new instance of the <c>ColorBox</c> class with default settings.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ColorBox.Items">
            <summary>
            Gets an object representing the collection of the colors contained in this <c>ColorBox</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ColorBox.Text">
            <summary>
            Represents text associated with this control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ColorBox.SelectedColor">
            <summary>
            Gets or sets curently selected color in the <c>ColorBox</c>.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.EditBorderStyle">
            <summary>
            Specifies the border style for Edit control.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.EditBorderStyle.None">
            <summary>
            No border.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.EditBorderStyle.Fixed3D">
            <summary>
            A three-dimensional border.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.EditBorderStyle.FixedSingle">
            <summary>
            A single-line border.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.EditBorderStyle.System">
            <summary>
            A system border.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ErrorBehavior">
            <summary>
            Defines types of reaction on error.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ErrorBehavior.Message">
            <summary>
            Message dialog displayed when error occurs.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ErrorBehavior.Exception">
            <summary>
            Exception is thrown when error occurs.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ErrorBehavior.None">
            <summary>
            No reaction.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IControl">
            <summary>
            Represents standard control properties and methods.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IControl.Invalidate">
            <summary>
            When implemented by a class, invalidates the entire client area of the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IControl.Invalidate(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, invalidates a specific region of the control.
            </summary>
            <param name="rect">A Rectangle object that represents the region to invalidate.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IControl.Update">
            <summary>
            When implemented by a class, causes the control to redraw the invalidated regions within its client area.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IControl.PointToClient(System.Drawing.Point)">
            <summary>
            When implemented by a class, computes the location of the specified screen point into client coordinates.
            </summary>
            <param name="p">The screen coordinate Point to convert.</param>
            <returns>A Point that represents the converted Point, in client coordinates.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IControl.PointToScreen(System.Drawing.Point)">
            <summary>
            When implemented by a class, computes the location of the specified client point into screen coordinates.
            </summary>
            <param name="p">The client coordinate Point to convert.</param>
            <returns>A Point that represents the converted Point, in screen coordinates.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IControl.Focus">
            <summary>
            When implemented by a class, sets input focus to the control.
            </summary>
            <returns>true if the input focus request was successful; otherwise, false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.IControl.CanFocus">
            <summary>
            When implemented by a class, returns boolean value indicating whether the control can receive input focus.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IControl.Visible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the control is displayed.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IControl.Location">
            <summary>
            When implemented by a class, gets or sets the coordinates of the upper-left corner of the control relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IControl.Left">
            <summary>
            When implemented by a class, gets or sets the distance, in pixels, between the left edge of the control and the left edge of its container's client area.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IControl.Top">
            <summary>
            When implemented by a class, gets or sets the distance, in pixels, between the bottom edge of the control and the top edge of its container's client area.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IControl.Width">
            <summary>
            When implemented by a class, gets or sets the width of the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IControl.Height">
            <summary>
            When implemented by a class, gets or sets the height of the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IControl.Bounds">
            <summary>
            When implemented by a class, gets or sets the size and location of the control including its nonclient elements.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IControl.ClientRectangle">
            <summary>
            When implemented by a class, gets the rectangle that represents the client area of the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IControl.ForeColor">
            <summary>
            When implemented by a class, gets or sets the foreground color of the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IControl.BackColor">
            <summary>
            When implemented by a class, gets or sets the background color for the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IControl.BackgroundImage">
            <summary>
            When implemented by a class, gets or sets the background image displayed in the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IControl.Font">
            <summary>
            When implemented by a class, gets or sets the font of the text displayed by the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IControl.Parent">
            <summary>
            When implemented by a class, gets or sets a reference to the server control's parent control in the page control hierarchy.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IControl.Focused">
            <summary>
            When implemented by a class, gets a value indicating whether the control has input focus.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IControl.Enabled">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the control can respond to user interaction.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IControl.Handle">
            <summary>
            When implemented by a class, gets the window handle that the control is bound to.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IControl.IsHandleCreated">
            <summary>
            When implemented by a class, gets a value indicating whether the control has a handle associated with it.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.IControl.Click">
            <summary>
            When implemented by a class, occurs when the control is clicked.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IRange">
            <summary>
            Represents an pair of two points that defines a scope in a two-dimensional plane.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IRange.StartPoint">
            <summary>
            When implemented by a class, gets or sets begin of <c>IRange</c> area.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IRange.EndPoint">
            <summary>
            When implemented by a class, gets or sets end of <c>IRange</c> area.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IRange.Size">
            <summary>
            When implemented by a class, gets or sets size of <c>IRange</c> area.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IRange.IsEmpty">
            <summary>
            When implemented by a class, gets boolea value indicating whether <c>IRange</c> has zero size.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IPainter">
            <summary>
            Encapsulates a drawing surface, providing properties and methods used to draw text and graphic primitives.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.Clear">
            <summary>
            When implemented by a class, resets all <c>IPainter</c> properties to the initial state.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.StringWidth(System.String)">
            <summary>
            When implemented by a class, returns width of the given string.
            </summary>
            <param name="text">The text to calculate width.</param>
            <returns>Width of specified string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.StringWidth(System.String,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, returns width of the specified part of the given string.
            </summary>
            <param name="text">The text to calculate width.</param>
            <param name="pos">Position of the first character to start calculating.</param>
            <param name="len">Length of the part of string to calculate width.</param>
            <returns>Width of the part of string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.StringWidth(System.String,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            When implemented by a class, returns width of the given string fitting into the given Width.
            </summary>
            <param name="text">The text to calculate width.</param>
            <param name="width">Maximum layout area for the string.</param>
            <param name="count">Receives number of character fitting into specified Width.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the part of string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.StringWidth(System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            When implemented by a class, returns width of the specified part of the given string fitting into the given Width.
            </summary>
            <param name="text">The text to calculate width.</param>
            <param name="pos">Position of the first character to start calculating.</param>
            <param name="len">Length of the part of string to calculate width.</param>
            <param name="width">Maximum layout area for the string.</param>
            <param name="count">Receives number of characters fitting into specified Width.</param>
            <returns>Width of the part of string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.StringWidth(System.String,System.Int32,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            When implemented by a class, returns width of the specified part of the given string fitting into the given Width.
            </summary>
            <param name="text">The text to calculate width.</param>
            <param name="pos">Position of the first character to start calculating.</param>
            <param name="len">Length of the part of string to calculate width.</param>
            <param name="width">Maximum layout area for the string.</param>
            <param name="count">Receives number of characters fitting into the into the specified Width.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the part of string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.CharWidth(System.Char,System.Int32)">
            <summary>
            When implemented by a class, returns width of the given number of specified character.
            </summary>
            <param name="ch">Character to calculate width.</param>
            <param name="count">Number of characters.</param>
            <returns>Width of specified characters.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.CharWidth(System.Char,System.Int32,System.Int32@)">
            <summary>
            When implemented by a class, returns width of the such number of the specified characters fitting into the given Width.
            </summary>
            <param name="ch">Character to calculate width.</param>
            <param name="width">The width that should hold a number of the specified character.</param>
            <param name="count">Receive number of character that can fit into specified width.</param>
            <returns>Width of specified characters.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.BeginPaint(System.Drawing.Graphics)">
            <summary>
            When implemented by a class, prepares the <c>IPainter</c> to paint. Associates new device context from given Graphics object to <c>IPainter</c> and preserves <c>IPainter</c> properties.
            <seealso cref="!:QWhale.Common.IPainter.EndPaint"/>
            </summary>
            <param name="graphics">The Graphics object to draw on.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.EndPaint">
            <summary>
            When implemented by a class, marks the end of painting. Releases device context associated with this <c>IPainter</c> and restores saved <c>IPainter</c> properties.
            <seealso cref="!:QWhale.Common.IPainter.BeginPaint"/>
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.FillRectangle(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, fills the given rectangle by using the current brush.
            </summary>
            <param name="rect">The rectangle object to fill.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.FillRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, fills the given rectangular area by using the current brush.
            </summary>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.FillRectangle(System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, fills the given rectangle by using specified color.
            </summary>
            <param name="color">Specified color to fill rectangle.</param>
            <param name="rect">The rectangle object to fill.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.FillRectangle(System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, fills the given rectangle by using specified color.
            </summary>
            <param name="color">Specified color to fill rectangle.</param>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.FillPolygon(System.Drawing.Color,System.Drawing.Point[])">
            <summary>
            When implemented by a class, fills the interior of a polygon defined by an array of points specified by Point structures.
            </summary>
            <param name="color">Specifies color to fill polygon.</param>
            <param name="points">Array of Point structures that represent the vertices of the polygon to fill.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.FillGradient(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            When implemented by a class, fills the given rectangle with color that smoothly fades from one side to the other.
            </summary>
            <param name="rect">The rectangle object to fill.</param>
            <param name="beginColor">A Color structure that represents the starting color of the linear gradient.</param>
            <param name="endColor">A Color structure that represents the ending color of the linear gradient.</param>
            <param name="point1">A Point structure that represents the start point of the linear gradient.</param>
            <param name="point2">A Point structure that represents the end point of the linear gradient.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.FillGradient(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            When implemented by a class, fills the given rectangle with color that smoothly fades from one side to the other.
            </summary>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="beginColor">A Color structure that represents the starting color of the linear gradient.</param>
            <param name="endColor">A Color structure that represents the ending color of the linear gradient.</param>
            <param name="point1">A Point structure that represents the start point of the linear gradient.</param>
            <param name="point2">A Point structure that represents the end point of the linear gradient.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.DrawThemeBackground(System.IntPtr,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, draws the background image defined by the visual style for the specified control part.
            </summary>
            <param name="handle">Handle to a window's specified theme data.</param>
            <param name="partID">Specifies the part to draw.</param>
            <param name="stateID">Specifies the state of the part to draw.</param>
            <param name="rect">Specifies the rectangle, in logical coordinates, in which the background image is drawn.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.DrawRectangle(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, draws a border around the specified rectangle using current <c>BackColor</c>.
            </summary>
            <param name="rect">The rectangle object to draw border.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.DrawFocusRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            When implemented by a class, draws a border around the specified rectangle using using dot pattern.
            </summary>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="color">Color of the frame.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.DrawFocusRect(System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            When implemented by a class, draws a border around the specified rectangle using current <c>BackColor</c>.
            </summary>
            <param name="rect">The rectangle object to draw border.</param>
            <param name="color">Color of the frame.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.DrawRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, draws a border around the specified rectangle using dot pattern.
            </summary>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.DrawRoundRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, draws a rectangle with rounded corners. The rectangle is outlined by using the current pen and filled by using the current brush.
            </summary>
            <param name="left">Specifies the x-coordinate, in logical coordinates, of the upper-left corner of the rectangle.</param>
            <param name="top">Specifies the y-coordinate, in logical coordinates, of the upper-left corner of the rectangle.</param>
            <param name="right">Specifies the x-coordinate, in logical coordinates, of the lower-right corner of the rectangle.</param>
            <param name="bottom">Specifies the y-coordinate, in logical coordinates, of the lower-right corner of the rectangle.</param>
            <param name="width">Specifies the width, in logical coordinates, of the ellipse used to draw the rounded corners.</param>
            <param name="height">Specifies the height, in logical coordinates, of the ellipse used to draw the rounded corners.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, draws a line from the given start position up to, but not including, the specified end point.
            </summary>
            <param name="x1">X-coordinate of the line's start point.</param>
            <param name="y1">Y-coordinate of the line's start point.</param>
            <param name="x2">X-coordinate of the line's ending point.</param>
            <param name="y2">Y-coordinate of the line's ending point.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Drawing.Drawing2D.DashStyle)">
            <summary>
            When implemented by a class, draws a line from the given start position up to, but not including, the specified end point.
            </summary>
            <param name="x1">X-coordinate of the line's start point.</param>
            <param name="y1">Y-coordinate of the line's start point.</param>
            <param name="x2">X-coordinate of the line's ending point.</param>
            <param name="y2">Y-coordinate of the line's ending point.</param>
            <param name="color">Specifies color of the Pen object to draw line.</param>
            <param name="width">Specifies width of the Pen object to draw line.</param>
            <param name="penStyle">Specifies style of the Pen object to draw line.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.DrawDotLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            When implemented by a class, draws a dotted line from the given start position up to the specified end point.
            </summary>
            <param name="x1">X-coordinate of the line's start point.</param>
            <param name="y1">Y-coordinate of the line's start point.</param>
            <param name="x2">X-coordinate of the line's ending point.</param>
            <param name="y2">Y-coordinate of the line's ending point.</param>
            <param name="color">Specifies line color.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.DrawWave(System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            When implemented by a class, draws waved line in the specified rectangular area.
            </summary>
            <param name="rect">Rectangle that bounds the drawing area for the wave.</param>
            <param name="color">Color used to draw wave.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.DrawImage(System.Windows.Forms.ImageList,System.Int32,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, draws specified image in the specified rectangular area.
            </summary>
            <param name="images">Image list that contains image to draw.</param>
            <param name="index">Index of image to draw within image list.</param>
            <param name="rect">Rectangle that bounds the drawing area for the image.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.DrawImage(System.Windows.Forms.ImageList,System.Int32,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            When implemented by a class, draws specified image in the specified rectangular area.
            </summary>
            <param name="images">Image list that contains image to draw.</param>
            <param name="index">Index of image to draw within image list.</param>
            <param name="rect">Rectangle that bounds the drawing area for the image.</param>
            <param name="srcX">X-coordinate of the upper-left corner of the portion of the source image to be drawn.</param>
            <param name="srcY">Y-coordinate of the upper-left corner of the portion of the source image to be drawn.</param>
            <param name="srcWidth">Width of the portion of the source image to be drawn.</param>
            <param name="srcHeight">Width of the portion of the source image to be drawn.</param>
            <param name="srcUnit">Specifies the unit of measure for the image.</param>
            <param name="imageAttr">Specifies the color and size attributes of the image to be drawn.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.StretchDrawImage(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Bitmap)">
            <summary>
            When implemented by a class, draws stretched image in the specified rectangular area.
            </summary>
            <param name="image">Specifies image to draw.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.DrawEdge(System.Drawing.Rectangle@,System.Windows.Forms.Border3DStyle,System.Windows.Forms.Border3DSide)">
            <summary>
            When implemented by a class, draws one or more edges of rectangle.
            </summary>
            <param name="rect">Specifies rectangle which edges should be drawn.</param>
            <param name="border">Specifies the style of a three-dimensional border.</param>
            <param name="sides">Specifies the sides of a rectangle to draw.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.DrawEdge(System.Drawing.Rectangle@,System.Windows.Forms.Border3DStyle,System.Windows.Forms.Border3DSide,System.Int32)">
            <summary>
            When implemented by a class, draws one or more edges of rectangle.
            </summary>
            <param name="rect">Specifies rectangle which edges should be drawn.</param>
            <param name="border">Specifies the style of a three-dimensional border.</param>
            <param name="sides">Specifies the sides of a rectangle to draw.</param>
            <param name="flags">additional flags (used for internal purposes).</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.DrawPolygon(System.Drawing.Point[],System.Drawing.Color)">
            <summary>
            When implemented by a class, draws a ploygon defined by an array of Point structures.
            </summary>
            <param name="points">Array of Point structures that represent the vertices of the polygon.</param>
            <param name="color">Specifies color of the polygon.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.TextOut(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, draws text in the specified location.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="x">X-coordinate of the start text point.</param>
            <param name="y">Y-coordinate of the start text point.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.TextOut(System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            When implemented by a class, draws text in the specified location.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="x">X-coordinate of the start text point.</param>
            <param name="y">Y-coordinate of the start text point.</param>
            <param name="clipped">Specifies that text will be clipped to the rectangle.</param>
            <param name="opaque">Specifies that current background color should be used to fill the rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.TextOut(System.String,System.Int32,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, draws text within the specified rectangle.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">Specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.TextOut(System.String,System.Int32,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            When implemented by a class, draws text within the specified rectangle.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">Specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
            <param name="clipped">Specifies that text will be clipped to the rectangle.</param>
            <param name="opaque">Specifies that current background color should be used to fill the rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.TextOut(System.String,System.Int32,System.Drawing.Rectangle,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            When implemented by a class, draws text within the specified rectangle.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">Specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
            <param name="x">X-coordinate of the start text point.</param>
            <param name="y">Y-coordinate of the start text point.</param>
            <param name="clipped">Specifies that text will be clipped to the rectangle.</param>
            <param name="opaque">Specifies that current background color should be used to fill the rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.TextOut(System.String,System.Int32,System.Drawing.Rectangle,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            When implemented by a class, draws text within the specified rectangle.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">Specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
            <param name="x">X-coordinate of the start text point.</param>
            <param name="y">Y-coordinate of the start text point.</param>
            <param name="clipped">Specifies that text will be clipped to the rectangle.</param>
            <param name="opaque">Specifies that current background color should be used to fill the rectangle.</param>
            <param name="space">Specifies distance between origins of adjacent character cells.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.DrawText(System.String,System.Int32,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, draws text in the specified rectangle using current values of <c>TextColor</c> and <c>BackColor</c>.
            </summary>
            <param name="text">The text to be draw.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">The layout area for drawing text.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.Transform(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            When implemented by a class, sets a two-dimensional linear transformation for the specified device context.
            </summary>
            <param name="x">Horizontal offset of the transformation.</param>
            <param name="y">Vertical offset of the transformation.</param>
            <param name="scaleX">Horizontal scale of the transformation.</param>
            <param name="scaleY">Vertical scale of the transformation.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.EndTransform">
            <summary>
            When implemented by a class, sets default two-dimensional linear transformation for the specified device context.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.IntersectClipRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, creates a new clipping region from the intersection of the current clipping region and the specified rectangle.
            </summary>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.ExcludeClipRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, creates a new clipping region that consists of the existing clipping region minus the specified rectangle.
            </summary>
            <param name="x">X-coordinate, of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate, of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.IntersectClipRect(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, creates a new clipping region from the intersection of the current clipping region and the specified rectangle.
            </summary>
            <param name="rect">Rectangle to intersect.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.ExcludeClipRect(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, creates a new clipping region that consists of the existing clipping region minus the specified rectangle.
            </summary>
            <param name="rect">Rectangle to exclude.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.SaveClip(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, retrieves handle to clipping region saved from specified rectangle.
            </summary>
            <param name="rect">Rectangle to process.</param>
            <returns>Handle to clipping region.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IPainter.RestoreClip(System.IntPtr)">
            <summary>
            When implemented by a class, restores current clipping region from previously saved region.
            </summary>
            <param name="rgn">Specifies handle to the previously saved clipping region.</param>
        </member>
        <member name="P:Stimulsoft.Editor.IPainter.Transformation">
            <summary>
            When implemented by a class gets the world transformation for <c>Graphics</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPainter.Graphics">
            <summary>
            When implemented by a class, represents Graphics object used to paint.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPainter.Font">
            <summary>
            When implemented by a class, gets or sets font of the device context currently associated with the <c>IPainter</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPainter.FontStyle">
            <summary>
            When implemented by a class, gets or sets font style of the device context currently associated with the <c>IPainter</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPainter.BackColor">
            <summary>
            When implemented by a class, gets or sets background color of the device context currently associated with the <c>IPainter</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPainter.ForeColor">
            <summary>
            When implemented by a class, gets or sets foreground color of the device context currently associated with the <c>IPainter</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPainter.TextColor">
            <summary>
            When implemented by a class, gets or sets text color of the device context currently associated with the <c>IPainter</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPainter.StringFormat">
            <summary>
            When implemented by a class, encapsulates text layout information and display manipulations for this <c>IPainter</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPainter.Opaque">
            <summary>
            When implemented by a class, gets or sets a boolean value indicating that background is filled with the current background color before the text is drawn.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPainter.IsMonoSpaced">
            <summary>
            When implemented by a class, represents a value indicating whether font of the device context currently associated with this <c>IPainter</c> is monospaced, meaning that all characters drawn with this font have the same width.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPainter.FontWidth">
            <summary>
            When implemented by a class, represents width of the font of the device context currently associated with the <c>IPainter</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPainter.FontHeight">
            <summary>
            When implemented by a class, represents height of the font of the device context currently associated with the <c>IPainter</c>.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.Consts">
            <summary>
            Contains default constants for common requirements.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.StringConsts">
            <summary>
            Contains default string constants for common requirements.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ErrorHandler">
            <summary>
            Represents class that can react various ways for erroneous situations.
            This class is used internally for exceptions handling.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ErrorHandler.Error(System.Exception)">
            <summary>
            Processes given exception with defined way.
            </summary>
            <param name="exception">The Exception to process.</param>
        </member>
        <member name="P:Stimulsoft.Editor.ErrorHandler.ErrorBehavior">
            <summary>
            Gets or sets a value indicating reaction on any error.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.FontInfo">
            <summary>
            Represents information about a particular font.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.FontInfo.#ctor(System.Drawing.Font,System.IntPtr)">
            <summary>
            Initializes a new instance of the <c>FontInfo</c> class with specified parameters.
            </summary>
            <param name="font">Specifies Font for this new instance.</param>
            <param name="dc">Handle to the device context.</param>
        </member>
        <member name="P:Stimulsoft.Editor.FontInfo.Font">
            <summary>
            Gets or sets font of this <c>FontInfo</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.FontInfo.HFont">
            <summary>
            Represents handle to the <c>Font</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.FontInfo.FontWidth">
            <summary>
            Represents width of the font.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.FontInfo.FontHeight">
            <summary>
            Represents height of the font.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.FontInfo.IsMonoSpaced">
            <summary>
            Represents a value indicating whether font is monospaced, meaning that all characters drawn with this font have the same width.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.GdiFontInfo">
            <summary>
            Represents information about a particular Gdi font.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.GdiFontInfo.#ctor(System.Drawing.Font,System.IntPtr)">
            <summary>
            Initializes a new instance of the <c>GdiFontInfo</c> class with specified parameters.
            </summary>
            <param name="font">Specifies Font for this new instance.</param>
            <param name="dc">Handle to the device context.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiFontInfo.CharWidth(System.Char)">
            <summary>
            Calculates width of specified character using current <c>Font</c>.
            </summary>
            <param name="ch">Character measure.</param>
            <returns>Width of the character.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.FontInfos">
            <summary>
            Represents collection of FontInfo elements.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.FontInfos.#ctor(System.Drawing.Font,System.IntPtr)">
            <summary>
            Initializes a new instance of the <c>FontInfos</c> class with specified parameters.
            </summary>
            <param name="font">Specifies Font for this new instance.</param>
            <param name="dc">Handle to the device context.</param>
        </member>
        <member name="M:Stimulsoft.Editor.FontInfos.Finalize">
            <summary>
            Destroys the instance of the <c>FontInfos</c> class.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.FontInfos.InitStyle(System.Drawing.FontStyle)">
            <summary>
            Adds specified style to the style collection.
            </summary>
            <param name="style">Style to add.</param>
            <returns>FontInfo that corresponds to the specified style.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.FontInfos.CurrentInfo">
            <summary>
            Represents current FontInfo object.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.FontInfos.IsMonoSpaced">
            <summary>
            Represents a value indicating whether current font is monospaced.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.FontInfos.FontHeight">
            <summary>
            Represents height of the current font.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.GdiFontInfos">
            <summary>
            Represents collection of GdiFontInfo elements.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.GdiFontInfos.#ctor(System.Drawing.Font,System.IntPtr)">
            <summary>
            Initializes a new instance of the <c>GdiFontInfos</c> class with specified parameters.
            </summary>
            <param name="font">Specifies Font for this new instance.</param>
            <param name="dc">Handle to the device context.</param>
        </member>
        <member name="T:Stimulsoft.Editor.Painter">
            <summary>
            Encapsulates a drawing surface, providing properties and methods used to draw text and graphic primitives.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Painter.#ctor">
            <summary>
            Initializes a new instance of the <c>Painter</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Painter.Finalize">
            <summary>
            Destroys the instance of the <c>Painter</c> class.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Painter.Clear">
            <summary>
            Resets all <c>Painter</c> properties to the initial state.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Painter.Font">
            <summary>
            Gets or sets font of the device context currently associated with the <c>Painter</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Painter.FontStyle">
            <summary>
            Gets or sets font style of the device context currently associated with the <c>Painter</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Painter.TextColor">
            <summary>
            Gets or sets text color of the device context currently associated with the <c>Painter</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Painter.ForeColor">
            <summary>
            Gets or sets foreground color of the device context currently associated with the <c>Painter</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Painter.BackColor">
            <summary>
            Gets or sets background color of the device context currently associated with the <c>Painter</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Painter.Opaque">
            <summary>
            Gets or sets a boolean value indicating that background is filled with the current background color before the text is drawn.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Painter.StringFormat">
            <summary>
            Encapsulates text layout information and display manipulations for this <c>Painter</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Painter.IsMonoSpaced">
            <summary>
            Represents a value indicating whether font of the device context currently associated with this <c>Painter</c> is monospaced, meaning that all characters drawn with this font have the same width.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Painter.FontWidth">
            <summary>
            Represents width of the font of the device context currently associated with the <c>Painter</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Painter.FontHeight">
            <summary>
            Represents height of the font of the device context currently associated with the <c>Painter</c>.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.GdiPainter">
            <summary>
            Encapsulates a Gdi drawing surface, providing properties and methods used to draw text and graphic primitives.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.Clear">
            <summary>
            Resets all <c>GdiPainter</c> properties to the initial state.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.GdiPainter.Transformation">
            <summary>
            Gets the world transformation for <c>Graphics</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.GdiPainter.Graphics">
            <summary>
            Represents Graphics object used to paint text and graphic primitives.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.Transform(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Sets a two-dimensional linear transformation for the specified device context.
            </summary>
            <param name="x">Horizontal offset of the transformation.</param>
            <param name="y">Vertical offset of the transformation.</param>
            <param name="scaleX">Horizontal scale of the transformation.</param>
            <param name="scaleY">Vertical scale of the transformation.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.EndTransform">
            <summary>
            Sets default two-dimensional linear transformation for the specified device context.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.BeginPaint(System.Drawing.Graphics)">
            <summary>
            Prepares the <c>GdiPainter</c> to paint. Associates new device context from given Graphics object to <c>GdiPainter</c> and preserves <c>GdiPainter</c> properties.
            <seealso cref="!:QWhale.Common.GdiPainter.EndPaint"/>
            </summary>
            <param name="graphics">The Graphics object to draw on.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.EndPaint">
            <summary>
            Marks the end of painting. Releases device context associated with this <c>GdiPainter</c> and restores saved <c>GdiPainter</c> properties.
            <seealso cref="!:QWhale.Common.GdiPainter.BeginPaint"/>
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.StringWidth(System.String)">
            <summary>
            Returns width of the given string.
            </summary>
            <param name="text">The text to calculate width.</param>
            <returns>Width of specified string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.StringWidth(System.String,System.Int32,System.Int32)">
            <summary>
            Returns width of the specified part of the given string.
            </summary>
            <param name="text">The text to calculate width.</param>
            <param name="pos">Position of the first character to start calculating.</param>
            <param name="len">Length of the part of string to calculate width.</param>
            <returns>Width of the part of string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.StringWidth(System.String,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Returns width of the given string fitting into the given Width.
            </summary>
            <param name="text">The text to calculate width.</param>
            <param name="width">Maximum layout area for the string.</param>
            <param name="count">Receives number of character fitting into specified Width.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the part of string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.StringWidth(System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns width of the specified part of the given string fitting into the given Width.
            </summary>
            <param name="text">The text to calculate width.</param>
            <param name="pos">Position of the first character to start calculating.</param>
            <param name="len">Length of the part of string to calculate width.</param>
            <param name="width">Maximum layout area for the string.</param>
            <param name="count">Receives number of characters fitting into specified Width.</param>
            <returns>Width of the part of string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.StringWidth(System.String,System.Int32,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Returns width of the specified part of the given string fitting into the given Width.
            </summary>
            <param name="text">The text to calculate width.</param>
            <param name="pos">Position of the first character to start calculating.</param>
            <param name="len">Length of the part of string to calculate width.</param>
            <param name="width">Maximum layout area for the string.</param>
            <param name="count">Receives number of characters fitting into the into the specified Width.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the part of string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.CharWidth(System.Char,System.Int32)">
            <summary>
            Returns width of the given number of specified character.
            </summary>
            <param name="ch">Character to calculate width.</param>
            <param name="count">Number of characters.</param>
            <returns>Width of specified characters.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.CharWidth(System.Char,System.Int32,System.Int32@)">
            <summary>
            Returns width of the such number of the specified characters fitting into the given Width.
            </summary>
            <param name="ch">Character to calculate width.</param>
            <param name="width">The width that should hold a number of the specified character.</param>
            <param name="count">Receive number of character that can fit into specified width.</param>
            <returns>Width of specified characters.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.FillRectangle(System.Drawing.Rectangle)">
            <summary>
            Fills the given rectangle by using the current brush.
            </summary>
            <param name="rect">The rectangle object to fill.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.FillRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills the given rectangular area by using the current brush.
            </summary>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.FillRectangle(System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>
            Fills the given rectangle by using specified color.
            </summary>
            <param name="color">Specified color to fill rectangle.</param>
            <param name="rect">The rectangle object to fill.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.FillRectangle(System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills the given rectangle by using specified color.
            </summary>
            <param name="color">Specified color to fill rectangle.</param>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.FillPolygon(System.Drawing.Color,System.Drawing.Point[])">
            <summary>
            Fills the interior of a polygon defined by an array of points specified by Point structures.
            </summary>
            <param name="color">Specifies color to fill polygon.</param>
            <param name="points">Array of Point structures that represent the vertices of the polygon to fill.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.FillGradient(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Fills the given rectangle with color that smoothly fades from one side to the other.
            </summary>
            <param name="rect">The rectangle object to fill.</param>
            <param name="beginColor">A Color structure that represents the starting color of the linear gradient.</param>
            <param name="endColor">A Color structure that represents the ending color of the linear gradient.</param>
            <param name="point1">A Point structure that represents the start point of the linear gradient.</param>
            <param name="point2">A Point structure that represents the end point of the linear gradient.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.FillGradient(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Fills the given rectangle with color that smoothly fades from one side to the other.
            </summary>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="beginColor">A Color structure that represents the starting color of the linear gradient.</param>
            <param name="endColor">A Color structure that represents the ending color of the linear gradient.</param>
            <param name="point1">A Point structure that represents the start point of the linear gradient.</param>
            <param name="point2">A Point structure that represents the end point of the linear gradient.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.DrawThemeBackground(System.IntPtr,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Draws the background image defined by the visual style for the specified control part.
            </summary>
            <param name="handle">Handle to a window's specified theme data.</param>
            <param name="partID">Specifies the part to draw.</param>
            <param name="stateID">Specifies the state of the part to draw.</param>
            <param name="rect">Specifies the rectangle, in logical coordinates, in which the background image is drawn.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.DrawRectangle(System.Drawing.Rectangle)">
            <summary>
            Draws a border around the specified rectangle using current <c>BackColor</c>.
            </summary>
            <param name="rect">The rectangle object to draw border.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.DrawRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a border around the specified rectangle using current <c>BackColor</c>.
            </summary>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.DrawRoundRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangle with rounded corners. The rectangle is outlined by using the current pen and filled by using the current brush.
            </summary>
            <param name="left">Specifies the x-coordinate, in logical coordinates, of the upper-left corner of the rectangle.</param>
            <param name="top">Specifies the y-coordinate, in logical coordinates, of the upper-left corner of the rectangle.</param>
            <param name="right">Specifies the x-coordinate, in logical coordinates, of the lower-right corner of the rectangle.</param>
            <param name="bottom">Specifies the y-coordinate, in logical coordinates, of the lower-right corner of the rectangle.</param>
            <param name="width">Specifies the width, in logical coordinates, of the ellipse used to draw the rounded corners.</param>
            <param name="height">Specifies the height, in logical coordinates, of the ellipse used to draw the rounded corners.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.DrawFocusRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Draws a border around the specified rectangle using using dot pattern.
            </summary>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="color">Color of the frame.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.DrawFocusRect(System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Draws a border around the specified rectangle using current <c>BackColor</c>.
            </summary>
            <param name="rect">The rectangle object to draw border.</param>
            <param name="color">Color of the frame.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.StretchDrawImage(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Bitmap)">
            <summary>
            Draws stretched image in the specified rectangular area.
            </summary>
            <param name="image">Specifies image to draw.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.DrawImage(System.Windows.Forms.ImageList,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Draws specified image in the specified rectangular area.
            </summary>
            <param name="images">Image list that contains image to draw.</param>
            <param name="index">Index of image to draw within image list.</param>
            <param name="rect">Rectangle that bounds the drawing area for the image.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.DrawImage(System.Windows.Forms.ImageList,System.Int32,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            Draws specified image in the specified rectangular area.
            </summary>
            <param name="images">Image list that contains image to draw.</param>
            <param name="index">Index of image to draw within image list.</param>
            <param name="rect">Rectangle that bounds the drawing area for the image.</param>
            <param name="srcX">X-coordinate of the upper-left corner of the portion of the source image to be drawn.</param>
            <param name="srcY">Y-coordinate of the upper-left corner of the portion of the source image to be drawn.</param>
            <param name="srcWidth">Width of the portion of the source image to be drawn.</param>
            <param name="srcHeight">Width of the portion of the source image to be drawn.</param>
            <param name="srcUnit">Specifies the unit of measure for the image.</param>
            <param name="imageAttr">Specifies the color and size attributes of the image to be drawn.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line from the given start position up to, but not including, the specified end point.
            </summary>
            <param name="x1">X-coordinate of the line's start point.</param>
            <param name="y1">Y-coordinate of the line's start point.</param>
            <param name="x2">X-coordinate of the line's ending point.</param>
            <param name="y2">Y-coordinate of the line's ending point.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Drawing.Drawing2D.DashStyle)">
            <summary>
            Draws a line from the given start position up to, but not including, the specified end point.
            </summary>
            <param name="x1">X-coordinate of the line's start point.</param>
            <param name="y1">Y-coordinate of the line's start point.</param>
            <param name="x2">X-coordinate of the line's ending point.</param>
            <param name="y2">Y-coordinate of the line's ending point.</param>
            <param name="color">Specifies color of the Pen object to draw line.</param>
            <param name="width">Specifies width of the Pen object to draw line.</param>
            <param name="style">Specifies style of the Pen object to draw line.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.DrawDotLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Draws a dotted line from the given start position up to the specified end point.
            </summary>
            <param name="x1">X-coordinate of the line's start point.</param>
            <param name="y1">Y-coordinate of the line's start point.</param>
            <param name="x2">X-coordinate of the line's ending point.</param>
            <param name="y2">Y-coordinate of the line's ending point.</param>
            <param name="color">Specifies line color.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.DrawEdge(System.Drawing.Rectangle@,System.Windows.Forms.Border3DStyle,System.Windows.Forms.Border3DSide,System.Int32)">
            <summary>
            Draws one or more edges of rectangle.
            </summary>
            <param name="rect">Specifies rectangle which edges should be drawn.</param>
            <param name="border">Specifies the style of a three-dimensional border.</param>
            <param name="sides">Specifies the sides of a rectangle to draw.</param>
            <param name="flags">additional flags (used for internal purposes).</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.DrawEdge(System.Drawing.Rectangle@,System.Windows.Forms.Border3DStyle,System.Windows.Forms.Border3DSide)">
            <summary>
            Draws one or more edges of rectangle.
            </summary>
            <param name="rect">Specifies rectangle which edges should be drawn.</param>
            <param name="border">Specifies the style of a three-dimensional border.</param>
            <param name="sides">Specifies the sides of a rectangle to draw.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.DrawWave(System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Draws waved line in the specified rectangular area.
            </summary>
            <param name="rect">Rectangle that bounds the drawing area for the wave.</param>
            <param name="color">Color used to draw wave.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.DrawPolygon(System.Drawing.Point[],System.Drawing.Color)">
            <summary>
            Draws a ploygon defined by an array of Point structures.
            </summary>
            <param name="points">Array of Point structures that represent the vertices of the polygon.</param>
            <param name="color">Specifies color of the polygon.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.TextOut(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws text in the specified location.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="x">X-coordinate of the start text point.</param>
            <param name="y">Y-coordinate of the start text point.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.TextOut(System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Draws text in the specified location.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="x">X-coordinate of the start text point.</param>
            <param name="y">Y-coordinate of the start text point.</param>
            <param name="clipped">Specifies that text will be clipped to the rectangle.</param>
            <param name="opaque">Specifies that current background color should be used to fill the rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.TextOut(System.String,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Draws text within the specified rectangle.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">Specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.TextOut(System.String,System.Int32,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            Draws text within the specified rectangle.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">Specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
            <param name="clipped">Specifies that text will be clipped to the rectangle.</param>
            <param name="opaque">Specifies that current background color should be used to fill the rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.TextOut(System.String,System.Int32,System.Drawing.Rectangle,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Draws text within the specified rectangle.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">Specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
            <param name="clipped">Specifies that text will be clipped to the rectangle.</param>
            <param name="opaque">Specifies that current background color should be used to fill the rectangle.</param>
            <param name="space">Specifies distance between origins of adjacent character cells.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.TextOut(System.String,System.Int32,System.Drawing.Rectangle,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Draws text within the specified rectangle.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">Specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
            <param name="x">X-coordinate of the start text point.</param>
            <param name="y">Y-coordinate of the start text point.</param>
            <param name="clipped">Specifies that text will be clipped to the rectangle.</param>
            <param name="opaque">Specifies that current background color should be used to fill the rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.TextOut(System.String,System.Int32,System.Drawing.Rectangle,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Draws text within the specified rectangle.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">Specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
            <param name="x">X-coordinate of the start text point.</param>
            <param name="y">Y-coordinate of the start text point.</param>
            <param name="clipped">Specifies that text will be clipped to the rectangle.</param>
            <param name="opaque">Specifies that current background color should be used to fill the rectangle.</param>
            <param name="space">Specifies distance between origins of adjacent character cells.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.DrawText(System.String,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Draws text in the specified rectangle using current values of <c>TextColor</c> and <c>BackColor</c>.
            </summary>
            <param name="text">The text to be draw.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">The layout area for drawing text.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.IntersectClipRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new clipping region from the intersection of the current clipping region and the specified rectangle.
            </summary>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.ExcludeClipRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new clipping region that consists of the existing clipping region minus the specified rectangle.
            </summary>
            <param name="x">X-coordinate, of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate, of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.IntersectClipRect(System.Drawing.Rectangle)">
            <summary>
            Creates a new clipping region from the intersection of the current clipping region and the specified rectangle.
            </summary>
            <param name="rect">Rectangle to intersect.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.ExcludeClipRect(System.Drawing.Rectangle)">
            <summary>
            Creates a new clipping region that consists of the existing clipping region minus the specified rectangle.
            </summary>
            <param name="rect">Rectangle to exclude.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.SaveClip(System.Drawing.Rectangle)">
            <summary>
            Retrieves handle to clipping region saved from specified rectangle.
            </summary>
            <param name="rect">Rectangle to process.</param>
            <returns>Handle to clipping region.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPainter.RestoreClip(System.IntPtr)">
            <summary>
            Restores current clipping region from previously saved region.
            </summary>
            <param name="rgn">Specifies handle to the previously saved clipping region.</param>
        </member>
        <member name="P:Stimulsoft.Editor.GdiPainter.Handle">
            <summary>
            Gets handle to device context currently associated with the <c>IPainter</c>.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.GdiPlusPainter">
            <summary>
            Encapsulates a Gdi+ drawing surface, providing properties and methods used to draw text and graphic primitives.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.#ctor">
            <summary>
            Initializes a new instance of the <c>GdiPlusPainter</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.Finalize">
            <summary>
            Destroys the instance of the <c>GdiPlusPainter</c> class.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.StringWidth(System.String)">
            <summary>
            Returns width of the given string.
            </summary>
            <param name="text">The text to calculate width.</param>
            <returns>Width of specified string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.StringWidth(System.String,System.Int32,System.Int32)">
            <summary>
            Returns width of the specified part of the given string.
            </summary>
            <param name="text">The text to calculate width.</param>
            <param name="pos">Position of the first character to start calculating.</param>
            <param name="len">Length of the part of string to calculate width.</param>
            <returns>Width of the part of string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.StringWidth(System.String,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Returns width of the given string fitting into the given Width.
            </summary>
            <param name="text">The text to calculate width.</param>
            <param name="width">Maximum layout area for the string.</param>
            <param name="count">Receives number of character fitting into specified Width.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the part of string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.StringWidth(System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns width of the specified part of the given string fitting into the given Width.
            </summary>
            <param name="text">The text to calculate width.</param>
            <param name="pos">Position of the first character to start calculating.</param>
            <param name="len">Length of the part of string to calculate width.</param>
            <param name="width">Maximum layout area for the string.</param>
            <param name="count">Receives number of characters fitting into specified Width.</param>
            <returns>Width of the part of string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.StringWidth(System.String,System.Int32,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Returns width of the specified part of the given string fitting into the given Width.
            </summary>
            <param name="text">The text to calculate width.</param>
            <param name="pos">Position of the first character to start calculating.</param>
            <param name="len">Length of the part of string to calculate width.</param>
            <param name="width">Maximum layout area for the string.</param>
            <param name="count">Receives number of characters fitting into the into the specified Width.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the part of string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.CharWidth(System.Char,System.Int32)">
            <summary>
            Returns width of the given number of specified character.
            </summary>
            <param name="ch">Character to calculate width.</param>
            <param name="count">Number of characters.</param>
            <returns>Width of specified characters.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.CharWidth(System.Char,System.Int32,System.Int32@)">
            <summary>
            Returns width of the such number of the specified characters fitting into the given Width.
            </summary>
            <param name="ch">Character to calculate width.</param>
            <param name="width">The width that should hold a number of the specified character.</param>
            <param name="count">Receive number of character that can fit into specified width.</param>
            <returns>Width of specified characters.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.BeginPaint(System.Drawing.Graphics)">
            <summary>
            Prepares the <c>GdiPlusPainter</c> to paint. Associates new device context from given Graphics object to <c>GdiPlusPainter</c> and preserves <c>GdiPlusPainter</c> properties.
            <seealso cref="!:QWhale.Common.GdiPlusPainter.EndPaint"/>
            </summary>
            <param name="graphics">The Graphics object to draw on.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.EndPaint">
            <summary>
            Marks the end of painting. Releases device context associated with this <c>GdiPlusPainter</c> and restores saved <c>GdiPlusPainter</c> properties.
            <seealso cref="!:QWhale.Common.GdiPlusPainter.BeginPaint"/>
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.FillRectangle(System.Drawing.Rectangle)">
            <summary>
            Fills the given rectangle by using the current brush.
            </summary>
            <param name="rect">The rectangle object to fill.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.FillRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills the given rectangular area by using the current brush.
            </summary>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.FillRectangle(System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>
            Fills the given rectangle by using specified color.
            </summary>
            <param name="color">Specified color to fill rectangle.</param>
            <param name="rect">The rectangle object to fill.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.FillRectangle(System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills the given rectangle by using specified color.
            </summary>
            <param name="color">Specified color to fill rectangle.</param>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.FillPolygon(System.Drawing.Color,System.Drawing.Point[])">
            <summary>
            Fills the interior of a polygon defined by an array of points specified by Point structures.
            </summary>
            <param name="color">Specifies color to fill polygon.</param>
            <param name="points">Array of Point structures that represent the vertices of the polygon to fill.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.FillGradient(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Fills the given rectangle with color that smoothly fades from one side to the other.
            </summary>
            <param name="rect">The rectangle object to fill.</param>
            <param name="beginColor">A Color structure that represents the starting color of the linear gradient.</param>
            <param name="endColor">A Color structure that represents the ending color of the linear gradient.</param>
            <param name="point1">A Point structure that represents the start point of the linear gradient.</param>
            <param name="point2">A Point structure that represents the end point of the linear gradient.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.FillGradient(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Fills the given rectangle with color that smoothly fades from one side to the other.
            </summary>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="beginColor">A Color structure that represents the starting color of the linear gradient.</param>
            <param name="endColor">A Color structure that represents the ending color of the linear gradient.</param>
            <param name="point1">A Point structure that represents the start point of the linear gradient.</param>
            <param name="point2">A Point structure that represents the end point of the linear gradient.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.DrawThemeBackground(System.IntPtr,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Draws the background image defined by the visual style for the specified control part.
            </summary>
            <param name="handle">Handle to a window's specified theme data.</param>
            <param name="partID">Specifies the part to draw.</param>
            <param name="stateID">Specifies the state of the part to draw.</param>
            <param name="rect">Specifies the rectangle, in logical coordinates, in which the background image is drawn.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.DrawRectangle(System.Drawing.Rectangle)">
            <summary>
            Draws a border around the specified rectangle using current <c>BackColor</c>.
            </summary>
            <param name="rect">The rectangle object to draw border.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.DrawRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a border around the specified rectangle using current <c>BackColor</c>.
            </summary>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.DrawFocusRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Draws a border around the specified rectangle using using dot pattern.
            </summary>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="color">Color of the frame.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.DrawFocusRect(System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Draws a border around the specified rectangle using current <c>BackColor</c>.
            </summary>
            <param name="rect">The rectangle object to draw border.</param>
            <param name="color">Color of the frame.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.DrawRoundRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangle with rounded corners. The rectangle is outlined by using the current pen and filled by using the current brush.
            </summary>
            <param name="left">Specifies the x-coordinate, in logical coordinates, of the upper-left corner of the rectangle.</param>
            <param name="top">Specifies the y-coordinate, in logical coordinates, of the upper-left corner of the rectangle.</param>
            <param name="right">Specifies the x-coordinate, in logical coordinates, of the lower-right corner of the rectangle.</param>
            <param name="bottom">Specifies the y-coordinate, in logical coordinates, of the lower-right corner of the rectangle.</param>
            <param name="width">Specifies the width, in logical coordinates, of the ellipse used to draw the rounded corners.</param>
            <param name="height">Specifies the height, in logical coordinates, of the ellipse used to draw the rounded corners.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line from the given start position up to, but not including, the specified end point.
            </summary>
            <param name="x1">X-coordinate of the line's start point.</param>
            <param name="y1">Y-coordinate of the line's start point.</param>
            <param name="x2">X-coordinate of the line's ending point.</param>
            <param name="y2">Y-coordinate of the line's ending point.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Int32,System.Drawing.Drawing2D.DashStyle)">
            <summary>
            Draws a line from the given start position up to, but not including, the specified end point.
            </summary>
            <param name="x1">X-coordinate of the line's start point.</param>
            <param name="y1">Y-coordinate of the line's start point.</param>
            <param name="x2">X-coordinate of the line's ending point.</param>
            <param name="y2">Y-coordinate of the line's ending point.</param>
            <param name="color">Specifies color of the Pen object to draw line.</param>
            <param name="width">Specifies width of the Pen object to draw line.</param>
            <param name="penStyle">Specifies style of the Pen object to draw line.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.DrawDotLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Draws a dotted line from the given start position up to the specified end point.
            </summary>
            <param name="x1">X-coordinate of the line's start point.</param>
            <param name="y1">Y-coordinate of the line's start point.</param>
            <param name="x2">X-coordinate of the line's ending point.</param>
            <param name="y2">Y-coordinate of the line's ending point.</param>
            <param name="color">Specifies line color.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.DrawWave(System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Draws waved line in the specified rectangular area.
            </summary>
            <param name="rect">Rectangle that bounds the drawing area for the wave.</param>
            <param name="color">Color used to draw wave.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.DrawImage(System.Windows.Forms.ImageList,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Draws specified image in the specified rectangular area.
            </summary>
            <param name="images">Image list that contains image to draw.</param>
            <param name="index">Index of image to draw within image list.</param>
            <param name="rect">Rectangle that bounds the drawing area for the image.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.DrawImage(System.Windows.Forms.ImageList,System.Int32,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            Draws specified image in the specified rectangular area.
            </summary>
            <param name="images">Image list that contains image to draw.</param>
            <param name="index">Index of image to draw within image list.</param>
            <param name="rect">Rectangle that bounds the drawing area for the image.</param>
            <param name="srcX">X-coordinate of the upper-left corner of the portion of the source image to be drawn.</param>
            <param name="srcY">Y-coordinate of the upper-left corner of the portion of the source image to be drawn.</param>
            <param name="srcWidth">Width of the portion of the source image to be drawn.</param>
            <param name="srcHeight">Width of the portion of the source image to be drawn.</param>
            <param name="srcUnit">Specifies the unit of measure for the image.</param>
            <param name="imageAttr">Specifies the color and size attributes of the image to be drawn.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.StretchDrawImage(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Bitmap)">
            <summary>
            Draws stretched image in the specified rectangular area.
            </summary>
            <param name="image">Specifies image to draw.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.DrawEdge(System.Drawing.Rectangle@,System.Windows.Forms.Border3DStyle,System.Windows.Forms.Border3DSide)">
            <summary>
            Draws one or more edges of rectangle.
            </summary>
            <param name="rect">Specifies rectangle which edges should be drawn.</param>
            <param name="border">Specifies the style of a three-dimensional border.</param>
            <param name="sides">Specifies the sides of a rectangle to draw.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.DrawEdge(System.Drawing.Rectangle@,System.Windows.Forms.Border3DStyle,System.Windows.Forms.Border3DSide,System.Int32)">
            <summary>
            Draws one or more edges of rectangle.
            </summary>
            <param name="rect">Specifies rectangle which edges should be drawn.</param>
            <param name="border">Specifies the style of a three-dimensional border.</param>
            <param name="sides">Specifies the sides of a rectangle to draw.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.DrawPolygon(System.Drawing.Point[],System.Drawing.Color)">
            <summary>
            Draws a ploygon defined by an array of Point structures.
            </summary>
            <param name="points">Array of Point structures that represent the vertices of the polygon.</param>
            <param name="color">Specifies color of the polygon.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.TextOut(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws text in the specified location.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="x">X-coordinate of the start text point.</param>
            <param name="y">Y-coordinate of the start text point.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.TextOut(System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Draws text in the specified location.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="x">X-coordinate of the start text point.</param>
            <param name="y">Y-coordinate of the start text point.</param>
            <param name="clipped">Specifies that text will be clipped to the rectangle.</param>
            <param name="opaque">Specifies that current background color should be used to fill the rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.TextOut(System.String,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Draws text within the specified rectangle.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">Specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.TextOut(System.String,System.Int32,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            Draws text within the specified rectangle.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">Specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
            <param name="clipped">Specifies that text will be clipped to the rectangle.</param>
            <param name="opaque">Specifies that current background color should be used to fill the rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.TextOut(System.String,System.Int32,System.Drawing.Rectangle,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Draws text within the specified rectangle.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">Specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
            <param name="clipped">Specifies that text will be clipped to the rectangle.</param>
            <param name="opaque">Specifies that current background color should be used to fill the rectangle.</param>
            <param name="space">Specifies distance between origins of adjacent character cells.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.TextOut(System.String,System.Int32,System.Drawing.Rectangle,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Draws text within the specified rectangle.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">Specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
            <param name="x">X-coordinate of the start text point.</param>
            <param name="y">Y-coordinate of the start text point.</param>
            <param name="clipped">Specifies that text will be clipped to the rectangle.</param>
            <param name="opaque">Specifies that current background color should be used to fill the rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.TextOut(System.String,System.Int32,System.Drawing.Rectangle,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Draws text within the specified rectangle.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">Specifies the dimensions, in logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
            <param name="x">X-coordinate of the start text point.</param>
            <param name="y">Y-coordinate of the start text point.</param>
            <param name="clipped">Specifies that text will be clipped to the rectangle.</param>
            <param name="opaque">Specifies that current background color should be used to fill the rectangle.</param>
            <param name="space">Specifies distance between origins of adjacent character cells.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.DrawText(System.String,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Draws text in the specified rectangle using current values of <c>TextColor</c> and <c>BackColor</c>.
            </summary>
            <param name="text">The text to be draw.</param>
            <param name="len">Specifies the length of the string.</param>
            <param name="rect">The layout area for drawing text.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.Transform(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Sets a two-dimensional linear transformation for the specified device context.
            </summary>
            <param name="x">Horizontal offset of the transformation.</param>
            <param name="y">Vertical offset of the transformation.</param>
            <param name="scaleX">Horizontal scale of the transformation.</param>
            <param name="scaleY">Vertical scale of the transformation.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.EndTransform">
            <summary>
            Sets default two-dimensional linear transformation for the specified device context.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.IntersectClipRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new clipping region from the intersection of the current clipping region and the specified rectangle.
            </summary>
            <param name="x">X-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.ExcludeClipRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new clipping region that consists of the existing clipping region minus the specified rectangle.
            </summary>
            <param name="x">X-coordinate, of the upper-left corner of the rectangle.</param>
            <param name="y">Y-coordinate, of the upper-left corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.IntersectClipRect(System.Drawing.Rectangle)">
            <summary>
            Creates a new clipping region from the intersection of the current clipping region and the specified rectangle.
            </summary>
            <param name="rect">Rectangle to intersect.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.ExcludeClipRect(System.Drawing.Rectangle)">
            <summary>
            Creates a new clipping region that consists of the existing clipping region minus the specified rectangle.
            </summary>
            <param name="rect">Rectangle to exclude.</param>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.SaveClip(System.Drawing.Rectangle)">
            <summary>
            Retrieves handle to clipping region saved from specified rectangle.
            </summary>
            <param name="rect">Rectangle to process.</param>
            <returns>Handle to clipping region.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.GdiPlusPainter.RestoreClip(System.IntPtr)">
            <summary>
            Restores current clipping region from previously saved region.
            </summary>
            <param name="rgn">Specifies handle to the previously saved clipping region.</param>
        </member>
        <member name="P:Stimulsoft.Editor.GdiPlusPainter.Transformation">
            <summary>
            Gets the world transformation for <c>Graphics</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.GdiPlusPainter.Graphics">
            <summary>
            Represents Graphics object used to paint.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.GdiPlusPainter.Pen">
            <summary>
            Gets or sets a reference to a Pen object used to draw lines and curves.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.GdiPlusPainter.Brush">
            <summary>
            Gets or sets a reference to a Brush object used to fill the interiors of graphical shapes such as rectangles, ellipses, pies, polygons, and paths.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.Range">
            <summary>
            Represents an pair of two points that defines a scope in a two-dimensional plane.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Range.#ctor">
            <summary>
            Initializes a new instance of the <c>Range</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Range.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of the <c>Range</c> class with specified parameters.
            </summary>
            <param name="startPoint">Start of <c>Range</c> area.</param>
            <param name="endPoint">End of <c>Range</c> area.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Range.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>Range</c> class with specified parameters.
            </summary>
            <param name="x1">X-coordinate of the start of <c>Range</c> area.</param>
            <param name="y1">Y-coordinate of the start of <c>Range</c> area.</param>
            <param name="x2">X-coordinate of the end of <c>Range</c> area.</param>
            <param name="y2">Y-coordinate of the end of <c>Range</c> area.</param>
        </member>
        <member name="P:Stimulsoft.Editor.Range.StartPoint">
            <summary>
            Gets or sets begin of <c>IRange</c> area.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Range.EndPoint">
            <summary>
            Gets or sets end of <c>IRange</c> area.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Range.Size">
            <summary>
            Gets or sets size of <c>IRange</c> area.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Range.IsEmpty">
            <summary>
            Gets boolea value indicating whether <c>IRange</c> has zero size.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.SortList">
            <summary>
            Represents sorted list of objects.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Stimulsoft.Editor.SortList.CompareIndex" -->
        <member name="M:Stimulsoft.Editor.SortList.FindExact(System.Object,System.Int32@,System.Collections.IComparer)">
            <summary>
            Finds the given object in the sorted list with assumption that sorted list do not have any duplicates.
            </summary>
            <param name="obj">Object to find.</param>
            <param name="index">Receive index of the found object in the sorted list.</param>
            <param name="comparer">Object that exposes a method to compare two objects.</param>
            <returns>True if the find succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SortList.FindFirst(System.Object,System.Int32@,System.Collections.IComparer)">
            <summary>
            Finds the first occurence of the given object that satisfies searching criteria.
            </summary>
            <param name="obj">Object to find.</param>
            <param name="index">Receive index of the found object in the sorted list.</param>
            <param name="comparer">Object that exposes a method to compare two objects.</param>
            <returns>True if the find succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SortList.FindLast(System.Object,System.Int32@,System.Collections.IComparer)">
            <summary>
            Finds the last occurence of the given object that satisfies searching criteria.
            </summary>
            <param name="obj">Object to find.</param>
            <param name="index">Receive index of the found object in the sorted list.</param>
            <param name="comparer">Object that exposes a method to compare two objects.</param>
            <returns>True if the find succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SortList.UpdatePos(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Point@,System.Boolean)">
            <summary>
            Updates specified position by DeltaX and DeltaY values.
            </summary>
            <param name="x">Index of current character in the text.</param>
            <param name="y">index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <param name="pt">Position to update.</param>
            <param name="endPos">Specifies whether position represents end of range</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SortList.UpdatePos(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Updates specified position by DeltaX and DeltaY values.
            </summary>
            <param name="x">Index of current character in the text.</param>
            <param name="y">index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <param name="ch">Horizontal constituent of the position to update.</param>
            <param name="ln">Vertical constituent of the position to update.</param>
            <param name="endPos">Specifies whether position represents end of range</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SortList.InsideBlock(System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>
            Indicates whether specified rectangle contains given position.
            </summary>
            <param name="pt">Position to check-up.</param>
            <param name="rect">Rectangular area to check-up.</param>
            <returns>True if specified rect contains given Point; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SortList.InsideBlock(System.Drawing.Point,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Indicates whether specified rectangle contains given position.
            </summary>
            <param name="pt">Position to check-up.</param>
            <param name="rect">Rectangular area to check-up.</param>
            <param name="checkMaxInt">Indicates that rectangle may contain Max Integer coordinates</param> 
            <returns>True if specified rect contains given Point; otherwise false.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.RangeList">
            <summary>
            Represents sorted list of ranges.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.RangeList.#ctor">
            <summary>
            Initializes a new instance of the <c>RangeList</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.RangeList.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            Removes all ranges from specified region.
            </summary>
            <param name="rect">Specifies rectangle to remove ranges from.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.RangeList.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates specified position by DeltaX and DeltaY values for any ranges in the collection.
            </summary>
            <param name="x">Index of current character in the text.</param>
            <param name="y">index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.RangeList.Clear">
            <summary>
            Removes all ranges from <c>RangeList</c>.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.RangeList.CopyFrom(System.Collections.IList)">
            <summary>
            Copies specified ranges to this <c>RangeList</c>.
            </summary>
            <param name="ranges">Source collection of ranges to copy from.</param>
        </member>
        <member name="M:Stimulsoft.Editor.RangeList.RemoveAt(System.Int32)">
            <summary>
            Removes the range at the specified index of the <c>RangeList</c>.
            </summary>
            <param name="index">The zero-based index of the range to remove.</param>
        </member>
        <member name="M:Stimulsoft.Editor.RangeList.Add(System.Object)">
            <summary>
            Adds an object to the end of the range list.
            </summary>
            <param name="value">The range to be added to the end of range list.</param>
            <returns>Index of object that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.RangeList.FindRange(System.Drawing.Point)">
            <summary>
            Locates range at specified position.
            </summary>
            <param name="point">Position to locate range.</param>
            <returns><c>IRange</c> at the specified position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.RangeList.FindInclusiveRange(System.Int32)">
            <summary>
            Locates range containing specific line
            </summary>
            <param name="index">Position to locate range.</param>
            <returns><c>IRange</c> containing given line</returns>
        </member>
        <member name="M:Stimulsoft.Editor.RangeList.FindRange(System.Int32)">
            <summary>
            Locates range at specified line.
            </summary>
            <param name="index">Index of line to locate range.</param>
            <returns><c>IRange</c> at specified line.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.RangeList.FindExactRange(System.Drawing.Point)">
            <summary>
            Locates range at specified position and verifies whether it starts at the given position.
            </summary>
            <param name="point">Position to locate range.</param>
            <returns><c>IRange</c> if it starts at specified position; otherwise null.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.RangeList.FindExactRange(System.Int32)">
            <summary>
            Locates range at specified line and verifies whether it starts at the given line.
            </summary>
            <param name="index">Index of line to locate range.</param>
            <returns><c>IRange</c> if it starts at specified line; otherwise null.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.RangeList.RemoveRange(System.Drawing.Point)">
            <summary>
            Removes all ranges containing specified position.
            </summary>
            <param name="point">Position to remove ranges.</param>
        </member>
        <member name="M:Stimulsoft.Editor.RangeList.RemoveRange(System.Int32)">
            <summary>
            Removes all containing specified line.
            </summary>
            <param name="index">Index of line to remove ranges.</param>
        </member>
        <member name="M:Stimulsoft.Editor.RangeList.GetRanges(System.Collections.IList)">
            <summary>
            Fills list specified by Ranges parameter with all existing ranges.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.RangeList.GetRanges">
            <summary>
            Returns ranges collection in the from of IList.
            </summary>
            <returns>IList representation of ranges collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.RangeList.GetRanges(System.Collections.IList,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Fills list specified by Ranges parameter with all ranges within specified range.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="startpoint">Specifies start position in text coordinates.</param>
            <param name="endpoint">Specifies end position in text coordinates.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.RangeList.GetRanges(System.Collections.IList,System.Drawing.Point)">
            <summary>
            Fills list specified by Ranges parameter with all ranges containing specific position.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="point">Specifies position in text coordinates.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.RangeList.GetExactRanges(System.Collections.IList,System.Int32)">
            <summary>
            Fills list specified by Ranges parameter with all ranges that starts at the specified line.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="index">Specifies index of line.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.RangeList.GetRanges(System.Collections.IList,System.Int32)">
            <summary>
             Fills list specified by Ranges parameter with all ranges in specified line.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="index">Specifies index of line.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.RangeList.Insert(System.Int32,System.Object)">
            <summary>
            Inserts a range into the range list at the specified index.
            </summary>
            <param name="index">The zero-based index at which range should be inserted.</param>
            <param name="value">Specifies range to insert.</param>
        </member>
        <member name="M:Stimulsoft.Editor.RangeList.BeginUpdate">
            <summary>
            Prevents range list updating until calling <c>EndUpdate</c> method.
            </summary>
            <returns>Number of range list updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.RangeList.EndUpdate(System.Boolean)">
            <summary>
            Re-enables range list updating, that was turn of by calling <c>BeginUpdate</c> method.
            </summary>
            <param name="update">If true, forces list updating</param>
            <returns>Number of range list updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.RangeList.EndUpdate">
            <summary>
            Re-enables range list updating, that was turn of by calling <c>BeginUpdate</c> method.
            </summary>
            <returns>Number of range list updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.RangeList.Update">
            <summary>
            Updates <c>RangeList</c> content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.RangeList.Sort">
            <summary>
            Sorts <c>RangeList</c> content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.RangeList.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.SpeedButton">
            <summary>
            Represents a Windows button - like control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SpeedButton.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <c>SpeedButton</c> class with specified container.
            </summary>
            <param name="container">Specifies IContainer that contains this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SpeedButton.#ctor">
            <summary>
            Initializes a new instance of the <c>SpeedButton</c> class with default settings.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SpeedButton.ImageList">
            <summary>
            Gets or sets the ImageList that contains the images to display in this <c>SpeedButton</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SpeedButton.ImageIndex">
            <summary>
            Gets or sets the index value of the image displayed on this <c>SpeedButton</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SpeedButton.BorderStyle">
            <summary>
            Gets or sets border style of this <c>SpeedButton</c>.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.HookHandler">
            <summary>
            Represents a method that will handle application-defined or library-defined callback function the system calls.
            </summary>
            <param name="ncode">Hook code.</param>
            <param name="wparam">Message identifier or current-process flag.</param>
            <param name="lparam">Address of structure with message data.</param>
        </member>
        <member name="T:Stimulsoft.Editor.EnumChildProc">
            <summary>
            Represents a method that will handle application-defined function used with the EnumWindows or EnumDesktopWindows functions.
            </summary>
            <param name="hwnd">Handle to a top-level window.</param>
            <param name="lparam">Specifies the application-defined value given in EnumWindows or EnumDesktopWindows.</param>
        </member>
        <member name="T:Stimulsoft.Editor.OSUtils">
            <summary>
            Represents native Win32 API methods.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.ShowWindowTopMost(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Places the window above all non-topmost windows.
            </summary>
            <param name="hwnd">Handle to the window.</param>
            <param name="x">Specifies the new position of the left side of the window, in client coordinates.</param>
            <param name="y">Specifies the new position of the top of the window, in client coordinates.</param>
            <param name="cx">Specifies the new width of the window, in pixels.</param>
            <param name="cy">Specifies the new height of the window, in pixels.</param>
            <returns>True if success; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.GetScreenCaps">
            <summary>
            Retrieves size in pixels per logical inch of entire screen.
            </summary>
            <returns>Size of entire screen.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.SetScrollBar(System.IntPtr,System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the parameters of a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (thumb).
            </summary>
            <param name="handle">Handle to a scroll bar control or a window with a standard scroll bar.</param>
            <param name="flat">Indicates whether scroll bar is flat.</param>
            <param name="size">Specifies the maximum scrolling position.</param>
            <param name="pageSize">Specifies the page size.</param>
            <param name="isVertical">Indicates whether scroll bar is vertical or horizontal.</param>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.SetScrollPos(System.IntPtr,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Sets the position of the scroll box (thumb) in the specified scroll bar.
            </summary>
            <param name="handle">Handle to a scroll bar control or a window with a standard scroll bar.</param>
            <param name="flat">Indicates whether scroll bar is flat.</param>
            <param name="pos">Specifies the position of the scroll box.</param>
            <param name="isVertical">Indicates whether scroll bar is vertical or horizontal.</param>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.GetScrollPos(System.IntPtr,System.Boolean,System.Boolean)">
            <summary>
            Retrieves the current position of the scroll box (thumb) in the specified scroll bar.
            </summary>
            <param name="handle">Handle to a scroll bar control or a window with a standard scroll bar.</param>
            <param name="flat">Indicates whether scroll bar is flat.</param>
            <param name="isVertical">Indicates whether scroll bar is vertical or horizontal.</param>
            <returns>If the function succeeds, the return value is the current position of the scroll box; otherwise zero.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.GetScrollSize(System.IntPtr,System.Boolean,System.Boolean)">
            <summary>
            Retrieves the page size of the scroll box (thumb) in the specified scroll bar.
            </summary>
            <param name="handle">Handle to a scroll bar control or a window with a standard scroll bar.</param>
            <param name="flat">Indicates whether scroll bar is flat.</param>
            <param name="isVertical">Indicates whether scroll bar is vertical or horizontal.</param>
            <returns>If the function succeeds, the return value is the page size of the scroll box; otherwise zero.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.GetScrollSize(System.Boolean)">
            <summary>
            Retrieves dimension of the arrow bitmap of a scroll bar, in pixels.
            </summary>
            <param name="isVertical">Indicates whether scroll bar is vertical.</param>
            <returns>Dimension of the arrow bitmap.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.GetDoubleClickTime">
            <summary>
            Retrieves retrieves the current double-click time for the mouse.
            </summary>
            <returns>returns the current double-click time, in milliseconds.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            The SendMessage function sends the specified message to a window or windows. The function calls the window procedure for the specified window and does not return until the window procedure has processed the message.
            </summary>
            <param name="hwnd">Identifies the window whose window procedure will receive the message.</param>
            <param name="msg">Specifies the message to be sent. </param>
            <param name="wparam">Specifies additional message-specific information. </param>
            <param name="lparam">Specifies additional message-specific information. </param>
            <returns>Result of the message processing and depends on the message sent.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.PostMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Places a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.
            </summary>
            <param name="hwnd">Handle to the window whose window procedure is to receive the message.</param>
            <param name="msg">Specifies the message to be posted.</param>
            <param name="wparam">Specifies additional message-specific information.</param>
            <param name="lparam">Specifies additional message-specific information.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.SetMouseHook(Stimulsoft.Editor.HookHandler)">
            <summary>
            Installs hook procedure that monitors mouse messages into a hook chain.
            </summary>
            <param name="lpfn">Hook procedure.</param>
            <returns>If the function succeeds, the return value is the handle to the hook procedure; otherwise return value is null.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.SetWndProcHook(Stimulsoft.Editor.HookHandler)">
            <summary>
            Installs hook procedure that monitors messages before the system sends them to the destination window procedure into a hook chain.
            </summary>
            <param name="lpfn">Hook procedure.</param>
            <returns>If the function succeeds, the return value is the handle to the hook procedure; otherwise return value is null.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.ReleaseHook(System.IntPtr)">
            <summary>
            Removes a hook procedure installed in a hook chain.
            </summary>
            <param name="hhk">Handle to the hook to be removed.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.CallNextHook(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Passes the hook information to the next hook procedure in the current hook chain. A hook procedure can call this function either before or after processing the hook information.
            </summary>
            <param name="hhk">Handle to the current hook.</param>
            <param name="nCode">Hook code passed to the current hook procedure.</param>
            <param name="wparam">Specifies the wparam value passed to the current hook procedure.</param>
            <param name="lparam">Specifies the lparam value passed to the current hook procedure.</param>
            <returns>This value is returned by the next hook procedure in the chain.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.GetMouseHookHandle(System.IntPtr,System.Drawing.Point@)">
            <summary>
            Get structure associated with mouse hook.
            </summary>
            <param name="lparam">mouse hook data</param>
            <param name="pt">mouse point</param>
            <returns>window handle sending mouse message</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.EnumChildWindows(System.IntPtr,Stimulsoft.Editor.EnumChildProc,System.IntPtr)">
            <summary>
            The EnumChildWindows function enumerates the child windows that belong to the specified parent window by passing the handle of each child window, in turn, to an application-defined callback function. EnumChildWindows continues until the last child window is enumerated or the callback function returns false.
            </summary>
            <param name="hwndParent">Identifies the parent window whose child windows are to be enumerated.</param>
            <param name="lpEnumFunc">Points to an application-defined callback function.</param>
            <param name="lparam">Specifies a 32-bit, application-defined value to be passed to the callback function.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.IsMouseMsg(System.Int32)">
            <summary>
            Indicates whether specified message is mouse message.
            </summary>
            <param name="msg">Message to check-up.</param>
            <returns>True if it is mouse message; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.GetText(System.IntPtr)">
            <summary>
            Retrieves text that corresponds to a window.
            </summary>
            <param name="hwnd">Handle of window.</param>
            <returns>Text that corresponds to a window.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.SetText(System.IntPtr,System.String)">
            <summary>
            Sets the text of a window.
            </summary>
            <param name="hwnd">Handle of the window.</param>
            <param name="text">New text of the window.</param>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.GetClassName(System.IntPtr)">
            <summary>
            The GetClassName function retrieves the name of the class to which the specified window belongs.
            </summary>
            <param name="hwnd">Identifies the window and, indirectly, the class to which the window belongs.</param>
            <returns>Name of the class.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.GetWindowDC(System.IntPtr)">
            <summary>
            Retrieves the device context (DC) for the entire window.
            </summary>
            <param name="hwnd">Handle to the window with a device context that is to be retrieved.</param>
            <returns>If the function succeeds, the return value is a handle to a device context for the specified window; otherwise return value is null.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            Releases a device context (DC), freeing it for use by other applications.
            </summary>
            <param name="hwnd">Handle to the window whose DC is to be released.</param>
            <param name="hdc">Handle to the DC to be released.</param>
            <returns>The return value indicates whether the DC was released. If the DC was released, the return value is 1; otherwise the return value is zero.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.CreateCaret(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Creates a new shape for the system caret and assigns ownership of the caret to the specified window.
            </summary>
            <param name="handle">Handle to the window that owns the caret.</param>
            <param name="nWidth">Specifies the width of the caret in logical units.</param>
            <param name="nHeight">Specifies the height of the caret in logical units.</param>
            <returns>If the function succeeds, the return value is nonzero; otherwise zero.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.ShowCaret(System.IntPtr)">
            <summary>
            Makes the caret visible on the screen at the caret's current position.
            </summary>
            <param name="handle">Handle to the window that owns the caret.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.DestroyCaret">
            <summary>
            Destroys the caret's current shape, frees the caret from the window, and removes the caret from the screen.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.SetCaretPos(System.Int32,System.Int32)">
            <summary>
            Moves the caret to the specified coordinates.
            </summary>
            <param name="x">Specifies the new x-coordinate of the caret.</param>
            <param name="y">Specifies the new y-coordinate of the caret.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.SetCursor(System.IntPtr)">
            <summary>
            The SetCursor function establishes the cursor shape.
            </summary>
            <param name="handle">Identifies the cursor.</param>
            <returns>The handle to the previous cursor if success; otherwise null.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.LoWord(System.IntPtr)">
            <summary>
            Retrieves the low-order word from the specified value.
            </summary>
            <param name="value">Specifies the value to be converted.</param>
            <returns>The return value is the low-order word of the specified value.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.HiWord(System.IntPtr)">
            <summary>
            Retrieves the high-order word from the given value.
            </summary>
            <param name="value">Specifies the value to be converted.</param>
            <returns>The return value is the high-order word of the specified value.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.ScrollWindow(System.IntPtr,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Scrolls the contents of the specified window's client area.
            </summary>
            <param name="handle">Handle to the window where the client area is to be scrolled.</param>
            <param name="x">Specifies the amount of horizontal scrolling.</param>
            <param name="y">Specifies the amount of vertical scrolling.</param>
            <param name="rect">Rectangle that specifies the portion of the client area to be scrolled.</param>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.InitCommonControls">
            <summary>
            Registers and initializes the common control window classes.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.ExcludeClipRect(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The ExcludeClipRect function creates a new clipping region that consists of the existing clipping region minus the specified rectangle.
            </summary>
            <param name="hdc">Identifies the device context. </param>
            <param name="l">Specifies the logical x-coordinate of the upper-left corner of the rectangle.</param>
            <param name="t">Specifies the logical y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="r">Specifies the logical x-coordinate of the lower-right corner of the rectangle.</param>
            <param name="b">Specifies the logical y-coordinate of the lower-right corner of the rectangle.</param>
            <returns>Specifies type of new clipping region.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.GetScrollType(System.Int32)">
            <summary>
            Converts given code to the type of scroll event action.
            </summary>
            <param name="code">Code to convert.</param>
            <returns>ScrollEventType of scroll event action.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.InitializeFlatSB(System.IntPtr)">
            <summary>
            Initializes flat scroll bars for a particular window.
            </summary>
            <param name="handle">Handle to the window that will receive flat scroll bars.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.UninitializeFlatSB(System.IntPtr)">
            <summary>
            Uninitializes flat scroll bars for a particular window.
            </summary>
            <param name="handle">Handle to the window with the flat scroll bars that will be uninitialized.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.MessageBeep">
            <summary>
            Plays default waveform sound.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.OSUtils.Beep(System.Int32,System.Int32)">
            <summary>
            Generates simple tones on the speaker.
            </summary>
            <param name="freq">Frequency of the sound, in hertz.</param>
            <param name="duration">Duration of the sound, in milliseconds.</param>
        </member>
        <member name="T:Stimulsoft.Editor.XPThemeName">
            <summary>
            Represents color theme names.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XPThemeName.None">
            <summary>
            Defines that no color theme is available.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XPThemeName.Blue">
            <summary>
            Defines blue color theme.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XPThemeName.HomeStead">
            <summary>
            Defines HomeStead color theme.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XPThemeName.Metallic">
            <summary>
            Defines metallic color theme.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XPThemeName.Custom">
            <summary>
            Defines custom color theme.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XPThemes">
            <summary>
            This class provides functionality to draw control's background with various visual styles.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XPThemes.#cctor">
            <summary>
            Initializes a new instance of the <c>XPThemes</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XPThemes.GetGroupCaptionColor(System.Boolean)">
            <summary>
            Returns color of the group caption with current color theme.
            </summary>
            <param name="hot">Specifies if the group is hot.</param>
            <returns>The Color structure that specifies color of the group caption.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.XPThemes.GetGroupItemCaptionColor(System.Boolean)">
            <summary>
            Returns color of the group item caption with current color theme.
            </summary>
            <param name="hot">Specifies if the item is hot.</param>
            <returns>The Color structure that specifies color of the group item caption.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.XPThemes.DrawHeaderButton(Stimulsoft.Editor.IPainter,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            Draws the header button within the specified rectangle using specified image.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="rect">The Rectangle that represents the dimensions of the header button.</param>
            <param name="collapse">Specifies whether the collapsed button should be drawn.</param>
            <param name="hot">Specifies whether the hot button should be drawn.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XPThemes.DrawHeaderBackground(Stimulsoft.Editor.IPainter,System.Drawing.Rectangle)">
            <summary>
            Draws the header background within the specified rectangle with current theme.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="rect">The Rectangle that represents the dimensions of the header.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XPThemes.DrawGroupBackground(Stimulsoft.Editor.IPainter,System.Drawing.Rectangle)">
            <summary>
            Draws the group background within the specified rectangle with current theme.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="rect">The Rectangle that represents the dimensions of the group.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XPThemes.DrawBackground(Stimulsoft.Editor.IPainter,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draws the control background within the specified rectangle with current theme.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="rect">The Rectangle that represents the dimensions of the control.</param>
            <param name="startColor">Specifies start background color for gradient background painting when no theme is available.</param>
            <param name="endColor">Specifies end background color for gradient background painting when no theme is available.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XPThemes.DrawRect(System.Drawing.Rectangle)">
            <summary>
            Returns the rectangle object displaced relatively specified rectangle object by <c>Offset</c> value.
            </summary>
            <param name="sourceRect">The source Rectangle object.</param>
            <returns>Offset rectangle.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.XPThemes.Offset">
            <summary>
            Sets the value that specifies two-dimensional shift matrix.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XPThemes.DoneTheme">
            <summary>
            Destroys current theme before initialization new theme.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XPThemes.InitTheme">
            <summary>
            Initializes a new theme.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XPThemes.DrawEditBorder(Stimulsoft.Editor.IPainter,System.Drawing.Rectangle)">
            <summary>
            Draws border of edit control within the specified rectangle with current theme.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="rect">The Rectangle that represents the dimensions of the control.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XPThemes.DrawEditBorder(System.IntPtr,System.Drawing.Rectangle)">
            <summary>
            Draws border of edit control within the specified rectangle with current theme.
            </summary>
            <param name="dc">Handle to a device context used for drawing the theme-defined background image.</param>
            <param name="rect">The Rectangle that represents the dimensions of the control.</param>
        </member>
        <member name="P:Stimulsoft.Editor.XPThemes.CurrentTheme">
            <summary>
            Represents name of current color theme.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.DlgFlagEnumeration">
            <summary>
            Represents a dialog box used to edit enumeration object with flag attribute at design time.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DlgFlagEnumeration.#ctor">
            <summary>
            Initializes a new instance of the <c>DlgFlagEnumeration</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DlgFlagEnumeration.#ctor(Stimulsoft.Editor.FlagEnumerationEditor)">
            <summary>
            Initializes a new instance of the <c>DlgFlagEnumeration</c> class with specified parameters.
            </summary>
            <param name="editor">Specifies <c>FlagEnumerationEditor</c> to edit enumeration objects.</param>
        </member>
        <member name="P:Stimulsoft.Editor.DlgFlagEnumeration.EditValue">
            <summary>
            Gets or sets an object to edit.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.DlgFlagEnumeration.ListBox">
            <summary>
            Represents checked listbox control displayed for <c>EditValue</c> object while editing.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.DlgSyntaxBuilder">
            <summary>
            Represents a dialog box used to edit lexical scheme in design time.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DlgSyntaxBuilder.#ctor">
            <summary>
            Initializes a new instance of the <c>DlgSyntaxBuilder</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DlgSyntaxBuilder.#ctor(Stimulsoft.Editor.SyntaxBuilderEditor)">
            <summary>
            Initializes a new instance of the <c>DlgSyntaxBuilder</c> class with specified parameters.
            </summary>
            <param name="editor">Editor owning the dialog box</param>
        </member>
        <member name="P:Stimulsoft.Editor.DlgSyntaxBuilder.Scheme">
            <summary>
            Represents lexer scheme being edited
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.FlagEnumerationEditor">
            <summary>
            Provides a user interface to edit enumeration objects with flag attributes in design time.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.FlagEnumerationEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value of the specified object using the editor style indicated by <c>GetEditStyle</c>.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <param name="provider">An IServiceProvider that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>The new value of the object.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.FlagEnumerationEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <c>EditValue</c> method.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <returns>A UITypeEditorEditStyle value that indicates the style of editor used by <c>EditValue</c>.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.FlagEnumerationEditor.Service">
            <summary>
            Represetns object that is used to display a control in a drop down area from a property grid control in design mode.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.LineStyleConverter">
            <summary>
            Provides a type converter to convert <c>LineStyle</c> objects to and from various other representations.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="destinationType">A Type that represents the type you want to convert to.</param>
            <returns>True if this converter can perform the conversion; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo object. If a null reference, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.ScrollingButtonConverter">
            <summary>
            Provides a type converter to convert <c>ScrollingButton</c> objects to and from various other representations.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ScrollingButtonConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="destinationType">A Type that represents the type you want to convert to.</param>
            <returns>True if this converter can perform the conversion; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ScrollingButtonConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo object. If a null reference, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.SyntaxBuilderConsts">
            <summary>
            Contains default constants related to Syntax Builder editor
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.SyntaxBuilderEditor">
            <summary>
            Provides a user interface to edit lexer scheme in design time.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxBuilderEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the scheme editor.
            </summary>
            <param name="context">An <c>ITypeDescriptorContext</c> that can be used to gain additional context information.</param>
            <param name="provider">An <c>IServiceProvider</c> that this editor can use to obtain services. </param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxBuilderEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the EditValue method.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information. </param>
            <returns>UITypeEditorEditStyle.Modal if context instance is assgined</returns>
        </member>
        <member name="T:Stimulsoft.Editor.ISearchDialog">
            <summary>
            Represents a dialog box that allows user to search for the text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISearchDialog.Execute(Stimulsoft.Editor.ISearch,System.Boolean,System.Boolean)">
            <summary>
            When implemented by a class, initializes and runs a search dialog box.
            </summary>
            <param name="search">Specifies <c>ISearch</c> interface owning the dialog.</param>
            <param name="isModal">Indicates whether search dialog should appear in modal state.</param>
            <param name="isReplace">Indicates whether search or replace dialog should be executed.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISearchDialog.DoneSearch(Stimulsoft.Editor.ISearch)">
            <summary>
            When implemented by a class, finishes search.
            </summary>
            <param name="search">Specifies <c>ISearch</c> to finish.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISearchDialog.EnsureVisible(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, ensures that the search dialog box is visible in specified rectangle, moving it if necessary.
            </summary>
            <param name="rect">The Rectangle to check.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISearchDialog.ToggleHiddenText">
            <summary>
            When implemented by a class, toggles searching through hidden text on/off.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISearchDialog.ToggleMatchCase">
            <summary>
            When implemented by a class, toggles case sensitive searching on/off.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISearchDialog.ToggleRegularExpressions">
            <summary>
            When implemented by a class, toggles using regular expressions on/off.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISearchDialog.ToggleSearchUp">
            <summary>
            When implemented by a class, toggles searching direction towards/backwards.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISearchDialog.ToggleWholeWord">
            <summary>
            When implemented by a class, toggles searching for whole words on/off.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISearchDialog.Close">
            <summary>
            When implemented by a class, closes the dialog.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISearchDialog.Visible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether dialog box is visible.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISearchDialog.OwnerForm">
            <summary>
            When implemented by a class, gets or sets form that owns this dialog.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISearchDialog.SearchSettings">
            <summary>
            When implemented by a class, gets search settings associated with search dialog.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IGotoLineDialog">
            <summary>
            Represents dialog box that allows moving to a specific line index within Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IGotoLineDialog.Execute(System.Object,System.Int32,System.Int32@)">
            <summary>
            When implemented by a class, displays a goto dialog.
            </summary>
            <param name="sender">Specifies object owning the dialog.</param>
            <param name="lines">Number of lines in the control's text content.</param>
            <param name="line">Index of the current line. When dialog executes receives index of the new line.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.IPrintOptionsDialog">
            <summary>
            Represents properties and methods to manipulate print settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IPrintOptionsDialog.ShowDialog">
            <summary>
            When implemented by a class, runs a print options dialog box.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IPrintOptionsDialog.ResetOptions">
            <summary>
            When implemented by a class, resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IPrintOptionsDialog.ResetAllowedOptions">
            <summary>
            When implemented by a class, resets the <c>AllowedOptions</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPrintOptionsDialog.Options">
            <summary>
            When implemented by a class, gets or sets a collection of flags determining print behavior.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPrintOptionsDialog.AllowedOptions">
            <summary>
            When implemented by a class, gets or sets print options that can be changed by user.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPrintOptionsDialog.FileName">
            <summary>
            When implemented by a class, gets or sets name of file to be printed.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IPersistentSettings">
            <summary>
            Represents methods to save/restore key properties of some object.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IPersistentSettings.Assign(Stimulsoft.Editor.IPersistentSettings)">
            <summary>
            When implemented by a class, copies the content from another <c>IPersistentSettings</c> object.
            </summary>
            <param name="source">Specifies <c>IPersistentSettings</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPersistentSettings.SaveFile(System.String)">
            <summary>
            When implemented by a class, saves <c>IPersistentSettings</c> content to the specified file.
            </summary>
            <param name="fileName">Name of file to save content.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPersistentSettings.SaveStream(System.IO.TextWriter)">
            <summary>
            When implemented by a class, saves <c>IPersistentSettings</c> content to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write content.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPersistentSettings.LoadFile(System.String)">
            <summary>
            When implemented by a class, loads <c>IPersistentSettings</c> content from the specified file.
            </summary>
            <param name="fileName">Name of file to load content.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPersistentSettings.LoadStream(System.IO.TextReader)">
            <summary>
            When implemented by a class, loads <c>IPersistentSettings</c> content from the specified stream.
            </summary>
            <param name="reader">The TextReader object to read content.</param>
        </member>
        <member name="T:Stimulsoft.Editor.ISyntaxSettings">
            <summary>
            Represents methods to save/restore key properties for Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxSettings.LoadFromEdit(Stimulsoft.Editor.SyntaxEdit)">
            <summary>
            When implemented by a class, changes values stored in the <c>ISyntaxSettings</c> accordingly to property values of <c>SyntaxEdit</c> control.
            </summary>
            <param name="edit">Specifies <c>SyntaxEdit</c> to copy properties from.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxSettings.ApplyToEdit(Stimulsoft.Editor.SyntaxEdit)">
            <summary>
            When implemented by a class, assigns key properties of given <c>SyntaxEdit</c> according to values strored in the <c>ISyntaxSettings</c> instance.
            </summary>
            <param name="edit">Specifies <c>SyntaxEdit</c> to assign settings.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxSettings.IsDescriptionEnabled(System.Int32)">
            <summary>
            When implemented by a class, indicates whether description for specified lexical style is enabled.
            </summary>
            <param name="index">Specifies index of lexical style to check-up.</param>
            <returns>True if description is enabled; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxSettings.IsFontStyleEnabled(System.Int32)">
            <summary>
            When implemented by a class, indicates whether font style for specified lexical style is enabled.
            </summary>
            <param name="index">Specifies index of lexical style to check-up.</param>
            <returns>True if font style is enabled; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxSettings.IsBackColorEnabled(System.Int32)">
            <summary>
            When implemented by a class, indicates whether background color for specified lexical style is enabled.
            </summary>
            <param name="index">Specifies index of lexical style to check-up.</param>
            <returns>True if background color is enabled; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxSettings.Localize">
            <summary>
            When implemented by a class, initializes lexical styles according with current culture.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxSettings.LexStyles">
            <summary>
            When implemented by a class, gets or sets collection of lexical styles for the <c>Lexer</c> components.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxSettings.ColorThemes">
            <summary>
            When implemented by a class, gets or sets a ColorThemes object.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxSettings.Font">
            <summary>
            When implemented by a class, gets or sets Font object for the <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxSettings.NavigateOptions">
            <summary>
            When implemented by a class, gets or sets options for navigating within <c>SyntaxEdit</c> controls content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxSettings.ScrollBars">
            <summary>
            When implemented by a class, gets or sets the type of scroll bars to display in the <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxSettings.SelectionOptions">
            <summary>
            When implemented by a class, gets or sets options determining appearance and behavior of the <c>Selection</c> object in <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxSettings.GutterOptions">
            <summary>
            When implemented by a class, gets or sets a gutter options that determines <c>Gutter</c> appearance and behavior for <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxSettings.SeparatorOptions">
            <summary>
            When implemented by a class, gets or sets line separator options for SyntaxEdit controls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxSettings.OutlineOptions">
            <summary>
            When implemented by a class, gets or sets outlining options for <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxSettings.ShowMargin">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the <c>Margin</c> is visible in <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxSettings.ShowGutter">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the <c>Gutter</c> is visible in <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxSettings.HighlightUrls">
            <summary>
            When implemented by a class, gets or sets a value indicating whether urls in the <c>SyntaxEdit</c> controls text should be highlighted.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxSettings.AllowOutlining">
            <summary>
            When implemented by a class, gets or sets a value indicating whether outlining is enabled for <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxSettings.UseSpaces">
            <summary>
            When implemented by a class, gets or sets a value indicating whether indent operations insert space characters rather than TAB characters in <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxSettings.WordWrap">
            <summary>
            When implemented by a class, gets or sets a value indicating whether <c>SyntaxEdit</c> controls automatically wrap words to the beginning of the next line when necessary.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxSettings.WhiteSpaceVisible">
            <summary>
            When implemented by a class, gets a sets a value indicating whether white space is visible.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxSettings.GutterWidth">
            <summary>
            When implemented by a class, gets or sets the width of the <c>Gutter</c> for <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxSettings.MarginPos">
            <summary>
            When implemented by a class, gets or sets value indicating position, in characters, of the vertical line within the text portion of the <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxSettings.TabStops">
            <summary>
            When implemented by a class, gets or sets the character columns that the cursor will move to each time you press Tab in <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxSettings.EventNames">
            <summary>
            When implemented by a class, represents names of all available event handlers.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxSettings.EventData">
            <summary>
            When implemented by a class, represents array of event handlers associated with keys
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.DlgGoto">
            <summary>
            Represents dialog box that allows moving to a specific line index within Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DlgGoto.#ctor">
            <summary>
            Initializes a new instance of the <c>DlgGoto</c> class with default settings.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.DlgGoto.Line">
            <summary>
            Gets or sets index of the current line. When dialog executes receives index of the new line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.DlgGoto.Lines">
            <summary>
            Sets number of lines in the control's text content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DlgGoto.Execute(System.Object,System.Int32,System.Int32@)">
            <summary>
            Displays a goto dialog.
            </summary>
            <param name="sender">Specifies object owning the dialog.</param>
            <param name="lines">Number of lines in the control's text content.</param>
            <param name="line">Index of the current line. When dialog executes receives index of the new line.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.DlgPrintOptions">
            <summary>
            Represents dialog box to manipulate print settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DlgPrintOptions.#ctor">
            <summary>
            Initializes a new instance of the <c>DlgPrintOptions</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DlgPrintOptions.ResetOptions">
            <summary>
            Resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DlgPrintOptions.ResetAllowedOptions">
            <summary>
            Resets the <c>AllowedOptions</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.DlgPrintOptions.Options">
            <summary>
            Gets or sets a collection of flags determining print behavior.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.DlgPrintOptions.AllowedOptions">
            <summary>
            Gets or sets print options that can be changed by user.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.DlgPrintOptions.FileName">
            <summary>
            Gets or sets name of file to be printed.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.DlgSearch">
            <summary>
            Represents a windows form used to provide seacrh and replace dialog.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DlgSearch.#ctor">
            <summary>
            Initializes a new instance of the <c>DlgSearch</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DlgSearch.Init">
            <summary>
            Resets <c>DlgSeacrh</c> to the start of search.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.DlgSearch.Search">
            <summary>
            Gets or sets <c>ISearch</c> interface owning the dialog.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.DlgSearch.Options">
            <summary>
            Gets or sets options that defines search and replace behavior.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.DlgSearch.IsReplace">
            <summary>
            Gets or sets a boolean value that indicates whether search or replace dialog should be executed.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.DlgSearch.ClearBookmarks">
            <summary>
            Indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.SearchDialog">
            <summary>
            Represents a dialog box that allows user to search for the text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SearchDialog.Execute(Stimulsoft.Editor.ISearch,System.Boolean,System.Boolean)">
            <summary>
            Initializes and runs a search dialog box.
            </summary>
            <param name="search">Specifies <c>ISearch</c> interface owning the dialog.</param>
            <param name="isModal">Indicates whether search dialog should appear in modal state.</param>
            <param name="isReplace">Indicates whether search or replace dialog should be executed.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SearchDialog.DoneSearch(Stimulsoft.Editor.ISearch)">
            <summary>
            Finishes search.
            </summary>
            <param name="search">Specifies <c>ISearch</c> to finish.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SearchDialog.Close">
            <summary>
            Closes the dialog
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SearchDialog.EnsureVisible(System.Drawing.Rectangle)">
            <summary>
            Ensures that the search dialog box is visible in specified rectangle, moving it if necessary.
            </summary>
            <param name="rect">The Rectangle to check.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SearchDialog.ToggleHiddenText">
            <summary>
            Toggles searching through hidden text on/off.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SearchDialog.ToggleMatchCase">
            <summary>
            Toggles case sensitive searching on/off.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SearchDialog.ToggleRegularExpressions">
            <summary>
            Toggles using regular expressions on/off.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SearchDialog.EnableRegularExpressions(System.Boolean)">
            <summary>
            When implemented by a class, enables/disables regular expressions.
            </summary>
            <param name="enable">Specifies whether regular expressions checkbox should b enabled</param>
        </member>
        <member name="M:Stimulsoft.Editor.SearchDialog.ShowRegularExpressions(System.Boolean)">
            <summary>
            When implemented by a class, shows/hide regular expressions.
            </summary>
            <param name="enable">Specifies whether regular expressions checkbox should b visible</param>
        </member>
        <member name="M:Stimulsoft.Editor.SearchDialog.ToggleSearchUp">
            <summary>
            Toggles searching direction towards/backwards.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SearchDialog.TogglePromptOnReplace">
            <summary>
            Toggles prompting before replacing on/off.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SearchDialog.ToggleWholeWord">
            <summary>
            Toggles searching for whole words on/off.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SearchDialog.Visible">
            <summary>
            Gets or sets a value indicating whether dialog box is visible.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SearchDialog.OwnerForm">
            <summary>
            Gets or sets form that owns this dialog.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SearchDialog.SearchSettings">
            <summary>
            When implemented by a class, gets search settings associated with search dialog.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.DlgSyntaxSettings">
            <summary>
            Represents dialog box used to save/restore key properties for Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DlgSyntaxSettings.#ctor">
            <summary>
            Initializes a new instance of the <c>DlgSyntaxSettings</c> class with default settings.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.DlgSyntaxSettings.SyntaxSettings">
            <summary>
            Gets or sets object that implements <c>ISyntaxSettings</c> for this dialog.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.PersistentSettings">
            <summary>
            Represents a base class for classes designed to save/restore key properties of some object.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.PersistentSettings.Assign(Stimulsoft.Editor.IPersistentSettings)">
            <summary>
            Copies the contents from another <c>IPersistentSettings</c> object.
            </summary>
            <param name="source">Specifies <c>IPersistentSettings</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.PersistentSettings.SaveFile(System.String)">
            <summary>
            Saves <c>IPersistentSettings</c> content to the specified file.
            </summary>
            <param name="fileName">Name of the file to save.</param>
        </member>
        <member name="M:Stimulsoft.Editor.PersistentSettings.SaveStream(System.IO.TextWriter)">
            <summary>
            Saves <c>IPersistentSettings</c> content to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write.</param>
        </member>
        <member name="M:Stimulsoft.Editor.PersistentSettings.LoadFile(System.String)">
            <summary>
            Loads <c>IPersistentSettings</c> content from the specified file.
            </summary>
            <param name="fileName">Name of the file to load.</param>
        </member>
        <member name="M:Stimulsoft.Editor.PersistentSettings.LoadStream(System.IO.TextReader)">
            <summary>
            Loads <c>IPersistentSettings</c> content from the specified stream.
            </summary>
            <param name="reader">The TextReader object to read.</param>
        </member>
        <member name="M:Stimulsoft.Editor.PersistentSettings.GetXmlType">
            <summary>
            Returns Type object for a class that contain control's settings information. In this class method returns null. Descendant classes can override this method.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.PersistentSettings.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>PersistentSettings</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.SyntaxSettings">
            <summary>
            This class is designed to hold settings for <c>SyntaxEdit</c> object, allowing to syncrhonize key-properties for all Edit controls in application.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxSettings.#ctor">
            <summary>
            Initializes a new instance of the <c>SyntaxSettings</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxSettings.FillStyles(Stimulsoft.Editor.LexStyle[]@)">
            <summary>
            Populates a LexStyle[] with the available LexStyle items, such as "idents", "reswords", etc.
            </summary>
            <param name="lexStyles">A null LexStyle[].</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxSettings.InitializeDefaultColorThemes">
            <summary>
            Adds default color themes to the colorThemes instance.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxSettings.Localize">
            <summary>
            Initializes lexical styles according with current culture.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxSettings.IsDescriptionEnabled(System.Int32)">
            <summary>
            Indicates whether description for specified lexical style is enabled.
            </summary>
            <param name="index">Specifies index of lexical style to check-up.</param>
            <returns>True if description is enabled; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxSettings.IsFontStyleEnabled(System.Int32)">
            <summary>
            Indicates whether font style for specified lexical style is enabled.
            </summary>
            <param name="index">Specifies index of lexical style to check-up.</param>
            <returns>True if font style is enabled; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxSettings.IsBackColorEnabled(System.Int32)">
            <summary>
            Indicates whether background color for specified lexical style is enabled.
            </summary>
            <param name="index">Specifies index of lexical style to check-up.</param>
            <returns>True if background color is enabled; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxSettings.LoadFromEdit(Stimulsoft.Editor.SyntaxEdit)">
            <summary>
            Changes values stored in the <c>SyntaxSettings</c> accordingly to values of <c>SyntaxEdit</c> control.
            </summary>
            <param name="edit">Specifies <c>SyntaxEdit</c> to copy properties from.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxSettings.ApplyToEdit(Stimulsoft.Editor.SyntaxEdit)">
            <summary>
            Assigns key properties of given <c>SyntaxEdit</c> according to values strored in the <c>SyntaxSettings</c> instance.
            </summary>
            <param name="edit">Specifies <c>SyntaxEdit</c> to assign settings.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxSettings.Assign(Stimulsoft.Editor.IPersistentSettings)">
            <summary>
            Copies the content from another <c>IPersistentSettings</c> object.
            </summary>
            <param name="source">Specifies <c>IPersistentSettings</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxSettings.GetXmlType">
            <summary>
            Returns Type object for a class that contain control's settings information. In this class method returns type of <c>XmlSyntaxSettingsInfo</c> class.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxSettings.LexStyles">
            <summary>
            Gets or sets collection of lexical styles for the <c>Lexer</c> components.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxSettings.ColorThemes">
            <summary>
            Gets or sets the ColorThemes object.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxSettings.Themes">
            <summary>
            Gets or sets the ColorThemes object.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxSettings.Font">
            <summary>
            Gets or sets Font object for the <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxSettings.NavigateOptions">
            <summary>
            Gets or sets options for navigating within <c>SyntaxEdit</c> controls content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxSettings.ScrollBars">
            <summary>
            Gets or sets the type of scroll bars to display in the <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxSettings.SelectionOptions">
            <summary>
            Gets or sets options determining appearance and behavior of the <c>Selection</c> object in <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxSettings.GutterOptions">
            <summary>
            Gets or sets a gutter options that determines <c>Gutter</c> appearance and behavior for <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxSettings.SeparatorOptions">
            <summary>
            Gets or sets line separator options for SyntaxEdit controls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxSettings.OutlineOptions">
            <summary>
            Gets or sets outlining options for <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxSettings.ShowMargin">
            <summary>
            Gets or sets a value indicating whether the <c>Margin</c> is visible in <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxSettings.ShowGutter">
            <summary>
            Gets or sets a value indicating whether the <c>Gutter</c> is visible in <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxSettings.HighlightUrls">
            <summary>
            Gets or sets a value indicating whether urls in the <c>SyntaxEdit</c> controls text should be highlighted.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxSettings.AllowOutlining">
            <summary>
            Gets or sets a value indicating whether outlining is enabled for <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxSettings.UseSpaces">
            <summary>
            Gets or sets a value indicating whether indent operations insert space characters rather than TAB characters in <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxSettings.WordWrap">
            <summary>
            Gets or sets a value indicating whether <c>SyntaxEdit</c> controls automatically wrap words to the beginning of the next line when necessary.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxSettings.WhiteSpaceVisible">
            <summary>
            Gets or sets a value indicating whether white space is visible.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxSettings.GutterWidth">
            <summary>
            Gets or sets the width of the <c>Gutter</c> for <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxSettings.MarginPos">
            <summary>
            Gets or sets value indicating position, in characters, of the vertical line within the text portion of the <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxSettings.TabStops">
            <summary>
            Gets or sets the character columns that the cursor will move to each time you press Tab in <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxSettings.PageType">
            <summary>
            Gets or sets value specifying the way of viewing <c>SyntaxEdit</c> control's content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxSettings.EventNames">
            <summary>
            Represents names of all available event handlers.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxSettings.EventData">
            <summary>
            Represents array of event handlers associated with keys
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxSettings.KeyList">
            <summary>
            Represents the SyntaxEdit object's KeyList property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxSettings.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>SyntaxSettings</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.SearchSettings">
            <summary>
            This class is designed to hold settings for search and replace dialogs.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SearchSettings.#ctor">
            <summary>
            Initializes a new instance of the <c>SearchSettings</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SearchSettings.Assign(Stimulsoft.Editor.IPersistentSettings)">
            <summary>
            Copies the contents from another <c>IPersistentSettings</c> object.
            </summary>
            <param name="source">Specifies <c>IPersistentSettings</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SearchSettings.GetXmlType">
            <summary>
            Returns Type object for a class that contain information about <c>SearchSettings</c>. In this class method returns type of <c>XmlSearchSettingsInfo</c> class.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SearchSettings.SearchOptions">
            <summary>
            Represents options that determine behavior of search or replace dialog.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SearchSettings.ClearBookmarks">
            <summary>
            Indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SearchSettings.SearchList">
            <summary>
            Represents the search history for the search dialog.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SearchSettings.ReplaceList">
            <summary>
            Represents the replace history for the replace dialog.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SearchSettings.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>SearchSettings</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.BookMark">
            <summary>
            <c>BookMark</c> class is used to store individual bookmark in bookmarks collection of Edit control.
            <seealso cref="!:QWhale.Editor.IBookMark"/>
            </summary>
            <remarks>
            Implements <c>IBookMark</c> interface.
            </remarks>
        </member>
        <member name="M:Stimulsoft.Editor.BookMark.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>BookMark</c> class with specified <c>Pos</c>, <c>Index</c> and <c>Line</c> values.
            </summary>
            <param name="line">Specifies <c>Line</c> property of a new instance.</param>
            <param name="pos">Specifies <c>Pos</c> property of a new instance.</param>
            <param name="index">Specifies <c>Index</c> property of a new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.BookMark.#ctor">
            <summary>
            Initializes a new instance of the <c>BookMark</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.BookMark.Assign(Stimulsoft.Editor.IBookMark)">
            <summary>
            Copies the contents of another bookmark object to the bookmark.
            </summary>
            <param name="source">Specifies bookmark to copy content from. Call <c>Assign</c> to copy <c>Line</c>, <c>Index</c> and <c>Pos</c> property from source bookmark.</param>
        </member>
        <member name="P:Stimulsoft.Editor.BookMark.Line">
            <summary>
            Gets or sets position of the bookmark within the text. 0 corresponds to the first line, 1 to second the line, and so on.
            <seealso cref="!:QWhale.Editor.BookMark.Pos"/>
            <seealso cref="!:QWhale.Editor.BookMark.Index"/>
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.BookMark.Pos">
            <summary>
            Gets or sets position of the bookmark within the text line. 0 corresponds to the first character in a line, 1 to the second character, and so on.
            <seealso cref="!:QWhale.Editor.BookMark.Line"/>
            <seealso cref="!:QWhale.Editor.BookMark.Index"/>
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.BookMark.Index">
            <summary>
            Gets or sets an integer value that specifies ordinal number of the bookmark.
            <seealso cref="!:QWhale.Editor.BookMark.Line"/>
            <seealso cref="!:QWhale.Editor.BookMark.Pos"/>
            </summary>
            <remarks>
            Edit can display bookmarks that that have <c>Index</c> between 0 and 9, or unnumbered bookmarks (with <c>Index</c> equal to Int.MaxValue).
            </remarks>
        </member>
        <member name="P:Stimulsoft.Editor.BookMark.Position">
            <summary>
            Gets position of the bookmark within the text (index of character and line). Corresponds to <c>Pos</c> and <c>Line</c> properties.
            <seealso cref="!:QWhale.Editor.BookMark.Pos"/>
            <seealso cref="!:QWhale.Editor.BookMark.Line"/>
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.BookMarkEx">
            <summary>
            <c>BookMarkEx</c> class is used to store individual bookmark with extended possibilities in bookmarks collection of Edit control.
            <seealso cref="!:QWhale.Editor.IBookMarkEx"/>
            </summary>
            <remarks>Implements <c>IBookMarkEx</c> interface.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarkEx.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>BookMarkEx</c> class with specified <c>Pos</c>, <c>Line</c>, <c>Index</c>, <c>Name</c>, <c>Description</c> and <c>Url</c> values.
            </summary>
            <param name="line">Specifies <c>Line</c> property of a new instance.</param>
            <param name="pos">Specifies <c>Pos</c> property of a new instance.</param>
            <param name="index">Specifies <c>Index</c> property of a new instance.</param>
            <param name="name">Specifies <c>Name</c> property of a new instance.</param>
            <param name="description">Specifies <c>Description</c> property of a new instance.</param>
            <param name="url">Specifies <c>Url</c> property of a new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarkEx.#ctor">
            <summary>
            Initializes a new instance of the <c>BookMark</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarkEx.Assign(Stimulsoft.Editor.IBookMark)">
            <summary>
            Copies the contents of another bookmark object to the bookmark.
            </summary>
            <param name="source">Specifies bookmark to copy content from. <c>Assign</c> copies <c>Line</c>, <c>Index</c> and <c>Pos</c> property from source bookmark (As well as <c>Name</c>, <c>Description</c> and <c>Url</c> if source is <c>IBookMarkEx</c> object).</param>
        </member>
        <member name="P:Stimulsoft.Editor.BookMarkEx.Name">
            <summary>
            Gets or sets name of the bookmark.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.BookMarkEx.Description">
            <summary>
            Gets or sets bookmark description.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.BookMarkEx.Url">
            <summary>
            Gets or sets bookmark url.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.BookMarkList">
            <summary>
            Represents a collection of the <c>Bookmark</c> objects. <c>BookMarkList</c> class is designed to hold and provide indexed access to individual <c>Bookmark</c> objects.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarkList.#ctor">
            <summary>
            Initializes a new instance of the <c>BookMarkList</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarkList.FindByLine(System.Int32)">
            <summary>
            Finds the first bookmark in the specified line and returns its ordinal number within a <c>BookMarkList</c> collection.
            </summary>
            <param name="line">The integer value specifying index of the text line where to locate bookmark.</param>
            <returns>The boormark ordinal number within a <c>BookMarkList</c> collection.</returns>
            <remarks>If the specified line does not contain any bookmark, the method return -1.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarkList.FindByIndex(System.Int32)">
            <summary>
            Finds the bookmark with specified index and returns its ordinal number.
            </summary>
            <param name="index">The integer value specifying <c>Index</c> property of the bookmark.</param>
            <returns>The boormark ordinal number within a <c>BookMarkList</c> collection.</returns>
            <remarks>If the bookmark with specified index is not found, the method returns -1.</remarks>
        </member>
        <member name="P:Stimulsoft.Editor.BookMarkList.Item(System.Int32)">
            <summary>
            Provides indexed access to the bookmarks in the bookmarks collection.
            </summary>
            <param name="index">Specifies index of bookmark within the collection.</param>
        </member>
        <member name="T:Stimulsoft.Editor.BookMarks">
            <summary>
            Represents a collection of the <c>BookMark</c> objects with extended possibilities.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.#ctor(Stimulsoft.Editor.ITextSource)">
            <summary>
            Initializes a new instance of the <c>BookMarks</c> class with specified owner.
            </summary>
            <param name="owner">Class implementing <c>ITextSource</c> interface that owns the collection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.Assign(Stimulsoft.Editor.IBookMarks)">
            <summary>
            Copies the contents of the another <c>BookMarks</c> collection to the bookmark collection.
            </summary>
            <param name="source">Specifies bookmark collection to copy content from. Call <c>Assign</c> to replace contents of one <c>IBookMarks</c> instance to another. The <c>Assign</c> method deletes all items from the destination collection then adds a copy of each item in the source bookmark collection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.GetBookMark(System.Int32)">
            <summary>
            Finds the first bookmark in the <c>BookMarks</c> collection located within the specified text line.
            </summary>
            <param name="line">The integer value that specifies index of the text line where to find bookmark.</param>
            <returns>Bookmark index if the bookmarks was found; otherwise -1.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.GetBookMark(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Finds the first bookmark in the <c>BookMarks</c> collection that locates within the specified range.
            </summary>
            <param name="startPoint">The Point value that specifies start position to find.</param>
            <param name="endPoint">The Point value that specifies end position to to find.</param>
            <returns>Bookmark index if the bookmarks was found; otherwise -1.</returns>
            <remarks>The X-coordinates of the startPoint and endPoint structures represents the position within the text line. The Y-coordinates represents the index of the text line.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.GetBookMarks(System.Drawing.Point,System.Drawing.Point,System.Collections.IList)">
            <summary>
            Finds all bookmarks in the <c>BookMarks</c> collection located within the specified range.
            </summary>
            <param name="startPoint">The Point value that specifies start position to find.</param>
            <param name="endPoint">The Point value that specifies end position to find.</param>
            <param name="list">Represents the collection of the bookmarks located within the specified range.</param>
            <returns>The number of the bookmarks located within the specified range.</returns>
            <remarks>The X-coordinates of the startPoint and endPoint structures represents the position within the text line. The Y-coordinates represents the index of the text line.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.FindBookMark(System.Int32)">
            <summary>
            Locates the bookmark with specified <c>Index</c>.
            </summary>
            <param name="bookMark">The integer value that specifies index of the bookmark to find.</param>
            <returns>IBookmark object if the bookmarks was found; otherwise null.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.FindBookMark(System.String)">
            <summary>
            Locates the bookmark with specified <c>Name</c>.
            </summary>
            <param name="name">The string value that specifies <c>Name</c> of the bookmark to find.</param>
            <returns>IBookmark object if the bookmarks was found; otherwise null.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.SetBookMark(System.Int32,System.Int32)">
            <summary>
            Sets the bookmark with specified index to the position specifed by line parameter.
            </summary>
            <param name="line">The integer value that specifies index of the text line where to set bookmark.</param>
            <param name="bookMark">The integer value that specifies <c>BookMark</c> index.</param>
            <remarks>If the <c>Bookmark</c> with the same index already exists in the collection, the method removes it before inserting new <c>BookMark</c> to the <c>BookMarks</c> collection.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.SetBookMark(System.Drawing.Point,System.Int32)">
            <summary>
            Sets the bookmark with specified index to the position specified by Point parameter.
            </summary>
            <param name="position">Specifies position of the <c>BookMark</c>.</param>
            <param name="bookMark">The integer value that specifies <c>BookMark</c> index.</param>
            <remarks>If the <c>Bookmark</c> with the same index already exists in the collection, the method removes it before inserting new <c>BookMark</c> to the <c>BookMarks</c> collection.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.SetBookMark(System.Drawing.Point,System.Int32,System.String,System.String,System.String)">
            <summary>
            Sets the bookmark with specified index, name, description and url to the position specified by Point parameter.
            </summary>
            <param name="position">Specifies position of the <c>BookMark</c>.</param>
            <param name="bookMark">The integer value that specifies <c>BookMark</c> index.</param>
            <param name="name">The string value that specifies <c>BookMark</c> name.</param>
            <param name="description">The string value that specifies <c>BookMark</c> description.</param>
            <param name="url">The string value that specifies <c>BookMark</c> url.</param>
            <remarks>If the <c>Bookmark</c> with the same index already exists in the collection, the method removes it before inserting new <c>BookMark</c> to the <c>BookMarks</c> collection.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.SetBookMark(Stimulsoft.Editor.IBookMark)">
            <summary>
            Sets the bookmark specified by bookMark parameter.
            </summary>
            <param name="bookMark">Specifies bookmark to set.</param>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.FindBookMark(System.Int32,System.Int32)">
            <summary>
            Locates the bookmark with specified index within the specified line.
            </summary>
            <param name="bookMark">The integer value that specifies <c>Index</c> of the bookmark to find.</param>
            <param name="line">The integer value that specifies index of the text line in where to locate bookmark.</param>
            <returns>The boormark ordinal index within a bookmarks collection if found; otherwize - 1.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.FindBookMark(System.Int32,System.Drawing.Point@)">
            <summary>
            Locates the bookmark with specified <c>Index</c>.
            </summary>
            <param name="bookMark">The integer value that specifies index of the bookmark to find.</param>
            <param name="position">The out Point value to receive <c>Line</c> and <c>Pos</c> properties of the found bookmark.</param>
            <returns>True if the bookmark isfound; otherwise false.</returns>
            <remarks>If the search is not successfull the Point parameter obtain empty value.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.ToggleBookMark(System.Drawing.Point,System.Int32)">
            <summary>
            Sets or removes bookmark with specified index at the specified line.
            </summary>
            <param name="position">The Point value that specifies position of the bookmark (index of char and current line).</param>
            <param name="bookMark">The integer value specifying index of the bookmark to toggle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.ToggleBookMark(System.Int32,System.Int32)">
            <summary>
            Sets or removes bookmark with specified index at the specified line.
            </summary>
            <param name="line">Index of line where to toggle bookmark.</param>
            <param name="bookMark">The integer value that specifies index of the bookmark to toggle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.ToggleBookMark(System.Int32)">
            <summary>
            Sets or removes bookmark with specified index at the current line.
            </summary>
            <param name="bookMark">The integer value that specifies index of the bookmark to toggle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.ToggleBookMark">
            <summary>
            Sets or removes an unnumbered bookmark on the current line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.ToggleBookMark(Stimulsoft.Editor.IBookMark)">
            <summary>
            Sets or removes bookmark specified by bookMark parameter.
            </summary>
            <param name="bookMark">Specifies bookmark to toggle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.ToggleBookMark(System.Drawing.Point,System.Int32,System.String,System.String,System.String)">
            <summary>
            Sets or removes bookmark with specified index at the specified line.
            </summary>
            <param name="position">The Point value that specifies position of the bookmark (index of char and current line).</param>
            <param name="bookMark">The integer value that specifies index of the bookmark to toggle.</param>
            <param name="name">The string value that specifies name of the bookmark to toggle.</param>
            <param name="description">The string value that specifies description of the bookmark to toggle.</param>
            <param name="url">The string value that specifies url of the bookmark to toggle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.ClearBookMark(System.Int32)">
            <summary>
            Finds the bookmark with specified index and removes it from bookmarks collection.
            <seealso cref="!:QWhale.Editor.BookMarks.ClearBookMarkByIndex"/>
            </summary>
            <param name="bookMark">The integer value that specifies bookmark index.</param>
            <remarks>If the bookmark is not found the method does nothing.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.ClearBookMark(System.Int32,System.Int32)">
            <summary>
            Finds the bookmark by given index in a given line and removes its from bookmark collection.
            </summary>
            <param name="line">Index of line in lines collection.</param>
            <param name="bookMark">Index of the bookmark in the bookmark collection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.ClearBookMarkByIndex(System.Int32)">
            <summary>
            Removes the bookmark from bookmarks collection at the specified index. Updates state of the <c>TextSource</c> owning this collection.
            </summary>
            <param name="index">The integer value that specifies the zero-based index of bookmark in a bookmarks collection to remove.</param>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.Clear">
            <summary>
            Removes all bookmarks from the bookmarks collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.ClearBookMarks(System.Int32)">
            <summary>
            Removes all bookmarks from the specified line.
            </summary>
            <param name="line">The integer value that specifies index of the text line.</param>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.ClearAllBookMarks">
            <summary>
            Removes all bookmarks from the bookmarks collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.ClearAllUnnumberedBookmarks">
            <summary>
            Removes all unnumbered bookmarks from the bookmarks collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.NextBookMark">
            <summary>
            Returns the minimal possible value of the bookmark <c>Index</c> property of the new bookmark.
            </summary>
            <returns>Bookmark index.</returns>
            <remarks>If the bookmarks collection is empy method returns 0.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.GotoBookMark(System.Int32)">
            <summary>
            Moves caret to the location of the bookmark in the text source.
            </summary>
            <param name="bookMark">The integer value that specifies bookmark <c>Index</c> property of the bookmark to locate.</param>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.GotoPrevBookMark">
            <summary>
            Moves caret to the location of the previous unnumbered bookmark in the text source.
            </summary>
            <remarks>If the currently selected bookmark is the first bookmark within the bookmarks collection the method moves to the last bookmark.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.BookMarks.GotoNextBookMark">
            <summary>
            Moves to the location of the next unnumbered bookmark in the text source.
            </summary>
            <remarks>If the currently selected bookmark is the last bookmark within the bookmarks collection the method moves to the first bookmark.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.Braces">
            <summary>
            Represents properties and methods for handling matching braces within the Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Braces.#ctor(Stimulsoft.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>Braces</c> class with specified owner.
            </summary>
            <param name="owner">Specifies the class implementing <c>ISyntaxEdit</c> that owns a new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Braces.Assign(Stimulsoft.Editor.IBraceMatchingEx)">
            <summary>
            Copies the contents of another <c>Braces</c> object.
            </summary>
            <param name="source">Specifies <c>IBraceMatchingEx</c> to copy content from.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Braces.ResetBracesOptions">
            <summary>
            Resets the <c>BracesOptions</c> to its default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Braces.ResetClosingBraces">
            <summary>
            Resets the <c>ClosingBraces</c> to its default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Braces.ResetOpenBraces">
            <summary>
            Resets the <c>OpenBraces</c> to its default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Braces.ResetForeColor">
            <summary>
            Resets the <c>ForeColor</c> to its default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Braces.ResetBackColor">
            <summary>
            Resets the <c>BackColor</c> to its default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Braces.ResetUseRoundRect">
            <summary>
            Resets the <c>UseRoundRect</c> to its default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Braces.ResetStyle">
            <summary>
            Resets the <c>Style</c> to its default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Braces.ShouldSerializeForeColor">
            <summary>
            Indicates whether the <c>ForeColor</c> should be persisted.
            </summary>
            <returns>True if <c>ForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Braces.ShouldSerializeBackColor">
            <summary>
            Indicates whether the <c>BackColor</c> should be persisted.
            </summary>
            <returns>True if <c>BackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Braces.ShouldSerializeStyle">
            <summary>
            Indicates whether the <c>Style</c> property should be persisted.
            </summary>
            <returns>True if <c>Style</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Braces.FindClosingBrace(System.Drawing.Point@)">
            <summary>
            Locates matching closing brace.
            </summary>
            <param name="position">Retrieves position of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Braces.FindClosingBrace(System.Int32@,System.Int32@)">
            <summary>
            Locates matching closing brace.
            </summary>
            <param name="x">Retrieves X-coordinate of the found brace.</param>
            <param name="y">Retrieves Y-coordinate of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Braces.FindOpenBrace(System.Drawing.Point@)">
            <summary>
            Locates matching open brace.
            </summary>
            <param name="position">Retrieves position of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Braces.FindOpenBrace(System.Int32@,System.Int32@)">
            <summary>
            Locates matching open brace.
            </summary>
            <param name="x">Retrieves X-coordinate of the found brace.</param>
            <param name="y">Retrieves Y-coordinate of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Braces.TempHighlightBraces(System.Drawing.Rectangle[])">
            <summary>
            Temporary highlights all text within the area specified by rects.
            <seealso cref="!:QWhale.Editor.Braces.TempUnhighlightBraces"/>
            </summary>
            <param name="rects">Specifies the area to highlight text in.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Braces.TempUnhighlightBraces">
            <summary>
            Cancels text highlighting, turned on by TempHighlightBraces method.
            <seealso cref="!:QWhale.Editor.Braces.TempHighlightBraces"/>
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Braces.ShouldSerializeOpenBraces">
            <summary>
            Indicates whether the <c>OpenBraces</c> should be persisted.
            </summary>
            <returns>True if <c>OpenBraces</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Braces.ShouldSerializeClosingBraces">
            <summary>
            Indicates whether the ClosingBraces property should be persisted.
            </summary>
            <returns>True if ClosingBraces differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.Braces.OpenBraces">
            <summary>
            Gets or sets an array of characters each one representing an open brace.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Braces.ClosingBraces">
            <summary>
            Gets or sets an array of characters each one representing a closing brace.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Braces.BracesOptions">
            <summary>
            Gets or sets options specifying appearance and behaviour of matching braces within Edit control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Braces.ForeColor">
            <summary>
            Gets or sets a value that represents foreground color to draw matching braces.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Braces.BackColor">
            <summary>
            Gets or sets a value that represents background color to draw matching braces.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Braces.UseRoundRect">
            <summary>
            Gets or sets a boolean value that indicates whether Edit control should draw rectangle around matching braces.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Braces.Style">
            <summary>
            Gets or sets a FontStyle value that is used to draw matching braces.
            </summary>
            <remarks>The default value of this property is <c>FontStyle.Bold</c>.</remarks>
        </member>
        <member name="P:Stimulsoft.Editor.Braces.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>Braces</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.CompletionListBox">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CompletionListBox.#ctor">
            <summary>
            Initializes a new instance of the <c>CompletionListBox</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CompletionListBox.ResetContent(System.Int32)">
            <summary>
            Updates <c>CompletionListBox</c> content from its Provider.
            </summary>
            <param name="index">The integer value that specifies <c>SelectedIndex</c> property of the <c>CompletionListBox</c>.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CompletionListBox.ResetContent">
            <summary>
            Updates <c>CompletionListBox</c> content from its Provider.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CompletionListBox.GetColumn(System.Int32)">
            <summary>
            Returns a column by specifies index.
            </summary>
            <param name="index">Specifies index of the column to obtain.</param>
            <returns><c>ICodeCompletionColumn</c> object at specified position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CompletionListBox.ClearColumns">
            <summary>
            Removes all columns from the <c>CompletionListBox</c> column collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CompletionListBox.AddColumn">
            <summary>
            Adds a new column to the end of the <c>CompletionListBox</c> column collection.
            </summary>
            <returns><c>ICodeCompletionColumn</c> added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CompletionListBox.InsertColumn(System.Int32)">
            <summary>
            Inserts a new column to the specified position of the <c>CompletionListBox</c> columns collection.
            </summary>
            <param name="index">Position of hte column to insert.</param>
            <returns><c>ICodeCompletionColumn</c> inserted.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CompletionListBox.RemoveColumnAt(System.Int32)">
            <summary>
            Removes column at the specified position from the <c>CompletionListBox</c> column collection.
            </summary>
            <param name="index">Specifies index of the column to remove.</param>
        </member>
        <member name="P:Stimulsoft.Editor.CompletionListBox.Filtered">
            <summary>
            Gets or sets a boolean value that indicates whether <c>CompletionListBox</c> should filter its content using <c>Filer</c> property.
            <seealso cref="!:QWhale.Editor.CompletionListBox.Filter"/>
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CompletionListBox.Filter">
            <summary>
            Gets or sets filter string to filter <c>CompletionListBox</c> content.
            <seealso cref="!:QWhale.Editor.CompletionListBox.Filtered"/>
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CompletionListBox.ColumnCount">
            <summary>
            Returns number of the columns in the listbox.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CompletionListBox.Provider">
            <summary>
            Represents the object that provides data for code completion.
            <seealso cref="!:QWhale.Syntax.ICodeCompletionProvider"/>
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CompletionListBox.ItemWidth">
            <summary>
            Gets width of the widest item.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CompletionListBox.Images">
            <summary>
            Represents an image list associated with this <c>CompletionListBox</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CompletionListBox.NavKeys">
            <summary>
            Represents a key collection used to navigate within the <c>CompletionListBox</c> content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CompletionListBox.UpdateSize">
            <summary>
            Occurs when size of the control is changed.
            </summary>
            <remarks>The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.CompletionEdit">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CompletionEdit.#ctor">
            <summary>
            Initializes a new instance of the <c>CompletionEdit</c> class with default settings.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CompletionEdit.EditBox">
            <summary>
            Represents a text box allowing to edit content of the <c>CompletionEdit</c>control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CompletionEdit.Label">
            <summary>
            Represents a label associated with the edit <c>CompletionEdit</c>control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CompletionEdit.PathLabel">
            <summary>
            Represents a path label associated with the edit <c>CompletionEdit</c>control.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.CompletionHint">
            <summary>
            Represents a tooltip-like control used in a code completion.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CompletionHint.#ctor">
            <summary>
            Initializes a new instance of the <c>CompletionHint</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CompletionHint.ResetContent">
            <summary>
            Updates <c>CompletionHint</c> content from its <c>Provider</c>.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CompletionHint.ChangeSelection(System.Boolean)">
            <summary>
            Increments or decrements<c>SelectedIndex</c> property.
            </summary>
            <param name="inc">Specifies whether <c>SelectedIndex</c> should be incremented.</param>
        </member>
        <member name="P:Stimulsoft.Editor.CompletionHint.Provider">
            <summary>
            Gets or sets an object that contains data related to this <c>CompletionHint</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CompletionHint.SelectedIndex">
            <summary>
            Gets or sets the index specifying the currently selected hint item.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CompletionHint.HintSize">
            <summary>
            Returns a size of the hint control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CompletionHint.UpdateSize">
            <summary>
            Occurs when size of the hint control is changed.
            </summary>
            <remarks>The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.HtmlLexer">
            <summary>
            Represents class used to highlight hint content with bold style.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.HtmlLexer.#ctor">
            <summary>
            Initializes a new instance of the <c>HtmlLexer</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.HtmlLexer.ParseHtmlText(System.Int32,System.Drawing.FontStyle,System.String@,System.Int16[]@)">
            <summary>
            Performs out lexical analysis of given text.
            </summary>
            <param name="state">Specifies start lexical state.</param>
            <param name="style">Specifies default font style</param>
            <param name="s">Text to parse.</param>
            <param name="colorData">Receives color data of the given text.</param>
            <returns>Final lexical state.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.HtmlSyntaxPaint">
            <summary>
            Represents class that performs syntax painting for hint control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.HtmlSyntaxPaint.#ctor(Stimulsoft.Editor.IPainter,System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <c>HtmlSyntaxPaint</c> class with specified graphic surface and owner control.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="control">Specifies control owning the <c>HtmlSyntaxPaint</c>.</param>
        </member>
        <member name="P:Stimulsoft.Editor.HtmlSyntaxPaint.Provider">
            <summary>
            Gets or sets an object that contains data related to this <c>CompletionHint</c>.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.HintSyntaxPaint">
            <summary>
            Represents class that performs syntax painting for hint control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.HintSyntaxPaint.#ctor(Stimulsoft.Editor.IPainter,System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <c>HintSyntaxPaint</c> class with specified graphic surface and owner control.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="control">Specifies control owning the <c>HintSyntaxPaint</c>.</param>
        </member>
        <member name="M:Stimulsoft.Editor.HintSyntaxPaint.DrawLine(System.Int32,System.String,System.Int16[],System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>
            Draws line given by its index at the specified position.
            </summary>
            <param name="index">Index of line to draw.</param>
            <param name="line">Specifies text to draw</param>
            <param name="colorData">Specifies array containing color data for given string</param>
            <param name="position">Position to start drawing.</param>
            <param name="clipRect">Rectangular area of the control to draw line in.</param>
        </member>
        <member name="M:Stimulsoft.Editor.HintSyntaxPaint.PaintSyntax(Stimulsoft.Editor.IPainter,System.Int32,System.Int32,System.Drawing.Point,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Paints a specified part of the hint control.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="startLine">Specifies the first line to paint.</param>
            <param name="endLine">Specifies the last line to paint.</param>
            <param name="position">The Point value that specifies start position to draw lines from.</param>
            <param name="rect">Rectangular area of <c>HintSyntaxPaint</c> to draw.</param>
            <param name="specialPaint">Reserved for internal use.</param>
        </member>
        <member name="P:Stimulsoft.Editor.HintSyntaxPaint.Strings">
            <summary>
            Represents an array of strings displayed in a hint.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.CodeCompletionWindow">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionWindow.#ctor(Stimulsoft.Editor.SyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>CodeCompletionWindow</c> class with specified owner.
            </summary>
            <param name="owner">The <c>SyntaxEdit</c> control owning this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionWindow.Finalize">
            <summary>
            Destroys the instance of the <c>CodeCompletionWindow</c> class.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionWindow.ResetContent">
            <summary>
            Updates <c>CodeCompletionWindow</c> content from its <c>Provider</c>.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionWindow.CloseDelayed(System.Boolean)">
            <summary>
            Closes the popup window with delay.
            </summary>
            <param name="accept">Indicates whether the result of the popup should be accepted.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionWindow.Close(System.Boolean)">
            <summary>
            Closes the popup window.
            </summary>
            <param name="accept">Indicates whether the result of the popup should be accepted.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionWindow.Close(System.Boolean,System.Boolean)">
            <summary>
            Closes the popup window.
            </summary>
            <param name="accept">Indicates whether the result of the popup should be accepted.</param>
            <param name="setFocus">Indicates whether the owner control should be focused after closing popup window.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionWindow.Popup">
            <summary>
            Displays popup window at the current mouse position.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionWindow.PopupAt(System.Int32,System.Int32)">
            <summary>
            Displays popup window at the specified position.
            </summary>
            <param name="x">Horizontal coordinate at which popup window should be displayed.</param>
            <param name="y">Vertical coordinate at which popup window should be displayed</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionWindow.PopupAt(System.Drawing.Point)">
            <summary>
            Displays popup window at the specified position.
            </summary>
            <param name="position">The Point object that specifies the coordinates at which popup window should be displayed.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionWindow.IsFocused">
            <summary>
            Indicates whether <c>CodeCompletionWindow</c> or it's child control has an input focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionWindow.ResetAutoSize">
            <summary>
            Resets the AutoSize property to its default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionWindow.ResetCodeCompletionFlags">
            <summary>
            Resets the <c>CompletionFlags</c> property to its default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionWindow.ResetSizeable">
            <summary>
            Resets the <c>Sizeable</c> property to its default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionWindow.Provider">
            <summary>
            Gets or sets the object that contains data related to the popup window.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionWindow.AutoSize">
            <summary>
            Gets or sets a value indicating whether a popup window is automatically resized to fit its contents.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionWindow.Images">
            <summary>
            Gets or sets the <c>ImageList</c> for code completion items.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionWindow.CompletionFlags">
            <summary>
            Gets or sets collection of attributes that specifies behavior of the popup window.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionWindow.Sizeable">
            <summary>
            Gets or sets a value indicating whether the border of the popup window is sizable.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionWindow.OwnerControl">
            <summary>
            Represents a control owning this <c>CodeCompletionWindow</c> object.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionWindow.PopupControl">
            <summary>
            Represents control contained in popup window. Usually <c>CodeCompletionHint</c> or	<c>CompletionListBox</c>.
            <seealso cref="!:QWhale.Editor.CodeCompletionHint"/>
            <seealso cref="!:QWhale.Editor.CompletionListBox"/>
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionWindow.StartPos">
            <summary>
            Specifies position within the text where <c>CodeCompletionWindow</c> is valid.
            <seealso cref="!:QWhale.Editor.CodeCompletionWindow.EndPos"/>
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionWindow.EndPos">
            <summary>
            Specifies position within the text where <c>CodeCompletionWindow</c> is valid.
            <seealso cref="!:QWhale.Editor.CodeCompletionWindow.StartPos"/>
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionWindow.DisplayPos">
            <summary>
            Specifies position within the text (as index of line and character) where <c>ICodeCompletionWindow</c> is displayed.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.CodeCompletionWindow.ClosePopup">
            <summary>
            Occurs when the popup window is closed.
            </summary>
            <remarks>The event handler receives an argument of type <c>ClosingEventArgs</c> containing data related to this event.</remarks>
        </member>
        <member name="E:Stimulsoft.Editor.CodeCompletionWindow.ShowPopup">
            <summary>
            Occurs when the popup window is displayed.
            </summary>
            <remarks>The event handler receives an argument of type <c>ShowingEventArgs</c> containing data related to this event.</remarks>
        </member>
        <member name="E:Stimulsoft.Editor.CodeCompletionWindow.KeyPreviewEvent">
            <summary>
            Occurs when the popup window receives key message
            </summary>
            <remarks>The event handler receives an argument of type <c>KeyPreviewEventArgs</c> containing data related to this event.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.CodeCompletionColumn">
            <summary>
            Represents individual column object within a code completion columns collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionColumn.ResetFontStyle">
            <summary>
            Resets the <c>FontStyle</c> to its default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionColumn.ResetForeColor">
            <summary>
            Resets the <c>ForeColor</c> to its default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionColumn.ResetVisible">
            <summary>
            Resets the <c>Visible</c> to its default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionColumn.Name">
            <summary>
            Gets or sets the name of the <c>CodeCompletionColumn</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionColumn.FontStyle">
            <summary>
            Gets or sets style information for <c>CodeCompletionColumn</c> font.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionColumn.ForeColor">
            <summary>
            Gets or sets Color structure that represents foreground color of the <c>CodeCompletionColumn</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionColumn.Visible">
            <summary>
            Gets or sets a value indicating whether a column is visible.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.CodeCompletionColumns">
            <summary>
            Represents properties and methods to provide indexed access to <c>ICodeCompletionColumn</c>object.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionColumns.Item(System.Int32)">
            <summary>
            Provides an indexed access to individual <c>ICodeCompletionColumn</c> stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.CodeCompletionBox">
            <summary>
            Represents class that impements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionBox.#ctor(Stimulsoft.Editor.SyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>CodeCompletionBox</c> class with specified owner.
            </summary>
            <param name="owner">Specifies control owning this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionBox.Finalize">
            <summary>
            Destroys the instance of the <c>CodeCompletionBox</c> class.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionBox.ResetContent">
            <summary>
            Updates <c>CodeCompletionBox</c> content from its <c>Provider</c>.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionBox.ClearColumns">
            <summary>
            Removes all columns from the <c>CodeCompletionBox</c> column collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionBox.AddColumn">
            <summary>
            Adds a new column to the <c>CodeCompletionBox</c> column collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionBox.InsertColumn(System.Int32)">
            <summary>
            Inserts a new column to the specified position in the column collection.
            </summary>
            <param name="index">Index of the column in the collection.</param>
            <returns>New inserted column.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionBox.RemoveColumnAt(System.Int32)">
            <summary>
            Removes the column at the specified index of the column collection.
            </summary>
            <param name="index">Specifies zero-based index of the column to remove.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionBox.ResetSizeable">
            <summary>
            Resets the <c>Sizeable</c> to its default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionBox.ResetDropDownCount">
            <summary>
            Resets the <c>DropDownCount</c> to its default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionBox.DropDownCount">
            <summary>
            Gets or sets a value that specifies maximum visible amount of the ListBox items within the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionBox.Filtered">
            <summary>
            Gets or sets a boolean value that indicates whether <c>CodeCompletionBox</c> should filter its content using <c>Filter</c> property.
            <seealso cref="!:QWhale.Editor.CodeCompletionBox.Filter"/>
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionBox.Filter">
            <summary>
            Gets or sets filter string to filter <c>CodeCompletionBox</c> content.
            <seealso cref="!:QWhale.Editor.CodeCompletionBox.Filtered"/>
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionBox.Sorted">
            <summary>
            Gets or sets a value indicating whether the items in the <c>CodeCompletionBox</c> are sorted alphabetically.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionBox.Columns">
            <summary>
            Represents collection of <c>ICodeCompletionColumn</c> objects displayed by Code Completion ListBox.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.CodeCompletionBox.SelectionChanged">
            <summary>
            Occurs when index specifying the currently selected item is changed.
            </summary>
            <remarks>The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.CodeCompletionHint">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionHint.#ctor(Stimulsoft.Editor.SyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>CodeCompletionHint</c> class with specified owner.
            </summary>
            <param name="owner">The <c>SyntaxEdit object</c> owning this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionHint.Finalize">
            <summary>
            Destroys the instance of the <c>CodeCompletionHint</c> class.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionHint.ResetContent">
            <summary>
            Updates <c>CodeCompletionHint</c> content from its Provider.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionHint.ResetAutoHide">
            <summary>
            Resets the <c>AutoHide</c> to its default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionHint.ResetAutoHidePause">
            <summary>
            Resets the <c>AutoHidePause</c> to its default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionHint.AutoHide">
            <summary>
            Gets or sets a value indicating whether <c>CodeCompletionHint</c> should be closed after some period of time.
            <seealso cref="!:QWhale.Editor.CodeCompletionHint.AutoHidePause"/>
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionHint.AutoHidePause">
            <summary>
            Gets or sets a value that specifies delay, in miliseconds, between displaying and hiding popup hint.
            <seealso cref="!:QWhale.Editor.CodeCompletionHint.AutoHide"/>
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionHint.PaintSyntax(Stimulsoft.Editor.IPainter,System.Int32,System.Int32,System.Drawing.Point,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Paints a specified part of the hint control.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="startLine">Specifies first line to paint.</param>
            <param name="endLine">Specifies last line to paint.</param>
            <param name="position">The Point value that specifies start position to draw from.</param>
            <param name="rect">Rectangular area of <c>CodeCompletionHint</c> to draw.</param>
            <param name="specialPaint">Reserved for internal use.</param>		
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionHint.DrawLine(System.Int32,System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>
            Draws specific line in of the hint control to the graphic surface.
            </summary>
            <param name="index">Specifies index of line to draw.</param>
            <param name="position">The Point value that specifies start position to draw.</param>
            <param name="clipRect">Rectangular area of hint control to draw in.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionHint.DrawLine(System.Int32,System.String,System.Int16[],System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>
            Draws line given by its index at the specified position.
            </summary>
            <param name="index">Index of line to draw.</param>
            <param name="line">Specifies text to draw</param>
            <param name="colorData">Specifies array containing color data for given string</param>
            <param name="position">Position to start drawing.</param>
            <param name="clipRect">Rectangular area of the control to draw line in.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionHint.MeasureLine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Measures part of the string given by its index.
            </summary>
            <param name="index">Index of line to measure.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionHint.MeasureLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Measures part of the string given by its index.
            </summary>
            <param name="index">Index of line to measure.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <param name="width">Maximum length of the string.</param>
            <param name="chars">Receive real number of measured chars.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionHint.MeasureLine(System.String,System.Int16[],System.Int32,System.Int32)">
            <summary>
            Measures part of the given string.
            </summary>
            <param name="line">Text to measure.</param>
            <param name="colorData">Color data attached to the given string.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionHint.MeasureLine(System.String,System.Int16[],System.Int32,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Measures part of the given string.
            </summary>
            <param name="line">Text to measure.</param>
            <param name="colorData">Color data attached to the given string.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <param name="width">Maximum length of the string.</param>
            <param name="chars">Receive real number of measured chars.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionHint.ResetDisableColorPaint">
            <summary>
            Resets the <c>DisableColorPaint</c> to its default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionHint.ResetDisableSyntaxPaint">
            <summary>
            Resets the <c>DisableSyntaxPaint</c> to its default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionHint.OnCustomDraw(Stimulsoft.Editor.IPainter,System.Drawing.Rectangle,Stimulsoft.Editor.DrawStage,Stimulsoft.Editor.DrawState,Stimulsoft.Editor.DrawInfo)">
            <summary>
            Calls <c>Hint.SyntaxPaint.OnCustomDraw</c> method that raises <c>CustomDraw</c> event.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="rect">Rectangular area of <c>CodeCompletionHint</c> to draw.</param>
            <param name="stage">Specifies whether this method called before or after painting.</param>
            <param name="state">Specifies part of control to draw.</param>
            <param name="info">Full information about drawing text fragment.</param>
            <returns>True if user handles this event; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionHint.DisableColorPaint">
            <summary>
            Gets or sets a value indicating whether hint control uses colors to paint its content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionHint.DisableSyntaxPaint">
            <summary>
            Gets or sets a value indicating whether hint control uses lexical colors/styles to paint its content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionHint.Lexer">
            <summary>
            Gets or sets object that can make lexical analysis for the hint control content.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.CodeCompletionHint.CustomDraw">
            <summary>
            Occurs when hint draws its content.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.CodeCompletionEdit">
            <summary>
            Represents class that impements <c>ICodeCompletionEdit</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionEdit.#ctor(Stimulsoft.Editor.SyntaxEdit,Stimulsoft.Editor.CodeCompletionWindow)">
            <summary>
            Initializes a new instance of the <c>CodeCompletionEdit</c> class with specified parameters.
            </summary>
            <param name="owner">The <c>SyntaxEdit</c> control owning this new instance.</param>
            <param name="parent">Specifies parent of this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionEdit.IsFocused">
            <summary>
            Indicates whether <c>CodeCompletionEdit</c> control has an input focus.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionEdit.EditField">
            <summary>
            Gets or sets a value that indicates caption of the Edit label.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionEdit.EditText">
            <summary>
            Gets or sets a value that indicates text of the field being edited.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionEdit.EditPath">
            <summary>
            Gets or sets a value that indicates text of the field being edited.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.DisplayStrings">
            <summary>
            Represents a collection of visible strings in the text Edit control.
            </summary>
            <remarks>Use <c>SyntaxStrings</c> to access "real" lines stored in the <c>TextSource</c>. DisplayStrings provides an access to lines as they are displayed in the Edit control, assuming tabulation, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.#ctor(Stimulsoft.Editor.ISyntaxEdit,Stimulsoft.Editor.ISyntaxStrings)">
            <summary>
            Initializes a new instance of the <c>DisplayStrings</c> class with specified parameters.
            </summary>
            <param name="owner">Specifies owner of this new instance.</param>
            <param name="strings">Specifies collection of underlying lines.</param>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the lines collection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The Array object that is the destination of the elements copied from lines collection.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.GetEnumerator">
            <summary>
            Returns object that implements a IEnumerator interface for <c>DisplayStrings</c> object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Stimulsoft.Editor.DisplayStrings.Current">
            <summary>
            Gets an object that represents current string.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.MoveNext">
            <summary>
            Moves to the next line in the string collection.
            </summary>
            <returns>false if current line is the last line; otherwise true.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.Reset">
            <summary>
            Moves to the first line within the string collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.GetCount">
            <summary>
            Returns number of visible lines.
            </summary>
            <returns>Number of visible lines assuming tabulation, wordwrap and outlining.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.DisplayStrings.Count">
            <summary>
            Gets number of lines displayed in Edit control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.DisplayStrings.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the string collection is synchronized.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.DisplayStrings.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <c>DisplayStrings</c> object.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.GetOutlineLevel(System.Drawing.Point)">
            <summary>
            Returns amount of outline sections containg given point.
            </summary>
            <param name="point">Specifies position in text coordinates.</param>
            <returns>Amount of outline sections containg given point.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.Outline(System.Int32,System.Int32,System.Int32)">
            <summary>
            This method creates an outlining section based on specific scope at the specific level of outline nesting.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, If <c>AllowOutlining</c> property is true; otherwise return null.</returns>
            <remarks>This method is applicable only when property <c>AllowOutlining</c> is true.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.Outline(System.Int32,System.Int32)">
            <summary>
            This method creates an outlining section based on specific scope.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, if <c>AllowOutlining</c> property is true ; otherwise return null.</returns>
            <remarks>This method is applicable only when property <c>AllowOutlining</c> is true.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.Outline(System.Drawing.Point,System.Drawing.Point,System.Int32)">
            <summary>
            This method creates an outlining section based on specific scope with the specific level of outline nesting.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, if <c>AllowOutlining</c> property is true ; otherwise return null.</returns>
            <remarks>This method is applicable only when property <c>AllowOutlining</c> is true.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.Outline(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            This method creates an outlining section based on specific scope.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, if <c>AllowOutlining</c> property is true ; otherwise return null.</returns>
            <remarks>This method is applicable only when property <c>AllowOutlining</c> is true.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.Outline(System.Int32,System.Int32,System.String)">
            <summary>
            This method creates an outlining section based on specific scope within current outlined section and with specific text substituting collapsed section.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <param name="outlineText">Specifies text displayed when outline section is collapsed.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, if <c>AllowOutlining</c> property is true; otherwise return null.</returns>
            <remarks>This method is applicable only when property <c>AllowOutlining</c> is true.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.Outline(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            This method creates an outlining section based on specific scope at specific level of outline nesting and with specific text substituting collapsed section.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <param name="outlineText">Specifies text displayed when outline section is collapsed.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, if <c>AllowOutlining</c> property is true; otherwise return null.</returns>
            <remarks>This method is applicable only when property <c>AllowOutlining</c> is true.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.Outline(System.Drawing.Point,System.Drawing.Point,System.String)">
            <summary>
            This method creates an outlining section based on specific scope within current outlined section and with specific text substituting collapsed section.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <param name="outlineText">Specifies text displayed when outlined section is collapsed.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, if <c>AllowOutlining</c> property is true; otherwise return null.</returns>
            <remarks>This method is applicable only when property <c>AllowOutlining</c> is true.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.Outline(System.Drawing.Point,System.Drawing.Point,System.Int32,System.String)">
            <summary>
            This method creates an outlining section based on specific scope with specific level of outline nesting and specific text substituting collapsed section.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <param name="outlineText">Specifies text displayed when outline section is collapsed.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, if <c>AllowOutlining</c> property is true; otherwise return null.</returns>
            <remarks>This method is applicable only when property <c>AllowOutlining</c> is true.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.UnOutline(System.Drawing.Point)">
            <summary>
            This method removes outlined section at the specific position.
            </summary>
            <param name="point">Specifies position in text coordinates.</param>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.UnOutline(System.Int32)">
            <summary>
            This method removes all outlined section containing the given line.
            </summary>
            <param name="index">Specifies line in text coordinates.</param>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.UnOutline">
            <summary>
            This method removes all outlined section within the <c>DisplayStrings</c> collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.GetOutlineRange(System.Drawing.Point)">
            <summary>
            Returns outline section representing text substituting outline section and level of outline nesting at the specific position.
            <seealso cref="!:QWhale.Syntax.IOutlineRange"/>
            </summary>
            <param name="point">Specifies position in text coordinates.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, if <c>AllowOutlining</c> property is true; otherwise return null.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.GetOutlineRange(System.Int32)">
            <summary>
            Returns outline section, which represents text substistring outline section and level of outline nesting at the specific line.
            <seealso cref="!:QWhale.Syntax.IOutlineRange"/>
            </summary>
            <param name="index">Index of the line in text coordinates.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, if <c>AllowOutlining</c> property is true; otherwise return null.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.GetOutlineRanges(System.Collections.IList,System.Int32)">
            <summary>
            Fills list specified by Ranges parameter with all outline sections containing specific line.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="index">Specifies line in text coordinates.</param>
            <returns>Count of outline sections in Ranges.</returns>
            <remarks>If <c>AllowOutlining</c> property is false the method clears the Ranges collection and returns zero.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.GetOutlineRanges(System.Collections.IList,System.Drawing.Point)">
            <summary>
            Fills list specified by Ranges parameter with all outline sections containing specific potsition.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="point">Specifies position in text coordinates.</param>
            <returns>Count of outline sections in Ranges.</returns>
            <remarks>If <c>AllowOutlining</c> property is false the method clears the Ranges collection and returns zero.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.GetOutlineRanges(System.Collections.IList,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Fills list specified by Ranges parameter with all outline sections containing specific range.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="startPoint">Start position in text coordinates.</param>
            <param name="endPoint">End position in text coordinates.</param>
            <returns>Count of outline sections in Ranges.</returns>
            <remarks>If <c>AllowOutlining</c> property is false the method clears the Ranges collection and returns zero.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.GetOutlineRanges(System.Collections.IList)">
            <summary>
            Fills list specified by Ranges parameter with all existing outline sections.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <returns>Count of outline sections in Ranges.</returns>
            <remarks>If <c>AllowOutlining</c> property is false the method clears the Ranges collection and returns zero.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.IsExpanded(System.Int32)">
            <summary>
            Indicates whether the outlined section at the specified line is expanded.
            <seealso cref="!:QWhale.Editor.DisplayStrings.IsCollapsed"/>
            </summary>
            <param name="index">The index of the line.</param>
            <returns>True if outlined section is expanded; otherwise false.</returns>
            <remarks>If there is no outline section at the specified line text, method return false.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.IsCollapsed(System.Int32)">
            <summary>
            Indicates whether the outline section at the specified line is collapsed.
            <seealso cref="!:QWhale.Editor.DisplayStrings.IsExpanded"/>
            </summary>
            <param name="index">The index of the line.</param>
            <returns>True if outlined section is collapsed; otherwise false.</returns>
            <remarks>If there is no outline section at the specified line text, method return false.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.IsVisible(System.Drawing.Point)">
            <summary>
            Indicates whether the text at the specified position is visible, that is there is no collapsed outline section containing given position.
            </summary>
            <param name="point">The Point value that specifies position in text coordinates.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.IsVisible(System.Int32)">
            <summary>
            Indicates whether the text at the specified line is visible, that is there is no collapsed outline section containing given line.
            </summary>
            <param name="index">Specifies index of the line in text coordinates.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.Collapse(System.Int32)">
            <summary>
            Collapses the specified line.
            </summary>
            <param name="index">The index of the line to collapse.</param>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.Expand(System.Int32)">
            <summary>
            Expandes outline section at the given line.
            </summary>
            <param name="index">The index of the line to expand.</param>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.EnsureExpanded(System.Int32)">
            <summary>
            Makes all outline sections containing specified line expanded.
            </summary>
            <param name="index">Specifies index of the line in text coordinates.</param>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.EnsureExpanded(System.Drawing.Point)">
            <summary>
            Makes all outline sections containing specified position expanded.
            </summary>
            <param name="point">The Point value that specifies position in text coordinates.</param>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.ToggleOutlining">
            <summary>
            Toggles expanded state for current outline sections.
            </summary>
            <remarks>If there is no outline section at the current point, method does nothing, otherwize it changes collapsed state of the section to the expanded and vice versa.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.ToggleOutlining(System.Collections.IList,Stimulsoft.Editor.IOutlineRange)">
            <summary>
            Toggles expanded state for given <c>IOutlineRange</c> collection.
            </summary>
            <param name="ranges">Specifies <c>IOutlineRange</c> collection to toggle.</param>
            <param name="range"><c>IOutlineRange</c> object representing current outline section. The method expands or collapses ranges depending on collapsed state of the Range</param>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.CollapseToDefinitions">
            <summary>
            Collapses and expandes some outline section to get a quick overall view of the content.
            </summary>
            <remarks>Use this command to ensure that only more important for your outline sections starts to be expanded. For Example owner Edit control may expand only bodies of namespaces and classes and collapse all other sections.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.FullExpand(System.Collections.IList)">
            <summary>
            Expands all outline sections specified by Ranges parameter.
            </summary>
            <param name="ranges">Specifies <c>IOutlineRange</c> collection to expand.</param>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.FullCollapse(System.Collections.IList)">
            <summary>
            Collapses all sections objects specified by Ranges parameter.
            </summary>
            <param name="ranges">Specifies <c>IOutlineRange</c> collection to collapse.</param>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.FullExpand">
            <summary>
            Expands all outline sections objects within <c>DisplayStrings</c>.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.FullCollapse">
            <summary>
            Collapses all outline sections objects within <c>DisplayStrings</c>.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.SetOutlineRanges(System.Collections.IList)">
            <summary>
            Updates <c>IOutlineRange</c> collection from given list of ranges.
            </summary>
            <param name="ranges">Specifies new <c>IOutlineRange</c> collection to set.</param>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.SetOutlineRanges(System.Collections.IList,System.Boolean)">
            <summary>
            Updates <c>IOutlineRange</c> collection from given list of ranges.
            </summary>
            <param name="ranges">Specifies new <c>IOutlineRange</c> collection to set.</param>
            <param name="preserveVisible">Indicates whether new ranges should preserve collapsed state of existing outline sections.</param>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.GetOutlineHint(Stimulsoft.Editor.IOutlineRange)">
            <summary>
            Returns the string that appears in the hint window when mouse pointer over the outline button.
            </summary>
            <param name="range">Specifies the <c>IOutlineRange</c> object hodling the hint.</param>
            <returns>Hint string for given <c>IOutlineRange</c> object.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.BeginUpdate">
            <summary>
            Prevents outline list updating until calling <c>ICollapsable.EndUpdate</c> method.
            </summary>
            <returns>Number of header updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.EndUpdate">
            <summary>
            Re-enables outline list updating, that was turn of by calling <c>ICollapsable.BeginUpdate</c> method.
            </summary>
            <returns>Number of outline list updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.ResetAllowOutlining">
            <summary>
            Resets the <c>AllowOutlining</c> to its default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.ResetOutlineOptions">
            <summary>
            Resets the <c>OutlineOptions</c> to its default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.DisplayStrings.CollapsedCount">
            <summary>
            Returns number of collapsed sections.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.DisplayStrings.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUndoUpdate</c> and <c>EndUndoUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.DisplayStrings.AllowOutlining">
            <summary>
            Gets or sets a value indicating whether outlining is enabled.
            </summary>
            <remarks>Setting this property to false causes removing all outline sections.</remarks>
        </member>
        <member name="P:Stimulsoft.Editor.DisplayStrings.OutlineOptions">
            <summary>
            Gets or sets options representing outlining appearance and behaviour.
            <seealso cref="!:QWhale.Editor.OutlineOptions"/>
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.UpdateWordWrap">
            <summary>
            Re-wraps all lines in <c>DisplayStrings</c> collection.
            </summary>
            <returns>True if succeed otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.UpdateWordWrap(System.Int32,System.Int32)">
            <summary>
            Updates wrapped lines within specific scope in <c>DisplayStrings</c> object.
            </summary>
            <param name="first">Specifies first line to wrap.</param>
            <param name="last">Specifies first line to wrap.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.GetWrapMargin">
            <summary>
            Returns position of the wrap margin.
            </summary>
            <returns>Return width of client rectangle or position of margin depending of <c>WrapAtMargin</c> property.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.DisplayStrings.WrapMargin">
            <summary>
            Gets position of the wrap margin.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.ResetWordWrap">
            <summary>
            Resets the <c>WordWrap</c> to its default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.ResetWrapAtMargin">
            <summary>
            Resets the <c>WrapAtMargin</c> to its default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.DisplayStrings.WordWrap">
            <summary>
            Gets or sets a value indicating whether a <c>DisplayStrings</c> object automatically wraps words to the beginning of the next line when necessary.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.DisplayStrings.WrapAtMargin">
            <summary>
            Gets or sets a value indicating whether a <c>DisplayStrings</c> object automatically wraps words at margin position.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.IsDelimiter(System.String,System.Int32)">
            <summary>
            Indicates whether the character at the specific position of string is word delimiter character.
            </summary>
            <param name="str">The string in which character should be tested.</param>
            <param name="pos">The index of character in the string.</param>
            <returns>True if specified character is delimither character; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.IsDelimiter(System.Int32,System.Int32)">
            <summary>
            Indicates whether the character at the specific position of the string collection is word delimiter character.
            </summary>
            <param name="index">The index of line in which character should be tested.</param>
            <param name="pos">The index of character in the specific string.</param>
            <returns>True if specified character is delimither character; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.IsDelimiter(System.Char)">
            <summary>
            Indicates whether the specified character is word delimiter character.
            </summary>
            <param name="ch">The char value that should be tested.</param>
            <returns>True if specified character is delimither character; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.GetWord(System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Returns word start and end, if there is word at the specified position.
            </summary>
            <param name="str">The given string.</param>
            <param name="pos"> The index of character within the string.</param>
            <param name="left">Represents integer variable to receive start position of the word.</param>
            <param name="right">Represents integer variable to receive end position of the word.</param>
            <returns>True if any word found; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.GetWord(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Returns word start and end, if there is word at the specified position.
            </summary>
            <param name="index">The index of line in the text.</param>
            <param name="pos">The index of character in the within the string.</param>
            <param name="left">Represents integer variable to receive start position of the word.</param>
            <param name="right">Represents integer variable to receive end position of the word.</param>
            <returns>True if any word found; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.GetTextAt(System.Int32,System.Int32)">
            <summary>
            Returns word at the specific text position.
            </summary>
            <param name="line">Specifies index of visible string.</param>
            <param name="pos">Specifies index of character in the text string.</param>
            <remarks>If there is no word under specified position, method returns empty string.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.GetTextAt(System.Drawing.Point)">
            <summary>
            Returns word at the specific text position.
            </summary>
            <param name="position">The Point value that specifies position in the text.</param>
            <remarks>If there is no word under specified position, method returns empty string.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.ResetDelimiters">
            <summary>
            Resets the <c>Delimiters</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.DisplayStrings.Delimiters">
            <summary>
            Gets or sets an array of chars used to separate words in a text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.DisplayStrings.DelimiterString">
            <summary>
            Gets or sets <c>Delimiters</c> as a single string.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.DisplayStrings.DelimTable">
            <summary>
            Represents <c>Delimiters</c> as a key-and-value pairs collection where each key is a single delimiter character.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.ResetTabStops">
            <summary>
            Resets the <c>TabStops</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.ResetUseSpaces">
            <summary>
            Resets the <c>UseSpaces</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.DisplayStrings.TabStops">
            <summary>
            Gets or sets the character columns that the cursor will move to each time you press Tab.
            </summary>
            <remarks>If each successive tab stop is not larger than its predecessor, you will receive an error.</remarks>
        </member>
        <member name="P:Stimulsoft.Editor.DisplayStrings.UseSpaces">
            <summary>
            Gets or sets a value indicating whether indent operations insert space characters rather than TAB characters.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.SaveFile(System.String)">
            <summary>
            Saves content to the specific file in the text format.
            </summary>
            <param name="fileName">Name of the file to save content.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.SaveFile(System.String,System.Text.Encoding)">
            <summary>
            Saves content to the specific file with specific encoding.
            </summary>
            <param name="fileName">Name of the file to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.SaveFile(System.String,Stimulsoft.Editor.ExportFormat)">
            <summary>
            Saves content to the specific file in the specific format.
            </summary>
            <param name="fileName">Name of the file to save content.</param>
            <param name="format">Specifies format of the file.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.SaveFile(System.String,Stimulsoft.Editor.ExportFormat,System.Text.Encoding)">
            <summary>
            Saves content to the specific file in the specific format with specific encoding.
            </summary>
            <param name="fileName">Name of the file to save content.</param>
            <param name="format">Specifies format of the file.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.SaveStream(System.IO.TextWriter)">
            <summary>
            Saves content to the specific stream in the text format.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.SaveStream(System.IO.Stream)">
            <summary>
            Saves content to the specific stream in the text format.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.DisplayStrings.LineTerminator">
            <summary>
            Gets or sets a string value that terminates line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.SaveStream(System.IO.TextWriter,Stimulsoft.Editor.ExportFormat)">
            <summary>
            Saves content to the specific stream in the specific format.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <param name="format">Specifies format of the stream.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.SaveStream(System.IO.Stream,Stimulsoft.Editor.ExportFormat)">
            <summary>
            Saves content to the specific stream in the specific format.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="format">Specifies format of the stream.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.SaveStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.SaveStream(System.IO.Stream,Stimulsoft.Editor.ExportFormat,System.Text.Encoding)">
            <summary>
            Saves content to the specific stream in the specific format and specific encoding.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="format">Specifies format of the stream.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.LoadFile(System.String)">
            <summary>
            Loads the contents of a text file into string collection.
            </summary>
            <param name="fileName">Represents name of file on disk.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.LoadFile(System.String,Stimulsoft.Editor.ExportFormat)">
            <summary>
            Loads the contents of a file into string collection.
            </summary>
            <param name="fileName">Represents name of file on disk.</param>
            <param name="format">Specifies file format of the file.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.LoadFile(System.String,System.Text.Encoding)">
            <summary>
            Loads the contents of a file into string collection.
            </summary>
            <param name="fileName">Represents name of file on disk.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.LoadFile(System.String,Stimulsoft.Editor.ExportFormat,System.Text.Encoding)">
            <summary>
            Loads the contents of a file into string collection.
            </summary>
            <param name="fileName">Represents name of file on disk.</param>
            <param name="format">Specifies file format of the file.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.LoadStream(System.IO.TextReader)">
            <summary>
            Loads the contents of a stream into string collection.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.LoadStream(System.IO.Stream)">
            <summary>
            Loads the contents of a stream into string collection.
            </summary>
            <param name="reader">The Stream object to read text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.LoadStream(System.IO.TextReader,Stimulsoft.Editor.ExportFormat)">
            <summary>
            Loads the contents of a file into string collection.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <param name="format">Specifies format of the stream.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.LoadStream(System.IO.Stream,Stimulsoft.Editor.ExportFormat)">
            <summary>
            Loads the contents of a file into string collection.
            </summary>
            <param name="stream">The stream object to read text.</param>
            <param name="format">Specifies format of the stream.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.LoadStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.LoadStream(System.IO.Stream,Stimulsoft.Editor.ExportFormat,System.Text.Encoding)">
            <summary>
            Loads the contents of a file into string collection.
            </summary>
            <param name="stream">The stream object to read text.</param>
            <param name="format">Specifies format of the stream.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.DisplayPointToPoint(System.Int32,System.Int32)">
            <summary>
            Converts the specified display coordinates to text coordinates.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies display coordinates to be converted.</param>
            <param name="y">The Y-constituent of the Point value that specifies display coordinates to be converted.</param>
            <returns>Text coordinates of specified display point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.PointToDisplayPoint(System.Int32,System.Int32)">
            <summary>
            Converts the specified text coordinates into display coordinates.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies the text coordinates to be converted.</param>
            <param name="y">The Y-constituent of the Point value that specifies the text coordinates to be converted.</param>
            <returns>Display coordinates of the specified point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.PointToDisplayPoint(System.Drawing.Point)">
            <summary>
            Converts the specified text coordinates into display coordinates.
            </summary>
            <param name="point">The Point value that specifies text coordinates to convert.</param>
            <returns>Display coordinates of the specified point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.DisplayPointToPoint(System.Drawing.Point)">
            <summary>
            Converts the specified display coordinates to text coordinates.
            </summary>
            <param name="point">The Point value that specifies the display coordinates to be converted.</param>
            <returns>Text coordinates of specified display point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.GetColorData(System.Int32)">
            <summary>
            Returns color information related to the specified line.
            </summary>
            <param name="index">The index of line in strings array.</param>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.GetLexStyle(System.Drawing.Point)">
            <summary>
            Returns lexical style related to the specified position.
            </summary>
            <param name="position">The Point value that specifies position to receive lexical style.</param>
        </member>
        <member name="P:Stimulsoft.Editor.DisplayStrings.MaxLineWidth">
            <summary>
            Gets width of the largest line in the <c>DisplayString</c> object.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.DisplayStrings.Lines">
            <summary>
            Gets or sets the collection of underlying "real" collection of text lines.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.DisplayStrings.Item(System.Int32)">
            <summary>
            Provides indexed access to the strings in the strings collection.
            </summary>
            <param name="index">Specifies index of line within the collection.</param>
        </member>
        <member name="P:Stimulsoft.Editor.DisplayStrings.Text">
            <summary>
            When implemented by a class, gets or sets the strings in the <c>IStringList</c> as a single string with the individual strings delimited by carriage returns.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DisplayStrings.Find(System.String,Stimulsoft.Editor.SearchOptions,System.Text.RegularExpressions.Regex,System.Drawing.Point@,System.Int32@,System.Text.RegularExpressions.Match@)">
            <summary>
            Searches for given text within the <c>DisplayStrings</c> contents.
            </summary>
            <param name="str">The text to locate in the strings.</param>
            <param name="options">Search parameters.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="position">Position in strings collection to start search.</param>
            <param name="len">Receives length of the found text.</param>
            <param name="match">Receives match if regular expression search successfull</param>
            <returns>True if search succeed; otherwise false.</returns>
            <remarks>If search succeed Position parameter receive location of the found text.</remarks>
        </member>
        <member name="P:Stimulsoft.Editor.DisplayStrings.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>DisplayStrings</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.EditConsts">
            <summary>
            Contains default constants related to Edit control.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.UndoOptions">
            <summary>
            Defines undo/redo behaviour.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UndoOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UndoOptions.AllowUndo">
            <summary>
            Allows undo/redo operations.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UndoOptions.GroupUndo">
            <summary>
            Specifies that last editing command should be undone together with any subsequent editing commands of the same type.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UndoOptions.UndoNavigations">
            <summary>
            Specifies that navigate operations can be undone.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UndoOptions.UndoAfterSave">
            <summary>
            Allows undo operation after a save.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UndoOptions.SingleBreakUndo">
            <summary>
            Specifies whether single break and unbreak operation should be undone rather than subsequent operations.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.UndoFlags">
            <summary>
            Defines additional flags for undo/redo operation.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UndoFlags.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UndoFlags.FirstTime">
            <summary>
            Indicates first undo operation in the undo sequences.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UndoFlags.Saved">
            <summary>
            Indicates that undoable operation occured prior to saving editor's content
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.UndoOperation">
            <summary>
            Defines a type of the operation to undo.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UndoOperation.Insert">
            <summary>
            Specifies operation that inserts some text.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UndoOperation.Delete">
            <summary>
            Specifies operation that deletes some text.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UndoOperation.Break">
            <summary>
            Specifies operation that breaks text line into two lines.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UndoOperation.UnBreak">
            <summary>
            Specifies operation that concatenates two text lines.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UndoOperation.InsertBlock">
            <summary>
            Specifies operation that inserts some block of text.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UndoOperation.DeleteBlock">
            <summary>
            Specifies operation that deletes some block of text.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UndoOperation.Navigate">
            <summary>
            Specifies operation that navigates within text content.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UndoOperation.NavigateEx">
            <summary>
            Specifies operation that navigates within text content. (this operation is always undone, regardless of UndoOptions);
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UndoOperation.UndoBlock">
            <summary>
            Specifies that subsequent undo operations will be undone at once.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UndoOperation.Unknown">
            <summary>
            Specifies unknown operation.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.BracesOptions">
            <summary>
            Defines braces behaviour.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.BracesOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.BracesOptions.Highlight">
            <summary>
            Specifies that matching braces should be highlighted.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.BracesOptions.HighlightBounds">
            <summary>
            Specifies that matching braces should be highlighted only if caret is positioned on the brace.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.BracesOptions.TempHighlight">
            <summary>
            Specifies that the highlighting will disapear after small delay.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.NavigateOptions">
            <summary>
            Defines specific options for navigation through the editor's content.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NavigateOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NavigateOptions.BeyondEol">
            <summary>
            Specifies that user can navigate beyond end of line.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NavigateOptions.BeyondEof">
            <summary>
            Specifies that user can navigate beyond end of file.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NavigateOptions.UpAtLineBegin">
            <summary>
            Specifies that the curet position should move to the previous line when user click Left key and caret locates at the line begin.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NavigateOptions.DownAtLineEnd">
            <summary>
            Specifies that the curet position should move to the next line when user click Right key at the end of the line.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NavigateOptions.MoveOnRightButton">
            <summary>
            Specifies that curent should moves to the mouse pointer when user clicks right mouse button.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NavigateOptions.LeaveCaretOnStringsChanged">
            <summary>
            Specifies that caret should not move when modifying lines programmaticaly.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IndentOptions">
            <summary>
            Defines behaviour of Edit control when user presses Enter to insert new text line.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.IndentOptions.None">
            <summary>
            No indentation.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.IndentOptions.AutoIndent">
            <summary>
            Positions the cursor under the first nonblank character of the preceding nonblank line when user presses Enter.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.IndentOptions.SmartIndent">
            <summary>
            Positions the cursor to the line indentation level, obtained from parser supporting option <c>SyntaxOptions.SmartIndent</c> when user presses Enter.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.IndentOptions.UsePrevIndent">
            <summary>
            Uses spaces and tabs from previous line when indenting the line.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.IndentOptions.JumpToIndent">
            <summary>
            Jumps to indent position rather than adding tabs or spaces.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.NotifyState">
            <summary>
            Represents the last changes to the text stored in the text source.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NotifyState.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NotifyState.PositionChanged">
            <summary>
            Current position in the text was changed.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NotifyState.CountChanged">
            <summary>
            Amount of lines in the text was changed.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NotifyState.OverWriteChanged">
            <summary>
            Overwrite mode was changed.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NotifyState.ModifiedChanged">
            <summary>
            Modified state was changed.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NotifyState.SyntaxChanged">
            <summary>
            Syntax scheme or Lexer was changed.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NotifyState.ReadonlyChanged">
            <summary>
            Readonly state was changed.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NotifyState.BlockChanged">
            <summary>
            Block of text was changed and needs invalidating.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NotifyState.BookMarkChanged">
            <summary>
            Bookmark was set or removed.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NotifyState.IncrementalSearchChanged">
            <summary>
            Incremental search state was changed.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NotifyState.SearcRectChanged">
            <summary>
            Rectangle that holds last found text was changed.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NotifyState.Undo">
            <summary>
            Undo operation was performed.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NotifyState.Edit">
            <summary>
            Text was edited.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NotifyState.Modified">
            <summary>
            Modified state was changed.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NotifyState.Outline">
            <summary>
            Outline section was collapsed or expanded.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NotifyState.WordWrap">
            <summary>
            Lines were wrapped.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NotifyState.GotoBookMark">
            <summary>
            Position of the text was changed due to moving to the bookmark.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NotifyState.SelectBlock">
            <summary>
            Block of text was selected or unselected.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NotifyState.FirstSearchChanged">
            <summary>
            <c>SyntaxEdit.FirstSearch</c> property was changed.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NotifyState.CenterLine">
            <summary>
            <c>SyntaxEdit</c> should center current line if it's not in view
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NotifyState.TextParsed">
            <summary>
            Text was completely parsed.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NotifyState.SmartFormat">
            <summary>
            Selection was formatted 
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NotifyState.StringsChanged">
            <summary>
            Strings was changed programmaticaly
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.SelectionType">
            <summary>
            Defines type of the selection.
            <seealso cref="!:QWhale.Editor.AllowedSelectionMode"/>
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionType.None">
            <summary>
            Specifies that no text is selected.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionType.Stream">
            <summary>
            Specifies that selected text consists of consecutive characters.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionType.Block">
            <summary>
            Specifies that selected text represents square block.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.AllowedSelectionMode">
            <summary>
            Defines which types of selection is allowed.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            <seealso cref="!:QWhale.Editor.SelectionType"/>
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.AllowedSelectionMode.None">
            <summary>
            Specifies that no selection type is allowed.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.AllowedSelectionMode.Stream">
            <summary>
            Specifies that only stream selection type is allowed.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.AllowedSelectionMode.Block">
            <summary>
            Specifies that only block selection type is allowed.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.SelectionState">
            <summary>
            Defines state of the selected text.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionState.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionState.Drag">
            <summary>
            Specifies that selected text is dragged.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionState.Select">
            <summary>
            Specifies that some text part is selected.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionState.SelectWord">
            <summary>
            Specifies that Edit control tries to select words instead of single characters.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionState.SelectLine">
            <summary>
            Specifies that Edit control tries to select lines instead of single characters.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.SelectionOptions">
            <summary>
            Defines appearance and behaviour of selected text.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionOptions.DisableSelection">
            <summary>
            Disables to select any text.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionOptions.DisableDragging">
            <summary>
            Disables dragging the selected text.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionOptions.SelectBeyondEol">
            <summary>
            Specifies that selection is drawn beyond end of line.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionOptions.UseColors">
            <summary>
            Specifies that selection should paint preserving colors of the text fragments.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionOptions.HideSelection">
            <summary>
            Specifies that selected text should be draw as unselected text when control lost focus.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionOptions.SelectLineOnDblClick">
            <summary>
            Specifies that whole line should be selected instead of single word when user double clicks on some text.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionOptions.DeselectOnCopy">
            <summary>
            Specifies that selection should be unselected when selected text copies to the Clipboard.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionOptions.PersistentBlocks">
            <summary>
            Specifies that selected text should be retained even when the cursor is moved, until a new block is selected.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionOptions.OverwriteBlocks">
            <summary>
            Specifies that selected text should be replaced of text with whatever is typed next.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionOptions.SmartFormat">
            <summary>
            Specifies that selected text should be formatted according to syntax rules when pasting.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionOptions.WordSelect">
            <summary>
            Specifies that Edit control should select words instead of single characters.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionOptions.DrawBorder">
            <summary>
            Specifies that Edit control should draw border around selection.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionOptions.SelectLineOnTripleClick">
            <summary>
            Specifies that whole line should be selected when user triple clicks on some text.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionOptions.DeselectOnDblClick">
            <summary>
            Specifies that selection should be cleared by dblclick.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionOptions.ConvertToSpacesOnPaste">
            <summary>
            Specifies that selection should convert all tabs to spaces in the text being pasted when Lines.UseSpaces is on.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionOptions.RtfClipboard">
            <summary>
            Specifies that selection should copy it's content clipboard in rtf format.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionOptions.ClearOnDrag">
            <summary>
            Specifies that selection should be deleted when dragging from external source.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionOptions.CopyLineWhenEmpty">
            <summary>
            Specifies that copy and cut operation should process entire line when selection is empty.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SelectionOptions.DisableCodeSnippetOnTab">
            <summary>
            Specifies that Edit control should not try to find and insert code snippet when tab key is pressed.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ErrorBehaviour">
            <summary>
            Defines how errors should be handled.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ErrorBehaviour.None">
            <summary>
            No action to do.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ErrorBehaviour.Message">
            <summary>
            Specifies that error handler should show a message about exception.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ErrorBehaviour.Exception">
            <summary>
            Specifies that error handler should throw an exception.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.SearchOptions">
            <summary>
            Defines options for search and replace operations.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SearchOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SearchOptions.CaseSensitive">
            <summary>
            Specifies that search should be case sensitive.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SearchOptions.WholeWordsOnly">
            <summary>
            Searches only for whole words, rather than matching the text as it occurs within words.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SearchOptions.RegularExpressions">
            <summary>
            Specifies that text to find represents notations for patterns of text rather than the literal character.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SearchOptions.BackwardSearch">
            <summary>
            Specifies that search should be executed towards the beginning of text.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SearchOptions.SelectionOnly">
            <summary>
            Searches only within the selected text in the currently active document.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SearchOptions.EntireScope">
            <summary>
            Specifies that search should start from the beginnig of text.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SearchOptions.SearchHiddenText">
            <summary>
            Specifies that the search includes invisible text, such as an collapsed section.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SearchOptions.FindTextAtCursor">
            <summary>
            Specifies that text at the current position of the active document should be used as text to find.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SearchOptions.PromptOnReplace">
            <summary>
            Specifies that confirm dialog should appear before replacing found text.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SearchOptions.FindSelectedText">
            <summary>
            Specifies that selected text of the active document should be used as text to find.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SearchOptions.CycledSearch">
            <summary>
            Search until current position is reached.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SearchOptions.SilentSearch">
            <summary>
            Search until current position is reached.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.StrItemState">
            <summary>
            Defines state of the <c>StrItem</c> object, represening individual line in the Source.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.StrItemState.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.StrItemState.Parsed">
            <summary>
            Specifies that <c>StrItem</c> object is already parsed.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.StrItemState.Readonly">
            <summary>
            Specifies that <c>StrItem</c> object is read-only.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ColorFlags">
            <summary>
            Defines additional flags for text fragments.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ColorFlags.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ColorFlags.WhiteSpace">
            <summary>
            Indicates that text fragment consists of whitespace symbol.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ColorFlags.Tabulation">
            <summary>
            Indicates that text fragment consists of tab symbol.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ColorFlags.OutlineSection">
            <summary>
            Indicates that text fragment contains outline section.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ColorFlags.MisSpelledWord">
            <summary>
            Indicates that text fragment contains misspelled word.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ColorFlags.HyperText">
            <summary>
            Indicates that text fragment contains hypertext.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ColorFlags.Brace">
            <summary>
            Indicates that text fragment contains matching brace.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ColorFlags.WaveLine">
            <summary>
            Indicates that text fragment contains wave line.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ColorFlags.CodeSnippet">
            <summary>
            Indicates that text fragment contains code snippet.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.GutterOptions">
            <summary>
            Defines gutter appearance and behaviour displayed at the left size of the Edit control.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.GutterOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.GutterOptions.PaintLineNumbers">
            <summary>
            Specifies that numbers of lines should be drawn.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.GutterOptions.PaintLinesOnGutter">
            <summary>
            Specifies that numbers of lines should be drawn at the gutter area rather than beyond the gutter.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.GutterOptions.PaintLinesBeyondEof">
            <summary>
            Specifies that numbers of lines should be drawn beyond end of file.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.GutterOptions.PaintBookMarks">
            <summary>
            Specifies that bookmarks should be drawn.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.GutterOptions.PaintLineModificators">
            <summary>
            Specifies that line modificators (color stitch that indicates that the line content is modified, unmodified or saved) should be drawn.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.GutterOptions.PaintUserMargin">
            <summary>
            Specifies that user margin (allowing to draw additional information) should be drawn.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.GutterOptions.SelectLineOnClick">
            <summary>
            Specifies that entire line should be selected while user holds "Shift" key and left clicks mouse on gutter.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.OutlineOptions">
            <summary>
            Defines appearance and behaviour of the outline text sections.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.OutlineOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.OutlineOptions.DrawOnGutter">
            <summary>
            Specifies that control should paint outline images and lines on gutter.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.OutlineOptions.DrawLines">
            <summary>
            Specifies that control should paint lines for expanded outline section.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.OutlineOptions.DrawButtons">
            <summary>
            Specifies that control should paint the outline buttons substituting content of the collapsed section.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.OutlineOptions.ShowHints">
            <summary>
            Specifies that control should display text of the collapsed outline section in the popup window when mouse pointer is over the outline button.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.CodeCompletionFlags">
            <summary>
            Defines behaviour of the code completion popup window.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionFlags.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionFlags.CloseOnEscape">
            <summary>
            Specifies that code completion popup window should be closed when user presses the ESC key.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionFlags.AcceptOnEnter">
            <summary>
            Specifies that code completion popup window should accept its result when user presses the ENTER key.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionFlags.CloseOnMouseLeave">
            <summary>
            Specifies that code completion popup window should be closed when mouse pointer leaves the control.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionFlags.CloseOnLostFocus">
            <summary>
            Specifies that code completion popup window should be closed when popup window lost focus.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionFlags.AcceptOnClick">
            <summary>
            Specifies that code completion popup window should accept its result when user clicks the popup.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionFlags.AcceptOnDblClick">
            <summary>
            Specifies that code completion popup window should accept its result when user double clicks the popup.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionFlags.FeetToScreen">
            <summary>
            Specifies that code completion popup window should be fitted to screen when popups.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionFlags.KeepActive">
            <summary>
            Indicates whether hint window remains visible until closed manually.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionFlags.AcceptOnDelimiter">
            <summary>
            Specifies that code completion popup window should accept its result when user presses delimiter key.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionFlags.AcceptOnTab">
            <summary>
            Specifies that code completion popup window should accept its result when user presses tab.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionFlags.AcceptOnSpace">
            <summary>
            Specifies that code completion popup window should accept its result and suppress the space key when user presses space.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.LineStyleOptions">
            <summary>
            Defines appearance of lines with some line style.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.LineStyleOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.LineStyleOptions.BeyondEol">
            <summary>
            Specifies that line style applicable beyond end of line.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.LineStyleOptions.InvertColors">
            <summary>
            Specifies that background and foreground colors should be interchanged.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.SeparatorOptions">
            <summary>
            Specifies options for highlighting and separating lines within Edit control.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SeparatorOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SeparatorOptions.HighlightCurrentLine">
            <summary>
            Specifies that current line in Edit control should be highlighted.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SeparatorOptions.HideHighlighting">
            <summary>
            Specifies that current line in Edit control should not be highlighted when control looses input focus.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SeparatorOptions.SeparateLines">
            <summary>
            Specifies that lines are visualy separated in Edit control.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SeparatorOptions.SeparateWrapLines">
            <summary>
            Specifies that Line seprator is drawn between lines that are dropped due to word break procedure.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SeparatorOptions.SeparateContent">
            <summary>
            Specifies that Line seprator is drawn between separate sections of the text, for example between methods.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SeparatorOptions.SeparateBeyondEof">
            <summary>
            Specifies that Line seprator is drawn between lines beyond end of file.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ScrollingOptions">
            <summary>
            Defines scrolling behaviour.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ScrollingOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ScrollingOptions.SmoothScroll">
            <summary>
            Specifies that Edit control should reposition immediately while user tracking the thumb.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ScrollingOptions.ShowScrollHint">
            <summary>
            Specifies that control should display hint text in the popup window when user tracking the thumb.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ScrollingOptions.UseScrollDelta">
            <summary>
            Specifies that horizontal scrolling should scroll client area at the several characters rather than one character when caret is at the right border.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ScrollingOptions.SystemScrollbars">
            <summary>
            Specifies that Edit control should use system scroll bars rather than scrollbar controls.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ScrollingOptions.FlatScrollbars">
            <summary>
            Specifies that scroll bars appears in flat style.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ScrollingOptions.AllowSplitHorz">
            <summary>
            Allows user to split Edit control horizontally.
            This options works only if <c>SystemScrollBars</c> is off and control has <c>Dock</c> property set to <c>DockStyle.Fill.</c>
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ScrollingOptions.AllowSplitVert">
            <summary>
            Allows user to split Edit control vertically.
            This options works only if <c>SystemScrollBars</c> is off and control has <c>Dock</c> property set to <c>DockStyle.Fill.</c>
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ScrollingOptions.HorzButtons">
            <summary>
            Specifies that scroll bars should display a collection of horizontal buttons at the left side of the horizontal scroll bar.
            This options works only if <c>SystemScrollBars</c> is off.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ScrollingOptions.VertButtons">
            <summary>
            Specifies that scroll bars should display a collection of vertical buttons at the bottom side of vertical scroll bar.
            This options works only if <c>SystemScrollBars</c> is off.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.PrintOptions">
            <summary>
            Defines appearance of the printed page when sending Editor's content to the printer.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.PrintOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.PrintOptions.LineNumbers">
            <summary>
            Specifies that document should print with line numbers.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.PrintOptions.PageNumbers">
            <summary>
            Specifies that document should print with page numbers.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.PrintOptions.WordWrap">
            <summary>
            Specifies that document should print with wrapping lines if neccesary.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.PrintOptions.PrintSelection">
            <summary>
            Specifies that document should print only selected part of the text.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.PrintOptions.UseColors">
            <summary>
            Specifies that document should print using colors.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.PrintOptions.UseSyntax">
            <summary>
            Specifies that lexical analysis should be used for the document being printed.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.PrintOptions.UseHeader">
            <summary>
            Specifies that document should print with header.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.PrintOptions.UseFooter">
            <summary>
            Specifies that document should print with footer.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.PrintOptions.DisplayProgress">
            <summary>
            Specifies that progress of the printing operation should be displayed.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ExportFormat">
            <summary>
            Defines format for saving/loading Edit control's content.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ExportFormat.Text">
            <summary>
            Specifies that text content should be exported in the standard text format.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ExportFormat.Rtf">
            <summary>
            Specifies that text content should be exported in the Rtf format.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ExportFormat.Html">
            <summary>
            Specifies that text content should be exported in the Html format.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ExportFormat.Xml">
            <summary>
            Specifies that text content should be exported in the Xml format.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.HitTest">
            <summary>
            Contains information about a part of the Edit control at a specified coordinate.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTest.None">
            <summary>
            No part.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTest.Above">
            <summary>
            Above the Edit control client area.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTest.Below">
            <summary>
            Below the Edit control client area.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTest.Left">
            <summary>
            Left to the Edit control client area.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTest.Right">
            <summary>
            Right to the Edit control client area.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTest.Text">
            <summary>
            On the text.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTest.Selection">
            <summary>
            On the selected text.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTest.BeyondEol">
            <summary>
            Beyond line end.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTest.BeyondEof">
            <summary>
            Beyond file end.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTest.Gutter">
            <summary>
            On the gutter area.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTest.Margin">
            <summary>
            On the margin area.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTest.GutterImage">
            <summary>
            On the gutter image.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTest.BookMark">
            <summary>
            On the bookmark.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTest.OutlineArea">
            <summary>
            On the outline area.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTest.OutlineImage">
            <summary>
            On the outline image(plus/minus) button.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTest.OutlineButton">
            <summary>
            On the outline button.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTest.LineModificator">
            <summary>
            On the line modificator area.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTest.LineNumber">
            <summary>
            On the line numbers area.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTest.HyperText">
            <summary>
            On the hypertext.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTest.Page">
            <summary>
            On the page.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTest.PageWhiteSpace">
            <summary>
            On the interval between pages.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.DrawState">
            <summary>
            DrawState is used to specify a custom drawing state, including information about elements of the control currently drawn.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawState.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawState.Control">
            <summary>
            Entire control is currently drawing.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawState.Text">
            <summary>
            Text fragment is currently drawing.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawState.Selection">
            <summary>
            Text currently drawn is selected.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawState.WhiteSpace">
            <summary>
            WhiteSpace is currently drawing.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawState.LineHighlight">
            <summary>
            Line highlighter is currently drawing.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawState.LineSeparator">
            <summary>
            Line separator is currently drawing.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawState.LineBookMark">
            <summary>
            Line bookmark is currently drawing.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawState.Brace">
            <summary>
            Brace is currently drawing.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawState.BeyondEol">
            <summary>
            Space after end of line is currently drawing.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawState.BeyondEof">
            <summary>
            Space after end of file is currently drawing.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawState.Gutter">
            <summary>
            Gutter area is currently drawing.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawState.GutterImage">
            <summary>
            Gutter bookmark or other gutter image is currently drawing.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawState.BookMark">
            <summary>
            Bookmark is currently drawing.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawState.LineNumber">
            <summary>
            Line number are currently drawing.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawState.OutlineArea">
            <summary>
            Outline area is currently drawing.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawState.OutlineImage">
            <summary>
            Outline image (plus/minus button) is currently drawing.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawState.OutlineButton">
            <summary>
            Outline button is currently drawing.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawState.LineModificator">
            <summary>
            Line modificator is currently drawing.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawState.Spelling">
            <summary>
            Mispelled wavy line is currently drawing.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawState.SyntaxError">
            <summary>
            Syntax error wavy line is currently drawing.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawState.Page">
            <summary>
            Edit page is currently drawing.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawState.PageHeader">
            <summary>
            Page header is currently drawing.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawState.PageBorder">
            <summary>
            Page border is currently drawing.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawState.LineStyle">
            <summary>
            Line Style is currently drawing.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawState.CodeSnippet">
            <summary>
            Code snippet is currently drawing.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawState.UserMargin">
            <summary>
            User margin is currently drawing.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.DrawStage">
            <summary>
            DrawState is used to specify a stage in the custom drawing process.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawStage.Before">
            <summary>
            After painting.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawStage.After">
            <summary>
            Before painting.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.PageType">
            <summary>
            Specifies the way of viewing Edit control's content.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.PageType.Normal">
            <summary>
            Specifies normal view.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.PageType.PageBreaks">
            <summary>
            Specifies dotted line to be displayed between separate pages.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.PageType.PageLayout">
            <summary>
            Specifies page layout mode, allowing to see how text will be positioned on the printed page.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.RulerOptions">
            <summary>
            Defines Edit ruler behaviour.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.RulerOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.RulerOptions.Discrete">
            <summary>
            Specifies that ruler indents chages its position in discrete steps. 
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.RulerOptions.AllowDrag">
            <summary>
            Allows dragging ruler indentations.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.RulerOptions.DisplayDragLine">
            <summary>
            Specifies dotted line to be displayed while ruler indentation being dragged.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.EditRulers">
            <summary>
            Specifies appearance of Edit control rulers.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.EditRulers.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.EditRulers.Horizonal">
            <summary>
            Display a horizontal ruler.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.EditRulers.Vertical">
            <summary>
            Display a vertical ruler.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.RulerUnits">
            <summary>
            Defines units for the ruler.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.RulerUnits.Milimeters">
            <summary>
            Specifies that ruler marks are measured in milimeters.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.RulerUnits.Inches">
            <summary>
            Specifies that ruler marks are measured in inches.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.RulerUnits.Pixels">
            <summary>
            Specifies that ruler marks are measured in pixels.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.RulerUnits.Characters">
            <summary>
            Specifies that ruler marks are measured in characters.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.KeyEvent">
            <summary>
            Represents a method that will handle the key event.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.KeyEventEx">
            <summary>
            Represents a method that will handle extended key event.
            </summary>
            <param name="param">Object containing additional event data.</param>
        </member>
        <member name="T:Stimulsoft.Editor.StringEvent">
            <summary>
            Represents a method that will handle string replacement event inside <c>Selection</c>
            </summary>
            <param name="s">String to be replaced.</param>
        </member>
        <member name="T:Stimulsoft.Editor.CodeCompletionEvent">
            <summary>
            Represents a method that will handle the <c>SyntaxEdit.NeedCodeCompletion</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <c>CodeCompletionArgs</c> that contains the event data.</param>
        </member>
        <member name="T:Stimulsoft.Editor.WordSpellEvent">
            <summary>
            Represents a method that will handle the <c>SyntaxEdit.WordSpell</c>, <c>TextSource.WordSpell</c> or <c>Spelling.WordSpell</c> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>WordSpellEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:Stimulsoft.Editor.HyperTextEvent">
            <summary>
            Represents a method that will handle the <c>SyntaxEdit.CheckHyperText</c>, <c>TextSource.CheckHyperText</c> or <c>HyperTextEx.CheckHyperText</c> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>HyperTextEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:Stimulsoft.Editor.UrlJumpEvent">
            <summary>
            Represents a method that will handle the <c>SyntaxEdit.JumpToUrl</c> or <c>HyperTextEx.JumpToUrl</c> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>UrlJumpEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:Stimulsoft.Editor.NotifyEvent">
            <summary>
            Represents a method that will handle the <c>SyntaxEdit.SourceStateChanged</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>NotifyEventArgs</c> that contains the event data.</param>	
        </member>
        <member name="T:Stimulsoft.Editor.CustomDrawEvent">
            <summary>
            Represents a method that will handle the <c>SyntaxPaint.CustomDraw</c>, <c>SyntaxEdit.CustomDraw</c> or <c>CodeCompletionHint.CustomDraw</c> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>CustomDrawEventArgs</c> that contains the event data.</param>	
        </member>
        <member name="T:Stimulsoft.Editor.AutoCorrectEvent">
            <summary>
            Represents a method that will handle the <c>SyntaxEdit.AutoCorrect</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>AutoCorrectEventArgs</c> that contains the event data.</param>	
        </member>
        <member name="T:Stimulsoft.Editor.DrawHeaderEvent">
            <summary>
            Represents a method that will handle the <c>SyntaxEdit.DrawHeader</c>, <c>EditPages.DrawHeader</c> or <c>CodeCompletionHint.CustomDraw</c> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>DrawHeaderEventArgs</c> that contains the event data.</param>	
        </member>
        <member name="T:Stimulsoft.Editor.CreatePrintEditEvent">
            <summary>
            Represents a method that will handle the <c>Printing.CreatePrintEdit</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>CreatePrintEditEventArgs</c> that contains the event data.</param>	
        </member>
        <member name="T:Stimulsoft.Editor.DrawUserMarginEvent">
            <summary>
            Represents a method that will handle the <c>SyntaxEdit.DrawUserMargin</c>, <c>EditPages.DrawHeader</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>DrawUserMarginArgs</c> that contains the event data.</param>	
        </member>
        <member name="T:Stimulsoft.Editor.ReadFormattedTextEvent">
            <summary>
            Represents a method that will handle the <c>SyntaxEdit.DrawUserMargin</c>, <c>FmtImport.ReadFormattedText</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>ReadFormattedTextEventArgs</c> that contains the event data.</param>	
        </member>
        <member name="T:Stimulsoft.Editor.KeyPreviewEvent">
            <summary>
            Represents a method that will handle the <c>ICodeCompletionWindow.KeyPreview</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>KeyPreviewEventArgs</c> that contains the event data.</param>	
        </member>
        <member name="T:Stimulsoft.Editor.PositionChangedEventArgs">
            <summary>
            Provides data for the event that occurs when the position within the text part of the <c>ITextSource</c> is changed.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.PositionChangedEventArgs.Reason">
            <summary>
            Represents the reason of the position change, such as insert new symbol, delete symbol, navigate and so on.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.PositionChangedEventArgs.DeltaX">
            <summary>
            Represents the horizontal displacement of the current position within the text of the <c>ITextSource</c>.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.PositionChangedEventArgs.DeltaY">
            <summary>
            Represents the vertical displacement of the current position within the text of the <c>ITextSource</c> control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.PositionChangedEventArgs.#ctor(Stimulsoft.Editor.UpdateReason,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>PositionChangedEventArgs</c> class with specified parameters.
            </summary>
            <param name="reason">Reason of the position change.</param>
            <param name="deltaX">Horizontal displacement of the current position.</param>
            <param name="deltaY">Vertical displacement of the current position.</param>
        </member>
        <member name="T:Stimulsoft.Editor.BlockDeletingEventArgs">
            <summary>
            Provides data for the event that occurs when some block of lines within the <c>ITextSource</c> is deleted.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.BlockDeletingEventArgs.Rect">
            <summary>
            Represents the rectangle area of block being deleted by <c>ITextSource</c>.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.BlockDeletingEventArgs.#ctor(System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the <c>BlockDeletingEventArgs</c> class with specified parameters.
            </summary>
            <param name="rect">Rectangulare are of the text being deleted.</param>
        </member>
        <member name="T:Stimulsoft.Editor.NotifyEventArgs">
            <summary>
            Provides data for the <c>NotifyEvent</c> handler.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NotifyEventArgs.State">
            <summary>
            Represents the reason of change.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NotifyEventArgs.FirstChanged">
            <summary>
            Represents index of the first changed line in the text portion of the control.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NotifyEventArgs.LastChanged">
            <summary>
            Represents index of the last changed line in the text portion of the control.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NotifyEventArgs.Update">
            <summary>
            Indicates whether <c>ISyntaxEdit</c> control should update its scroll bars and caret position.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.NotifyEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <c>NotifyEventArgs</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.NotifyEventArgs.#ctor(Stimulsoft.Editor.NotifyState,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>NotifyEventArgs</c> class with specified parameters.
            </summary>
            <param name="state">State of the new instance.</param>
            <param name="first">First changed line of new instance.</param>
            <param name="last">Last changed line of new instance.</param>
            <param name="update">Specifies Update field of the instance.</param>
        </member>
        <member name="T:Stimulsoft.Editor.WordSpellEventArgs">
            <summary>
            Provides data for the <c>WordSpellEvent</c> handler.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.WordSpellEventArgs.Text">
            <summary>
            Represents string to check.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.WordSpellEventArgs.Correct">
            <summary>
            Represents a value indicating whether <c>WordSpellEventArgs.Text</c> has correct spelling.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.WordSpellEventArgs.ColorStyle">
            <summary>
            Represents lexical style for <c>WordSpellEventArgs.Text</c>.
            This allows to skip checking spelling for keywords, numbers or identifiers.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.WordSpellEventArgs.#ctor(System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <c>WordSpellEventArgs</c> class with specified parameters.
            </summary>
            <param name="text">Text to check.</param>
            <param name="correct">Specifies whether text spelling is correct.</param>
            <param name="colorStyle">Color style for text to check-up.</param>
        </member>
        <member name="T:Stimulsoft.Editor.HyperTextEventArgs">
            <summary>
            Provides data for the <c>HyperTextEvent</c> handler.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HyperTextEventArgs.Text">
            <summary>
            Contains string to check.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HyperTextEventArgs.IsHyperText">
            <summary>
            Returns value indicating whether <c>HyperTextEventArgs.Text</c> represents hypertext.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.HyperTextEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>HyperTextEventArgs</c> class with specified Text and HyperText values.
            </summary>
            <param name="text">Specifies text to check.</param>
            <param name="isHyperText">Indicates whether given text represents hypertext.</param>
        </member>
        <member name="T:Stimulsoft.Editor.UrlJumpEventArgs">
            <summary>
            Provides data for the <c>UrlJumpEvent</c> handler.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UrlJumpEventArgs.Text">
            <summary>
            Represents the Url address.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UrlJumpEventArgs.Handled">
            <summary>
            Represents a value indicating whether jump to url event is handled, disabling opening default browser. By default this value is false.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.UrlJumpEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>UrlJumpEventArgs</c> class with specified parameters.
            </summary>
            <param name="text">The Url address.</param>
            <param name="handled">Specifies whether jump to url event already handled.</param>
        </member>
        <member name="T:Stimulsoft.Editor.CustomDrawEventArgs">
            <summary>
            Provides data for the <c>CustomDrawEvent</c> handler.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CustomDrawEventArgs.Painter">
            <summary>
            Represents Painter surface to draw on.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CustomDrawEventArgs.DrawStage">
            <summary>
            Specify a stage in the custom drawing process.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CustomDrawEventArgs.DrawState">
            <summary>
            Specify a custom drawing state, including information about elements of the control currently drawn.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CustomDrawEventArgs.Rect">
            <summary>
            Specifiying rectangular area where Editor's content is drawn.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CustomDrawEventArgs.DrawInfo">
            <summary>
            Represents information about drawing text.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CustomDrawEventArgs.Handled">
            <summary>
            Specifies whether painting is handled by an event, preventing control from default painting. This parameter is only used when DrawStage is DrawStage.Before.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.AutoCorrectEventArgs">
            <summary>
            Provides data for the <c>AutoCorrectEvent</c> handler.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.AutoCorrectEventArgs.Word">
            <summary>
            Represents words to correct.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.AutoCorrectEventArgs.CorrectWord">
            <summary>
            Represents corrected word.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.AutoCorrectEventArgs.HasCorrection">
            <summary>
            Represents a value indicating whether specified word is corrected.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.DrawHeaderEventArgs">
            <summary>
            Provides data for the <c>DrawHeaderEvent</c> handler.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawHeaderEventArgs.Tag">
            <summary>
            String containing formatting elements used to format <c>DrawHeaderEventArgs.Text</c>.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawHeaderEventArgs.Text">
            <summary>
            String to replace formatting tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawHeaderEventArgs.Handled">
            <summary>
            Represents a value indicating whether draw header event is handled.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DrawHeaderEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>DrawHeaderEventArgs</c> class with specified parameters.
            </summary>
            <param name="tag">String containing formatting element.</param>
        </member>
        <member name="T:Stimulsoft.Editor.DrawUserMarginEventArgs">
            <summary>
            Provides data for the <c>DrawUserMarginEvent</c> handler.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawUserMarginEventArgs.Line">
            <summary>
            Line number being drawn.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DrawUserMarginEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <c>DrawUserMarginEventArgs</c> class with specified parameters.
            </summary>
            <param name="tag">String containing formatting element.</param>
            <param name="line">Line number being drawn.</param>
        </member>
        <member name="T:Stimulsoft.Editor.CreatePrintEditEventArgs">
            <summary>
            Provides data for the <c>CreatePrintEdit</c> handler.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CreatePrintEditEventArgs.PrintEdit">
            <summary>
            Edit control that is created to be printed.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.RulerEventArgs">
            <summary>
            Provides data for the <c>EditRuler.Change</c> handler.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.RulerEventArgs.Object">
            <summary>
            Source of the ruler event.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.RulerEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <c>RulerEventArgs</c> class with specified parameters.
            </summary>
            <param name="obj">The source of the event.</param>
        </member>
        <member name="T:Stimulsoft.Editor.ReadFormattedTextEventArgs">
            <summary>
            Provides data for the <c>FmtImport.ReadFormattedText</c> handler.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ReadFormattedTextEventArgs.Text">
            <summary>
            Starting the text fragment.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ReadFormattedTextEventArgs.ForeColor">
            <summary>
            Foreground color of the text fragment.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ReadFormattedTextEventArgs.BackColor">
            <summary>
            Background color of the text fragment.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ReadFormattedTextEventArgs.FontStyle">
            <summary>
            FontStyle of the text fragment.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ReadFormattedTextEventArgs.UserData">
            <summary>
            User-defined data.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.KeyPreviewEventArgs">
            <summary>
            Provides data for the <c>ICodeCompletionWindow.KeyPreviewEvent</c> handler.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.KeyPreviewEventArgs.#ctor(System.Windows.Forms.Message)">
            <summary>
            Initializes a new instance of the <c>KeyPreviewEventArgs</c> class with specified parameters.
            </summary>
            <param name="m">Represents key message</param>
        </member>
        <member name="F:Stimulsoft.Editor.KeyPreviewEventArgs.Message">
            <summary>
            Key message
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.KeyPreviewEventArgs.Handled">
            <summary>
            Specifies whether painting is handled by an event, preventing further processing of the key message.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.DrawInfo">
            <summary>
            Contains full information about text fragment to be drawn.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawInfo.Text">
            <summary>
            String to draw.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawInfo.Selection">
            <summary>
            Specifies whether text fragment is selected.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawInfo.Style">
            <summary>
            Represents index of lexical style used to draw this text fragment.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawInfo.Flags">
            <summary>
            Contains <c>ColorFlags</c> information for this text fragment.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawInfo.Char">
            <summary>
            The starting character of the text fragment.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawInfo.Line">
            <summary>
            The index of line in the text.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawInfo.GutterImage">
            <summary>
            Specifies index of the image drawn on the gutter.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DrawInfo.Page">
            <summary>
            Specifies index of page containing the text to be drawn.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DrawInfo.Init">
            <summary>
            Initializes <c>DrawInfo</c> structure with default values.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.HitTestInfo">
            <summary>
            Contains information about an area of an Edit control.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTestInfo.HitTest">
            <summary>
            Gets the <c>HitTest</c> that represents the area of the Edit control evaluated by the hit-test operation.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTestInfo.Line">
            <summary>
            Gets the index of line evaluated by the hit-test operation. Contains index of line if mouse is over text line in Edit control; -1 otherwise.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTestInfo.Pos">
            <summary>
            Gets the index of character within the line evaluated by the hit-test operation. Contains index of line if mouse is over some text in Edit control; -1 otherwise.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTestInfo.Item">
            <summary>
            Gets the <c>IStrItem</c> object evaluated by the hit-test operation. Contains instance of <c>IStrItem</c> object if mouse is over text line in Edit control; null otherwise.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTestInfo.String">
            <summary>
            Gets the text string evaluated by the hit-test operation. Contains string if mouse is over text line in Edit control; null otherwise.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTestInfo.Word">
            <summary>
            Gets the word evaluated by the hit-test operation. Contains string if mouse is over some word in Edit control; null otherwise.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTestInfo.Url">
            <summary>
            Gets the hypertext string evaluated by the hit-test operation. Contains string if mouse is over hypertext section in Edit control; null otherwise.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTestInfo.GutterImage">
            <summary>
            Gets the <c>Gutter</c> ImageIndex, evaluated by the hit-test operation. Contains index of image if mouse is over the gutter image; - 1 otherwise.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTestInfo.OutlineRange">
            <summary>
            Gets the <c>IOutlineRange</c> object evaluated by the hit-test operation. Contains instance of <c>IOutlineRange</c> object if mouse is over outline button; null otherwise.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTestInfo.Page">
            <summary> 
            Gets the index of page evaluated by the hit-test operation. Contains index of page if mouse is over text page in Edit control; null otherwise.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTestInfo.Style">
            <summary> 
            Gets the index of lexical style evaluated by the hit-test operation. Contains index of lexical style if mouse is over the text; - 1 otherwise.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HitTestInfo.ColorFlags">
            <summary> 
            Gets the set of additional flags for the text fragment evaluated by the hit-test operation.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.HitTestInfo.InitHitTestInfo">
            <summary>
            Initializes <c>HitTestInfo</c> object with default values.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IPageHeader">
            <summary>
            Represents properties and methods for header/footer parts of edit page.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IPageHeader.Assign(Stimulsoft.Editor.IPageHeader)">
            <summary>
            When implemented by a class, copies the contents of another <c>IPageHeader</c> object.
            </summary>
            <param name="source">Specifies <c>IPageHeader</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPageHeader.BeginUpdate">
            <summary>
            When implemented by a class, prevents header updating until calling <c>IPageHeader.EndUpdate</c> method.
            </summary>
            <returns>Number of header updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IPageHeader.EndUpdate">
            <summary>
            When implemented by a class, re-enables header updating, that was turn of by calling <c>IPageHeader.BeginUpdate</c> method.
            </summary>
            <returns>Number of header updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IPageHeader.Update">
            <summary>
            When implemented by a class, invalidates the header.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IPageHeader.ResetFont">
            <summary>
            When implemented by a class, resets the <c>IPageHeader.Font</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IPageHeader.ResetOffset">
            <summary>
            When implemented by a class, resets the <c>IPageHeader.Offset</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IPageHeader.ResetFontColor">
            <summary>
            When implemented by a class, resets the <c>IPageHeader.FontColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IPageHeader.ResetReverseOnEvenPages">
            <summary>
            When implemented by a class, resets the <c>IPageHeader.ReverseOnEvenPages</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IPageHeader.Paint(Stimulsoft.Editor.IPainter,System.Drawing.Rectangle,System.Int32,System.Int32,System.Boolean)">
            <summary>
            When implemented by a class, draws page header/footer on the specified graphic surface.
            </summary>
            <param name="painter">Represents <c>IPainter</c> surface to draw on.</param>
            <param name="rect">Rectangular area of header/footer to draw on.</param>
            <param name="pageIndex">Index of page which header/footer is drawing.</param>
            <param name="pageCount">Total number of pages.</param>
            <param name="pageNumbers">Specifies whether header/footer should draw page number.</param>
        </member>
        <member name="P:Stimulsoft.Editor.IPageHeader.LeftText">
            <summary>
            When implemented by a class, gets or sets a string that appears at the left part of the header/footer area.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPageHeader.CenterText">
            <summary>
            When implemented by a class, gets or sets a string that appears at the center of the header/footer area.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPageHeader.RightText">
            <summary>
            When implemented by a class, gets or sets a string that appears at the right part of the header/footer area.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPageHeader.Font">
            <summary>
            When implemented by a class, gets or sets font used to draw header/footer text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPageHeader.FontColor">
            <summary>
            When implemented by a class, gets or sets font color used to draw header/footer text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPageHeader.Offset">
            <summary>
            When implemented by a class, gets or sets indentation of the primary text edge.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPageHeader.Visible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the <c>IPageHeader</c> is visible.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPageHeader.ReverseOnEvenPages">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the <c>LeftText</c> and <c>RightText</c> interchanging on even page.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IPrinting">
            <summary>
            Represents properties and methods for printing and print previewing of Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IPrinting.Assign(Stimulsoft.Editor.IPrinting)">
            <summary>
            When implemented by a class, copies the contents of another <c>IPrinting</c> object.
            </summary>
            <param name="source">Specifies <c>IPrinting</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IPrinting.Print">
            <summary>
            When implemented by a class, sends <c>IPrinting.PrintDocument</c> content to the printer.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IPrinting.ExecutePrintPreviewDialog">
            <summary>
            When implemented by a class, initializes and runs print preview dialog.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IPrinting.ExecutePrintDialog">
            <summary>
            When implemented by a class, initializes and runs print dialog.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IPrinting.ExecutePageSetupDialog">
            <summary>
            When implemented by a class, initializes and runs page setup dialog.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IPrinting.ExecutePrintOptionsDialog">
            <summary>
            When implemented by a class, initializes and runs print options dialog.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IPrinting.ResetOptions">
            <summary>
            When implemented by a class, resets <c>IPrinting.Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IPrinting.ResetAllowedOptions">
            <summary>
            When implemented by a class, resets <c>IPrinting.AllowedOptions</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPrinting.PrintDocument">
            <summary>
            When implemented by a class, represents document to print, print preview or setup.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPrinting.PrinterSettings">
            <summary>
            When implemented by a class, represents settings for print document.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPrinting.Options">
            <summary>
            When implemented by a class, gets or sets <c>PrintOptions</c> that determines printing behaviour.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPrinting.AllowedOptions">
            <summary>
            When implemented by a class, gets or sets Print Options dialog options, that can be changed by user.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPrinting.Header">
            <summary>
            When implemented by a class, represents <c>IPageHeader</c> object to draw header of printing document.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPrinting.Footer">
            <summary>
            When implemented by a class, represents <c>IPageHeader</c> object to draw footer of printing document.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPrinting.PrintDialog">
            <summary>
            When implemented by a class, represents a dialog box that allows users to select a printer and choose which portions of the document to print.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPrinting.PageSetupDialog">
            <summary>
            When implemented by a class, represents a dialog box that allows users to manipulate page settings, including margins and paper orientation.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPrinting.PrintPreviewDialog">
            <summary>
            When implemented by a class, represents a dialog box that allows user to preview print document.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IPrinting.PrintOptionsDialog">
            <summary>
            When implemented by a class, provides a dialog box that allows users to manipulate print settings.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.IPrinting.CreatePrintEdit">
            <summary>
            When implemented by a class, occurs when Edit control to print is about to be created.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.IPrinting.Initialized">
            <summary>
            When implemented by a class, occurs when document to print is initialized.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IStrItem">
            <summary>
            Represents properties and methods of individual line in the Text Source.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IStrItem.SetColorFlag(System.Int32,System.Int32,Stimulsoft.Editor.ColorFlags,System.Boolean)">
            <summary>
            When implemented by a class, sets color information to <c>IStrItem.ColorData</c>.
            </summary>
            <param name="start">Specifies the first character in <c>IStrItem.ColorData</c> to set.</param>
            <param name="len">Specifies number of characters in <c>IStrItem.ColorData</c> to set.</param>
            <param name="flag">Specifies color information to set.</param>
            <param name="setFlag">Indicates whether Color information from flag should be set or removed</param>
        </member>
        <member name="M:Stimulsoft.Editor.IStrItem.GetColorFlag(System.Int32,Stimulsoft.Editor.ColorFlags@)">
            <summary>
            When implemented by a class, retrieves color information from <c>IStrItem.ColorData</c>.
            </summary>
            <param name="pos">Specifies position in <c>IStrItem.ColorData</c> to obtain color information.</param>
            <param name="flag">Receives color information.</param>
        </member>
        <member name="P:Stimulsoft.Editor.IStrItem.String">
            <summary>
            When implemented by a class, gets or sets string content of the <c>IStrItem</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IStrItem.ColorData">
            <summary>
            When implemented by a class, gets or sets color information of the <c>IStrItem</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IStrItem.State">
            <summary>
            When implemented by a class, gets or sets current state of the <c>IStrItem</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IStrItem.LexState">
            <summary>
            When implemented by a class, gets or sets index of lexical state at item end.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IStrItem.PrevLexState">
            <summary>
            When implemented by a class, gets or sets index of lexical state at item start.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ITabulation">
            <summary>
            Represents properties and methods for handling tabulations within the text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ITabulation.ResetTabStops">
            <summary>
            When implemented by a class, resets the <c>ITabulation.TabStops</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ITabulation.ResetUseSpaces">
            <summary>
            When implemented by a class, resets the <c>ITabulation.UseSpaces</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ITabulation.TabStops">
            <summary>
            When implemented by a class, gets or sets the character columns that the cursor will move to each time you press Tab.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ITabulation.UseSpaces">
            <summary>
            When implemented by a class, gets or sets a value indicating whether indent or TAB operations insert space characters rather than TAB characters.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ITabulationEx">
            <summary>
            Represents extended methods for handling tabulations within the text.
            <seealso cref="!:QWhale.Editor.ITabulation"/>
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ITabulationEx.GetTabString(System.String)">
            <summary>
            When implemented by a class, converts all tab character to spaces depending on <c>ITabulation.TabStops</c> property.
            </summary>
            <param name="s">Text to convert.</param>
            <returns>Tabbed string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ITabulationEx.GetTabStop(System.Int32)">
            <summary>
            When implemented by a class, returns number of spaces to the next TabStop at the specified position.
            <seealso cref="!:QWhale.Editor.ITabulationEx.GetPrevTabStop"/>
            </summary>
            <param name="pos">Position to check.</param>
            <returns>Number of spaces.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ITabulationEx.GetPrevTabStop(System.Int32)">
            <summary>
            When implemented by a class, returns number of spaces to the previous TabStop.
            <seealso cref="!:QWhale.Editor.ITabulationEx.GetTabStop"/>
            </summary>
            <param name="pos">Position to check.</param>
            <returns>Number of spaces.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ITabulationEx.GetIndentString(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, returns indentation string which consist of tabs and spaces.
            </summary>
            <param name="count">Specifies number of characters in the string.</param>
            <param name="pos">Specifies start position of the string.</param>
            <returns>Indented string that containing tabs and spaces.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ITabulationEx.TabPosToPos(System.String,System.Int32)">
            <summary>
            When implemented by a class, returns specified position within given string as untabbed position.
            </summary>
            <param name="s">Specifies string to convert.</param>
            <param name="pos">Specifies index of character which position should be converted.</param>
            <returns>Untabbed position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ITabulationEx.PosToTabPos(System.String,System.Int32)">
            <summary>
            When implemented by a class, returns specified position within given string as tabbed position.
            </summary>
            <param name="s">Specifies string to check.</param>
            <param name="pos">Positon of the character in the string.</param>
            <returns>Tabbed position.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.IExportEx">
            <summary>
            Represents methods to save text content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IExportEx.LineTerminator">
            <summary>
            When implemented by a class, gets or sets a string value that terminates line.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IFmtExport">
            <summary>
            Represents methods to save text content in the specified format.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IFmtExport.SaveFile(System.String,Stimulsoft.Editor.ExportFormat)">
            <summary>
            When implemented by a class, saves content to the given file in the specific format.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="format">Specifies output format.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IFmtExport.SaveFile(System.String,Stimulsoft.Editor.ExportFormat,System.Text.Encoding)">
            <summary>
            When implemented by a class, saves content to the given file in the specific format with specific encoding.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="format">Specifies output format.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IFmtExport.SaveStream(System.IO.TextWriter,Stimulsoft.Editor.ExportFormat)">
            <summary>
            When implemented by a class, saves the text content to the given stream in the specific format.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <param name="format">Specifies format of the stream.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IFmtExport.SaveStream(System.IO.Stream,Stimulsoft.Editor.ExportFormat)">
            <summary>
            When implemented by a class, saves the text content to the given stream in the specific format.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="format">Specifies format of the stream.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IFmtExport.SaveStream(System.IO.Stream,Stimulsoft.Editor.ExportFormat,System.Text.Encoding)">
            <summary>
            When implemented by a class, saves the text content to the given stream in the specific format.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="format">Specifies format of the stream.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.IFmtExportEx">
            <summary>
            Represents methods to save text content in the specified format.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IFmtExportEx.LineTerminator">
            <summary>
            When implemented by a class, gets or sets a string value that terminates line.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IFmtImport">
            <summary>
            Represents methods to load text content from the specified format.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IFmtImport.LoadFile(System.String,Stimulsoft.Editor.ExportFormat)">
            <summary>
            When implemented by a class, loads to string collection text from given file in the specific format.
            </summary>
            <param name="fileName">Represents name of file from which text must be loaded.</param>
            <param name="format">Specifies format to load file content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IFmtImport.LoadFile(System.String,Stimulsoft.Editor.ExportFormat,System.Text.Encoding)">
            <summary>
            When implemented by a class, loads text to to string collection from given file in the specific format with specific encoding.
            </summary>
            <param name="fileName">Represents name of file from which text must be loaded.</param>
            <param name="format">Specifies format to load file content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IFmtImport.LoadStream(System.IO.TextReader,Stimulsoft.Editor.ExportFormat)">
            <summary>
            When implemented by a class, loads the contents of the given stream with specified format.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <param name="format">Specifies format to load the content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IFmtImport.LoadStream(System.IO.Stream,Stimulsoft.Editor.ExportFormat)">
            <summary>
            When implemented by a class, loads the contents of the given stream with specified format.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <param name="format">Specifies format to load the content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IFmtImport.LoadStream(System.IO.Stream,Stimulsoft.Editor.ExportFormat,System.Text.Encoding)">
            <summary>
            When implemented by a class, loads the contents of the given stream with specified format.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <param name="format">Specifies format to load the content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.ITextSearch">
            <summary>
            Represents method used to search text within the string collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ITextSearch.Find(System.String,Stimulsoft.Editor.SearchOptions,System.Text.RegularExpressions.Regex,System.Drawing.Point@,System.Int32@,System.Text.RegularExpressions.Match@)">
            <summary>
            When implemented by a class, searches for given text within the control's text content.
            </summary>
            <param name="s">The text to locate in the collection.</param>
            <param name="options">Specifies parameters of search.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="position">Position in strings collection to start search.</param>
            <param name="len">Receives length of the found text.</param>
            <param name="match">Receives match if regular expression search successfull</param>
            <returns>True if search succeed; otherwise false.</returns>
            <remarks>If search succeed Position parameter receive location of the found text.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.ISearch">
            <summary>
            Represents properties and methods used to search and replace control's text content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.Find(System.String)">
            <summary>
            When implemented by a class, searches for given text within the control's contents.
            </summary>
            <param name="text">Text to find.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.Find(System.String,Stimulsoft.Editor.SearchOptions)">
            <summary>
            When implemented by a class, searches for given text within the control's contents with specified options.
            </summary>
            <param name="text">Text to find.</param>
            <param name="options">Represents options to search text.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.Find(System.String,Stimulsoft.Editor.SearchOptions,System.Text.RegularExpressions.Regex)">
            <summary>
            When implemented by a class, searches for given text within the control's contents with specified options using specified regular expression.
            </summary>
            <param name="text">Text to find.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.Find(System.String,Stimulsoft.Editor.SearchOptions,System.Text.RegularExpressions.Regex,System.Collections.IList)">
            <summary>
            When implemented by a class, searches for all occurences of given text within the control's contents with specified options using specified regular expression.
            </summary>
            <param name="text">Text to find.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="searchResults">Represents list of ranges determining search results.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.FindNext">
            <summary>
            When implemented by a class, searches for the next occurence of the text specified by previous search.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.FindPrevious">
            <summary>
            When implemented by a class, searches for the previous occurence of the text specified by previous search.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.FindNextSelected">
            <summary>
            When implemented by a class, searches for the next occurence of the selected text.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.FindPreviousSelected">
            <summary>
            When implemented by a class, searches for the previous occurence of the selected text.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.CanFindNext">
            <summary>
            When implemented by a class, indicates whether search engine can find next occurence of the text specified by previous search or it is only first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search; otherwise true.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.CanFindPrevious">
            <summary>
            When implemented by a class, indicates whether search engine can find previous occurence of the text specified to search or it is the first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search; otherwise true.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.CanFindNextSelected">
            <summary>
            When implemented by a class, indicates whether search engine can find next occurence of the selected text or it is the first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search or no text selected; otherwise true.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.CanFindPreviousSelected">
            <summary>
            When implemented by a class, indicates whether search engine can find previous occurence of the selected text or it is the first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search or no text selected; otherwise true.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.Replace(System.String,System.String)">
            <summary>
            When implemented by a class, searches for the first occurrence of given text within the text content and if succeed replaces it by specified string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.Replace(System.String,System.String,Stimulsoft.Editor.SearchOptions)">
            <summary>
            When implemented by a class, searches for first occurrence given text within the text content with specified options and if succeed replaces it by specified string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.Replace(System.String,System.String,Stimulsoft.Editor.SearchOptions,System.Text.RegularExpressions.Regex)">
            <summary>
            When implemented by a class, searches for first occurrence given text within the text content with specified options using specified regular expression and if succeed replaces it by specified string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.ReplaceAll(System.String,System.String,System.Int32@)">
            <summary>
            When implemented by a class, replaces all occurrences of given text within class text content by specified replaceWith string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="count">Number of replaced occurrences.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.ReplaceAll(System.String,System.String,Stimulsoft.Editor.SearchOptions,System.Int32@)">
            <summary>
            When implemented by a class, replaces all occurrences of given text within text content by specified replaceWith string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <param name="count">Number of replaced occurrences.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.ReplaceAll(System.String,System.String,Stimulsoft.Editor.SearchOptions,System.Text.RegularExpressions.Regex,System.Int32@)">
            <summary>
            When implemented by a class, replaces all occurrences of given text within class text content by specified replaceWith string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="count">Number of replaced occurrences.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.MarkAll(System.String,System.Boolean)">
            <summary>
            When implemented by a class, marks all occurrences of specified string in the class text content by unnumbered bookmarks and moves to the last occurrence.
            </summary>
            <param name="text">Specifies text to mark.</param>
            <param name="clearPrevious">Indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.</param>
            <returns>Number of found occurrences.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.MarkAll(System.String,Stimulsoft.Editor.SearchOptions,System.Boolean)">
            <summary>
            When implemented by a class, marks all occurrences of specified string in the class text content by unnumbered bookmarks and moves to the last occurrence.
            </summary>
            <param name="text">Specifies text to mark.</param>
            <param name="options">Specifies parameters of search.</param>
            <param name="clearPrevious">Indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.</param>
            <returns>Number of found occurrences.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.MarkAll(System.String,Stimulsoft.Editor.SearchOptions,System.Text.RegularExpressions.Regex,System.Boolean)">
            <summary>
            When implemented by a class, marks all occurrences of specified string in the class text content by unnumbered bookmarks and moves to the last occurrence.
            </summary>
            <param name="text">Specifies text to mark.</param>
            <param name="options">Specifies parameters of search.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="clearPrevious">Indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.</param>
            <returns>Number of found occurrences.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.NeedReplaceCurrent(System.Text.RegularExpressions.Match@)">
            <summary>
            When implemented by a class, indicates whether search engine need to replace successfully found and selected text.
            </summary>
            <param name="match">Receives match if regular expression search successfull</param>
            <returns>True if selected text matches search text; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.ReplaceCurrent(System.String,Stimulsoft.Editor.SearchOptions,System.Text.RegularExpressions.Match)">
            <summary>
            When implemented by a class, replaces currently selected text.
            </summary>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Specifies parameters of search and replace.</param>
            <param name="match">Represents Match object if regular expression search successfull.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.StartIncrementalSearch">
            <summary>
            When implemented by a class, enters control to the incremental search state.
            <seealso cref="!:QWhale.Editor.ISearch.FinishIncrementalSearch"/>
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.StartIncrementalSearch(System.Boolean)">
            <summary>
            When implemented by a class, enters control to the incremental search state.
            <seealso cref="!:QWhale.Editor.ISearch.FinishIncrementalSearch"/>
            </summary>
            <param name="backwardSearch">Indicates that search should be executed towards the beginning of text.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.FinishIncrementalSearch">
            <summary>
            When implemented by a class, leaves control from the incremental search state.
            <seealso cref="!:QWhale.Editor.ISearch.StartIncrementalSearch"/>
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.IncrementalSearch(System.String,System.Boolean)">
            <summary>
            When implemented by a class, finds given text incrementally.
            </summary>
            <param name="key">Additional value to seach text.</param>
            <param name="deleteLast">Specifies whether search text should be altered by adding Key string.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.GetTextToSearchAtCursor">
            <summary>
            When implemented by a class, returns word at the cursor position.
            </summary>
            <returns>Word at the cursor position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.CanSearchSelection(System.String@)">
            <summary>
            When implemented by a class, returns whether search can be performed inside selection.
            </summary>
            <param name="selectedText">Specifies the text being selected.</param>
            <returns>True if selection is not empty; otherwise false</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISearch.ShowNotFound(System.String)">
            <summary>
            When implemented by a class, displays "searched text not found" message box.
            </summary>
            <param name="caption">Specifies caption of the message dialog.</param>
        </member>
        <member name="P:Stimulsoft.Editor.ISearch.InIncrementalSearch">
            <summary>
            When implemented by a class, indicates whether control is in incremental search state.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISearch.IncrementalSearchString">
            <summary>
            When implemented by a class, return text to search if class is in incremental search state; otherwise return empty string.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISearch.SearchPos">
            <summary>
            When implemented by a class, gets or sets a value that represents position of the last found text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISearch.SearchOptions">
            <summary>
            When implemented by a class, gets or sets a value that defines search and replace options.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISearch.SearchLen">
            <summary>
            When implemented by a class, represents length of the last found text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISearch.FirstSearch">
            <summary>
            When implemented by a class, gets or sets a value indicating whether control launches text search at first.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISearch.SearchDialog">
            <summary>
            When implemented by a class, gets or sets a dialog box allowing to search for the text or replace it.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISearch.GotoLineDialog">
            <summary>
            When implemented by a class, gets or sets a dialog prompting for index of the line you need to locate.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ISyntaxStrings">
            <summary>
            Represents a collection of strings with extended possibilities.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxStrings.Add(System.String)">
            <summary>
            When implemented by a class, adds a new item to the end of string collection.
            </summary>
            <param name="value">String to be added to the end of the collection.</param>
            <returns>Index of new added item.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxStrings.Clear">
            <summary>
            When implemented by a class, removes all items from string collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxStrings.Contains(System.String)">
            <summary>
            When implemented by a class, indicates whether string collection contains specified string.
            </summary>
            <param name="value">string to check.</param>
            <returns>True if contains; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxStrings.IndexOf(System.String)">
            <summary>
            When implemented by a class, returns the index of the first occurrence of given string in the string collection.
            </summary>
            <param name="value">The string to locate in string collection.</param>
            <returns>The index of the first occurrence of string within the string collection, if found; otherwise -1.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxStrings.Insert(System.Int32,System.String)">
            <summary>
            When implemented by a class, inserts value at the specified position.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <param name="value">Specifies string to insert.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxStrings.Remove(System.String)">
            <summary>
            When implemented by a class, removes the first occurrence of given string from the string collection.
            </summary>
            <param name="value">String to remove.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxStrings.RemoveAt(System.Int32)">
            <summary>
            When implemented by a class, removes string item at specified position.
            </summary>
            <param name="index">Specifies index of item in the string collection to remove.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxStrings.GetItem(System.Int32)">
            <summary>
            When implemented by a class, returns the <c>IStrItem</c> object at the given position of the collection.
            </summary>
            <param name="index">Index of item in the collection.</param>
            <returns><c>IStrItem</c> object at specified position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxStrings.GetLength(System.Int32)">
            <summary>
            When implemented by a class, returns length of the string that corresponds to specified item in the collection.
            </summary>
            <param name="index">Index of item in the collection.</param>
            <returns>If collection do not contain specified item method returns 0.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxStrings.Changed(System.Int32)">
            <summary>
            When implemented by a class, notifies about string state changing.
            </summary>
            <param name="index">Index of string to update.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxStrings.Changed(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, notifies about string state changing.
            </summary>
            <param name="first">Index of the first string to update.</param>
            <param name="last">Index of the last string to update.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxStrings.ToArrayList">
            <summary>
            When implemented by a class, converts string collection to the array list. 
            </summary>
            <returns>IList representation of the <c>ISyntaxStrings</c> content.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxStrings.ToStringArray">
            <summary>
            When implemented by a class, converts string collection to the array of strings.
            </summary>
            <returns>Array of strings that represents <c>ISyntaxStrings</c> content.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxStrings.GetCharAt(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, returns character from specified position.
            </summary>
            <param name="x">Specifies position of character in string.</param>
            <param name="y">Specifies index of item in string collection.</param>
            <returns>Characted from specified position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxStrings.GetCharAt(System.Drawing.Point)">
            <summary>
            When implemented by a class, returns character from specified position.
            </summary>
            <param name="position">Position of character where Y is index of item in string collection and X is index of character in this string.</param>
            <returns>Characted from specified position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxStrings.GetLexStyle(System.Drawing.Point)">
            <summary>
            When implemented by a class, returns lexical style at specified position.
            </summary>
            <param name="position">Position of style where Y is index of item in string collection and X is index of character in this string.</param>
            <returns>Lexical style at specified position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxStrings.AfterSave">
            <summary>
            When implemented by a class, performs additional actions after <c>ISyntaxStrings</c> saves its content to the file.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxStrings.TextPointToAbsolutePosition(System.Drawing.Point)">
            <summary>
            When implemented by a class, converts given Point value to the absolute position.
            </summary>
            <param name="position">Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</param>
            <returns>Absolute position of given point.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxStrings.AbsolutePositionToTextPoint(System.Int32)">
            <summary>
            When implemented by a class, converts given absolute position to position as Point value.
            </summary>
            <param name="position">Specifies index of character if the text considered as a single string.</param>
            <returns>Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxStrings.Source">
            <summary>
            When implemented by a class, gets the text source owning the <c>ISyntaxStrings</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxStrings.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to individual string stored in the collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxStrings.RemoveTrailingSpaces">
            <summary>
            When implemented by a class, gets or set a boolean value thet indicates whether <c>ISyntaxStrings</c> should remove trailing spaces from the end of each its strings.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.INavigate">
            <summary>
            Represents properties and methods allowing to navigate within the Edit control's text content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.INavigate.Navigate(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, moves current position by the given offset value.
            </summary>
            <param name="deltaX">Horizontal offset.</param>
            <param name="deltaY">Vertical offset.</param>
        </member>
        <member name="M:Stimulsoft.Editor.INavigate.MoveTo(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, moves the current position to the given position.
            </summary>
            <param name="x">Index of character in the line to move to.</param>
            <param name="y">Index of line to move to.</param>
        </member>
        <member name="M:Stimulsoft.Editor.INavigate.MoveTo(System.Drawing.Point)">
            <summary>
            When implemented by a class, moves the current position to the given position.
            </summary>
            <param name="position">New location of the current position.</param>
        </member>
        <member name="M:Stimulsoft.Editor.INavigate.MoveToChar(System.Int32)">
            <summary>
            When implemented by a class, moves the current position to the specified character in the current line.
            </summary>
            <param name="x">Index of character in the current line to move to.</param>
        </member>
        <member name="M:Stimulsoft.Editor.INavigate.MoveToLine(System.Int32)">
            <summary>
            When implemented by a class, moves the current position to the specified line.
            </summary>
            <param name="y">Index of line to move to.</param>
        </member>
        <member name="M:Stimulsoft.Editor.INavigate.ValidatePosition(System.Drawing.Point@)">
            <summary>
            When implemented by a class, validates given position within control's text content.
            </summary>
            <param name="position">Position to validate.</param>
        </member>
        <member name="M:Stimulsoft.Editor.INavigate.StorePosition(System.Drawing.Point)">
            <summary>
            When implemented by a class, stores given position to stored position list.
            </summary>
            <param name="position">Position to store.</param>
            <returns>Index of stored position in list.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.INavigate.RestorePosition(System.Int32)">
            <summary>
            When implemented by a class, restores position from stored position list by given index.
            </summary>
            <param name="index">Index of position to restore.</param>
            <returns>Point value that represents stored position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.INavigate.ResetNavigateOptions">
            <summary>
            When implemented by a class, resets the <c>NavigateOptions</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.INavigate.NavigateOptions">
            <summary>
            When implemented by a class, gets or sets navigating options.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.INavigate.Position">
            <summary>
            When implemented by a class, gets or sets current position within the control's text content.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.INavigateEx">
            <summary>
            Represents additional methods to navigate within the Edit control's text content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.INavigateEx.MoveCharLeft">
            <summary>
            When implemented by a class, moves the current position one character to the left.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.INavigateEx.MoveCharRight">
            <summary>
            When implemented by a class, moves the current position one character to the right.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.INavigateEx.MoveWordLeft">
            <summary>
            When implemented by a class, moves the current position one word to the left.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.INavigateEx.MoveWordRight">
            <summary>
            When implemented by a class, moves the current position one word to the right.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.INavigateEx.MoveLineUp">
            <summary>
            When implemented by a class, moves the current position to the previous line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.INavigateEx.MoveLineDown">
            <summary>
            When implemented by a class, moves the current position to the next line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.INavigateEx.MoveLineBegin">
            <summary>
            When implemented by a class, moves the current position to the first character of current line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.INavigateEx.MoveLineEnd">
            <summary>
            When implemented by a class, moves the current position to the last character of current line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.INavigateEx.MoveLineBeginCycled">
            <summary>
            When implemented by a class, moves the current position to the first not whitespace character/first character of current line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.INavigateEx.MoveLineEndCycled">
            <summary>
            When implemented by a class, moves the current position to the last not whitespace character/last character of current line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.INavigateEx.MoveFileBegin">
            <summary>
            When implemented by a class, moves the current position to the first character of the first line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.INavigateEx.MoveFileEnd">
            <summary>
            When implemented by a class, moves the current position to the last character of the last line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.INavigateEx.MovePageUp">
            <summary>
            When implemented by a class, moves current position to the previous page.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.INavigateEx.MovePageDown">
            <summary>
            When implemented by a class, moves current position to the next page.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.INavigateEx.MoveScreenTop">
            <summary>
            When implemented by a class, moves the current position to the top of the screen.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.INavigateEx.MoveScreenBottom">
            <summary>
            When implemented by a class, moves the current position to the bottom of the screen.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.INavigateEx.ScrollLineUp">
            <summary>
            When implemented by a class, scrolls text content one line up.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.INavigateEx.ScrollLineDown">
            <summary>
            When implemented by a class, scrolls text content one line down.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.INavigateEx.MoveToOpenBrace">
            <summary>
            When implemented by a class, moves the current position to the prev open brace in the text content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.INavigateEx.MoveToCloseBrace">
            <summary>
            When implemented by a class, moves the current position to the next close brace in the text content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.INavigateEx.MoveToBrace">
            <summary>
            When implemented by a class, moves the current position to the next open or close brace in the text content.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IEdit">
            <summary>
            Represents properties and methods used for editing the text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IEdit.ResetReadonly">
            <summary>
            When implemented by a class, resets the <c>Readonly</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IEdit.ResetOverWrite">
            <summary>
            When implemented by a class, resets the <c>OverWrite</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IEdit.ResetModified">
            <summary>
            When implemented by a class, resets the <c>Modified</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IEdit.ResetIndentOptions">
            <summary>
            When implemented by a class, resets the <c>IndentOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IEdit.ResetMaxLength">
            <summary>
            When implemented by a class, resets the <c>MaxLength</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IEdit.ResetSingleLineMode">
            <summary>
            When implemented by a class, resets the <c>SingleLineMode</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEdit.Readonly">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the control's content is read-only.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEdit.OverWrite">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the inserted text overwrites existing text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEdit.Modified">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the control's text content is modified.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEdit.SingleLineMode">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the control accepts only one line of the text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEdit.IndentOptions">
            <summary>
            When implemented by a class, gets or sets <c>QWhale.Editor.IndentOptions</c> for this class, allowing to customize behaior of Edit control when user presses Enter to insert new text line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEdit.MaxLength">
            <summary>
            When implemented by a class, specifies the maximum number of characters that can be entered into the edit control.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IEditEx">
            <summary>
            Represents extended properties and methods used for editing the text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IEditEx.Insert(System.String)">
            <summary>
            When implemeted by a class, inserts the given string at the specified location.
            </summary>
            <param name="text">The text to insert.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditEx.InsertFromFile(System.String)">
            <summary>
            When implemented by a class, inserts the file text content at the specified location.
            </summary>
            <param name="fileName">Name of file to load text from.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditEx.DeleteRight(System.Int32)">
            <summary>
            When implemented by a class, deletes a specified number of characters to the right of the active point.
            </summary>
            <param name="len">Specifies number of characters to delete.</param>
            <returns>True if method succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditEx.DeleteLeft(System.Int32)">
            <summary>
            When implemeted by a class, deletes a specified number of characters to the left of the active point.
            </summary>
            <param name="len">Specifies number of characters to delete.</param>
            <returns>True if method succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditEx.InsertBlock(System.String)">
            <summary>
            When implemeted by a class, inserts the given string at the specified location.
            </summary>
            <param name="text">String to insert.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditEx.InsertBlock(System.String[])">
            <summary>
            When implmeneted by a class, inserts the given string array at the specified location.
            </summary>
            <param name="strings">String array to insert.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditEx.InsertBlock(Stimulsoft.Editor.ISyntaxStrings)">
            <summary>
            When implemeted by a class, inserts the given string collection at the specified location.
            </summary>
            <param name="strings">Collection of strings to insert.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditEx.DeleteBlock(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, deletes a specified block of characters.
            </summary>
            <param name="rect">Specifies coordinates of characters block to delete.</param>
            <returns>True if method succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditEx.BreakLine">
            <summary>
            When implemented by a class, breaks current line into two lines.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditEx.UnBreakLine">
            <summary>
            When implemented by a class, concatenates lines at current position.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditEx.NewLine">
            <summary>
            When implemeted by a class, inserts a line break at the current position.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditEx.NewLineAbove">
            <summary>
            When implemented by a class, inserts a line break above the current position.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditEx.NewLineBelow">
            <summary>
            When implemented by a class, inserts a line break below the current position.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditEx.IsLineReadonly(System.Int32)">
            <summary>
            When implemented by a class, determines whether the given line is readonly.
            </summary>
            <param name="index">Line index.</param>
            <returns>True if the line at given index is readonly; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditEx.SetLineReadonly(System.Int32,System.Boolean)">
            <summary>
            When implemented by a class, sets readonly state for the given line.
            </summary>
            <param name="index">Line index.</param>
            <param name="readOnly">Indicates readonly flag should be set or cleared.</param>
        </member>
        <member name="T:Stimulsoft.Editor.ITrackChanges">
            <summary>
            Represents method used to indicate modified state of Edit control's content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ITrackChanges.IsLineModified(System.Int32,System.Boolean@)">
            <summary>
            When implemented by a class, indicates whether specified line already modified.
            </summary>
            <param name="line">Index of line to check.</param>
            <param name="saved">Receives boolean value that indicates whether line was not changed since last saving.</param>
            <returns>True is line modified; otherwise false.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.IUndo">
            <summary>
            Represents properties and methods to perform undo/redo operation with the text. 
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IUndo.Undo">
            <summary>
            When implemented by a class, performs the last undo operation.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IUndo.Undo(Stimulsoft.Editor.UndoData)">
            <summary>
            When implemented by a class, performs the single undo operation.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IUndo.Redo">
            <summary>
            When implemented by a class, performs the last redo operation.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IUndo.CanUndo">
            <summary>
            When implemented by a class, indicating whether the undo operation can be performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stimulsoft.Editor.IUndo.CanRedo">
            <summary>
            When implemented by a class, indicating whether the redo operation can be performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stimulsoft.Editor.IUndo.ClearUndo">
            <summary>
            When implemented by a class, clears list of undo operations.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IUndo.ClearRedo">
            <summary>
            When implemented by a class, clears list of redo operations.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IUndo.DisableUndo">
            <summary>
            When implemented by a class, disables recording of undo/redo operations.
            <seealso cref="!:QWhale.Editor.IUndo.EnableUndo"/>
            </summary>
            <returns>Number of undo/redo operations locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IUndo.EnableUndo">
            <summary>
            When implemented by a class, re-enables recording of undo/redo operations, that was turn of by calling <c>DisableUndo</c> method.
            <seealso cref="!:QWhale.Editor.IUndo.DisableUndo"/>
            </summary>
            <returns>Number of undo/redo operations locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IUndo.BeginUndoUpdate">
            <summary>
            When implemented by a class, allows to consider number of undo redo operations as single operation, until calling <c>EndUndoUpdate</c> method.
            </summary>
            <returns>Number of undo updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IUndo.EndUndoUpdate">
            <summary>
            When implemented by a class, ends undo block, that was started by <c>BeginUndoUpdate</c> method.
            </summary>
            <returns>Number of undo updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IUndo.ResetUndoOptions">
            <summary>
            When implemented by a class, resets the <c>UndoOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IUndo.ResetUndoLimit">
            <summary>
            When implemented by a class, resets the <c>UndoLimit</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IUndo.UndoOptions">
            <summary>
            When implemented by a class, gets or sets options for undo and redo operations.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IUndo.UndoLimit">
            <summary>
            When implemented by a class, gets or sets a value that limits number of undo operations.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IUndo.UndoUpdateCount">
            <summary>
            When implemented by a class, keeps track of calls to <c>BeginUndoUpdate</c> and <c>EndUndoUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IUndo.UndoList">
            <summary>
            When implemented by a class, provides an indexed access to undo data.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IUndo.RedoList">
            <summary>
            When implemented by a class, provides an indexed access to redo data.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.INotifyEx">
            <summary>
            Represents extended properties and methods to manage notification between objects.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.INotifyEx.FirstChanged">
            <summary>
            When implemented by a class, represents index of the first changed line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.INotifyEx.LastChanged">
            <summary>
            When implemented by a class, represents index of the last changed line.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ISourceNotify">
            <summary>
            Represents properties and methods to perform Text Source notification.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISourceNotify.BeginUpdate(Stimulsoft.Editor.UpdateReason)">
            <summary>
            When implemented by a class, prevents object state updating until calling <c>EndUpdate</c> method.
            </summary>
            <param name="reason">Reason of the source state updating.</param>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISourceNotify.LinesChanged(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, specifies range of lines that was changed.
            </summary>
            <param name="first">First changed line.</param>
            <param name="last">Last changed line.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISourceNotify.LinesChanged(System.Int32,System.Int32,System.Boolean)">
            <summary>
            When implemented by a class, specifies range of lines that was changed.
            </summary>
            <param name="first">First changed line.</param>
            <param name="last">Last changed line.</param>
            <param name="modified">Indicates that content of specified lines is modified.</param>
        </member>
        <member name="P:Stimulsoft.Editor.ISourceNotify.State">
            <summary>
            When implemented by a class, gets or sets last changes to the text stored in the text source.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IWhiteSpace">
            <summary>
            Represents properties of "invisible" characters, such as spaces and tabs, in the control's text content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IWhiteSpace.Assign(Stimulsoft.Editor.IWhiteSpace)">
            <summary>
            When implemented by a class, copies the contents from another <c>IWhiteSpace</c> object.
            </summary>
            <param name="source">Specifies <c>IWhiteSpace</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IWhiteSpace.ResetVisible">
            <summary>
            When implemented by a class, resets the <c>Visible</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IWhiteSpace.ResetTabSymbol">
            <summary>
            When implemented by a class, resets the <c>TabSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IWhiteSpace.ResetSpaceSymbol">
            <summary>
            When implemented by a class, resets the <c>SpaceSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IWhiteSpace.ResetEolSymbol">
            <summary>
            When implemented by a class, resets the <c>EolSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IWhiteSpace.ResetEofSymbol">
            <summary>
            When implemented by a class, resets the <c>EofSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IWhiteSpace.ResetWordWrapSymbol">
            <summary>
            When implemented by a class, resets the <c>WordWrapSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IWhiteSpace.ResetSymbolColor">
            <summary>
            When implemented by a class, resets the <c>SymbolColor</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IWhiteSpace.Visible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether white space symbols are visible in the contol's text content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IWhiteSpace.TabSymbol">
            <summary>
            When implemented by a class, gets or sets character that introduces special symbol to paint instead of the tab character.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IWhiteSpace.SpaceSymbol">
            <summary>
            When implemented by a class, gets or sets character that introduces special symbol to paint instead of the space character.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IWhiteSpace.EolSymbol">
            <summary>
            When implemented by a class, gets or sets character that specifies end of line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IWhiteSpace.EofSymbol">
            <summary>
            When implemented by a class, gets or sets character that specifies end of file.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IWhiteSpace.WordWrapSymbol">
            <summary>
            When implemented by a class, gets or sets character that specifies wrapped line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IWhiteSpace.SpaceString">
            <summary>
            When implemented by a class, represents one character string that introduces special symbol to paint instead of the space character.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IWhiteSpace.TabString">
            <summary>
            When implemented by a class, represents one character string that introduces special symbol to paint instead of the tab character.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IWhiteSpace.EolString">
            <summary>
            When implemented by a class, represents one character string that specifies end of line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IWhiteSpace.EofString">
            <summary>
            When implemented by a class, represents one character string that specifies end of file.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IWhiteSpace.WordWrapString">
            <summary>
            When implemented by a class, represents one character string that specifies wrapped file.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IWhiteSpace.SymbolColor">
            <summary>
            When implemented by a class, gets or sets color used to paint special symbols.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ISyntaxPaint">
            <summary>
            Represents properties and methods, used to draw text and graphic primitives.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxPaint.PaintSyntax(Stimulsoft.Editor.IPainter,System.Int32,System.Int32,System.Drawing.Point,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            When implemented by a class, perform syntax painting of the control on the graphic surface.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="startLine">Specifies the first line of content to paint.</param>
            <param name="endLine">Specifies the last line of content to paint.</param>
            <param name="position">The Point value that specifies start position to draw content from.</param>
            <param name="rect">Rectangular area of control to draw.</param>
            <param name="specialPaint">Reserved for internal use. Used for Print and Print preview.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxPaint.DrawLine(System.Int32,System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, draws line given by its index at the specified position.
            </summary>
            <param name="index">Index of line to draw.</param>
            <param name="position">Position to start drawing.</param>
            <param name="clipRect">Rectangular area of the control to draw line in.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxPaint.DrawLine(System.Int32,System.String,System.Int16[],System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, draws line given by its index at the specified position.
            </summary>
            <param name="index">Index of line to draw.</param>
            <param name="line">Specifies text to draw</param>
            <param name="colorData">Specifies array containing color data for given string</param>
            <param name="position">Position to start drawing.</param>
            <param name="clipRect">Rectangular area of the control to draw line in.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxPaint.MeasureLine(System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, measures part of the string given at by its Index.
            </summary>
            <param name="index">Index of line to measure.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxPaint.MeasureLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            When implemented by a class, measures part of the string given by its index.
            </summary>
            <param name="index">Index of line to measure.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <param name="width">Maximum length of the string.</param>
            <param name="chars">Receive real number of measured chars.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxPaint.MeasureLine(System.String,System.Int16[],System.Int32,System.Int32)">
            <summary>
            When implemented by a class, measures part of given string.
            </summary>
            <param name="line">Text to measure.</param>
            <param name="colorData">Color data attached to the given string.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxPaint.MeasureLine(System.String,System.Int16[],System.Int32,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            When implemented by a class, measures part of given string.
            </summary>
            <param name="line">Text to measure.</param>
            <param name="colorData">Color data attached to the given string.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <param name="width">Maximum length of the string.</param>
            <param name="chars">Receive real number of measured chars.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxPaint.OnCustomDraw(Stimulsoft.Editor.IPainter,System.Drawing.Rectangle,Stimulsoft.Editor.DrawStage,Stimulsoft.Editor.DrawState,Stimulsoft.Editor.DrawInfo)">
            <summary>
            When implemented by a class, raises an <c>CustomDraw</c> event.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="rect">Rectangular area of control to draw.</param>
            <param name="stage">Specifies whether this method called before or after painting.</param>
            <param name="state">Specifies part of control to draw.</param>
            <param name="info">Full information about drawing text fragment.</param>
            <returns>True if user handles this event; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxPaint.ResetDisableColorPaint">
            <summary>
            When implemented by a class, resets the <c>DisableColorPaint</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxPaint.ResetDisableSyntaxPaint">
            <summary>
            When implemented by a class, resets the <c>DisableSyntaxPaint</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxPaint.DisableColorPaint">
            <summary>
            When implemented by a class, gets or sets a value indicating whether control uses colors to paint its content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxPaint.DisableSyntaxPaint">
            <summary>
            When implemented by a class, gets or sets a value indicating whether Edit control uses lexical colors/styles to paint its content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxPaint.Lexer">
            <summary>
            When implemented by a class, gets or sets object that can make lexical analysis for the control's content.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.ISyntaxPaint.CustomDraw">
            <summary>
            When implemented by a class, occurs when control draws its content.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IScrollingButton">
            <summary>
            Represents properties specifying appearance and behaviour of button displayed on the scroll bar.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IScrollingButton.Assign(Stimulsoft.Editor.IScrollingButton)">
            <summary>
            When implemented by a class, copies the contents of another <c>IScrollingButton</c> object.
            </summary>
            <param name="source">Specifies <c>IScrollingButton</c> to assign.</param>
        </member>
        <member name="P:Stimulsoft.Editor.IScrollingButton.Name">
            <summary>
            When implemented by a class, gets or sets a string value that specifies the name of this <c>IScrollingButton</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IScrollingButton.Description">
            <summary>
            When implemented by a class, gets or sets a string value that specifies short description of this <c>IScrollingButton</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IScrollingButton.ImageIndex">
            <summary>
            When implemented by a class, gets or sets the index of the image displayed for this <c>IScrollingButton</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IScrollingButton.Images">
            <summary>
            When implemented by a class, gets or sets the ImageList for this <c>IScrollingButton</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IScrollingButton.Visible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether this <c>IScrollingButton</c> is visible.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IScrollingButton.BorderStyle">
            <summary>
            When implemented by a class, gets or sets the border style for this <c>IScrollingButton</c>.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IScrollingButtons">
            <summary>
            Represents properties and methods to provide an indexed access to individual <c>IScrollingButton</c> object.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IScrollingButtons.Assign(Stimulsoft.Editor.IScrollingButtons)">
            <summary>
            When implemented by a class, copies the contents of another <c>IScrollingButtons</c> object.
            </summary>
            <param name="source">Specifies <c>IScrollingButtons</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IScrollingButtons.GetScrollingButton(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to individual <c>IScrollingButton</c> object stored in the collection.
            </summary>
            <param name="index">Index of <c>IScrollingButton</c> within the collection.</param>
            <returns><c>IScrollingButton</c> object at specified index.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IScrollingButtons.AddScrollingButton">
            <summary>
            Creates and adds a new <c>IScrollingButton</c> to the collection.
            </summary>
            <returns>Index of this new <c>IScrollingButton</c> in the collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IScrollingButtons.AddScrollingButton(System.String,System.String,System.Int32)">
            <summary>
            Creates new <c>IScrollingButton</c> with specified parameters and adds it to the collection.
            </summary>
            <param name="name"><c>Name</c> of this new <c>IScrollingButton</c>.</param>
            <param name="description"><c>Description</c> of this new <c>IScrollingButton</c>.</param>
            <param name="imageIndex"><c>ImageIndex</c> of this new <c>IScrollingButton</c>.</param>
            <returns>Index of this new <c>IScrollingButton</c> in the collection.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.IScrolling">
            <summary>
            Represents properties and methods that describe scrolling behaviour of Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IScrolling.Assign(Stimulsoft.Editor.IScrolling)">
            <summary>
            When implemented by a class, copies the contents of another <c>IScrolling</c> object.
            </summary>
            <param name="source">Specifies <c>IScrolling</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IScrolling.ResetScrollBars">
            <summary>
            When implemented by a class, resets the <c>ScrollBars</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IScrolling.ResetDefaultHorzScrollSize">
            <summary>
            When implemented by a class, resets the <c>DefaultHorzScrollSize</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IScrolling.ResetOptions">
            <summary>
            When implemented by a class, resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IScrolling.ScrollBars">
            <summary>
            When implemented by a class, gets or sets the type of scroll bars displayed in the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IScrolling.DefaultHorzScrollSize">
            <summary>
            When implemented by a class, gets or sets a default size of horizontal scrollbar.
            </summary>
            <remarks>This property is applicable when control forces showing of the horizontal scroll bar.</remarks>
        </member>
        <member name="P:Stimulsoft.Editor.IScrolling.WindowOriginX">
            <summary>
            When implemented by a class, gets or sets a index of the first visible character within the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IScrolling.WindowOriginY">
            <summary>
            When implemented by a class, gets or sets a value that represents first visible line within the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IScrolling.HScrollBar">
            <summary>
            When implemented by a class, gets horizontal scroll bar control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IScrolling.VScrollBar">
            <summary>
            When implemented by a class, gets vertical scroll bar control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IScrolling.HasHScrollBar">
            <summary>
            When implemented by a class, gets boolean value indicating whether control has a horizontal scroll bar control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IScrolling.HasVScrollBar">
            <summary>
            When implemented by a class, gets boolean value indicating whether control has a vertical scroll bar control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IScrolling.HorzButtons">
            <summary>
            When implemented by a class, represents a collection of additional buttons displayed on the horizontal scroll bar.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IScrolling.VertButtons">
            <summary>
            When implemented by a class, represents a collection of additional buttons displayed on the vertical scroll bar.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IScrolling.Options">
            <summary>
            When implemented by a class, gets or sets a <c>ScrollingOptions</c> that determine scrolling behaviour.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IScrolling.VertScrollbarVisible">
            <summary>
            When implemented by a class, indicates whether verticall scrollbar is visible
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IScrolling.HorzScrollbarVisible">
            <summary>
            When implemented by a class, indicates whether horizontal scrollbar is visible
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.IScrolling.VerticalScroll">
            <summary>
            When implemented by a class, occurs when control scrolls its content in vertical direction. This can be caused by dragging vertical scroll thumb, or caret moving.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.IScrolling.HorizontalScroll">
            <summary>
            When implemented by a class, occurs when control scrolls its content in horizonal direction. This can be caused by dragging horizonal scroll thumb, or caret moving.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.IScrolling.ScrollButtonClick">
            <summary>
            When implemented by a class, occurs when some scrolling button is clicked.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICaret">
            <summary>
            Represents properties and methods to handle caret within the Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICaret.CreateCaret">
            <summary>
            When implemented by a class, creates a new shape for the system caret and gets ownership of the caret.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICaret.DestroyCaret">
            <summary>
            When implemented by a class, destroys the caret's current shape, frees the caret from the control, and removes the caret from the screen.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICaret.ShowCaret(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, moves the caret to the specified coordinates.
            </summary>
            <param name="x">Specifies the new x-coordinate of the caret.</param>
            <param name="y">Specifies the new y-coordinate of the caret.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ICaret.GetCaretSize(System.Drawing.Point)">
            <summary>
            When implemented by a class, returns size of the caret's current shape at given position.
            </summary>
            <param name="position">Point at which caret size should be calculated.</param>
            <returns>Size of the caret.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICaret.DisplayDragCaret">
            <summary>
            When implemented by a class, displays dragging caret rather than regular caret.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICaret.HideDragCaret">
            <summary>
            When implemented by a class, hides dragging caret.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICaret.ResetHideCaret">
            <summary>
            When implemented by a class, resets the <c>HideCaret</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICaret.HideCaret">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the control should display caret when it has input focus.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICollapsable">
            <summary>
            Represents properties and methods to affects appearance and behaviour of outline sections within Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.Outline(System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, creates an outlining section based on specific scope at the specific level of outline nesting.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.Outline(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, creates an outlining section based on specific scope within current outlined section.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.Outline(System.Drawing.Point,System.Drawing.Point,System.Int32)">
            <summary>
            When implemented by a class, creates an outlining section based on specific scope at the specific level of outline nesting.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.Outline(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            When implemented by a class, creates an outlining section based on specific scope within current outlined section.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.Outline(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            When implemented by a class, creates an outlining section based on specific scope at specific level of outline nesting and with specific text substituting collapsed text.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <param name="outlineText">Specifies text substituting collapsed text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.Outline(System.Int32,System.Int32,System.String)">
            <summary>
            When implemented by a class, creates an outlining section based on specific scope within current outlined section and with specific text substituting  collapsed text.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <param name="outlineText">Specifies first line of section to outline.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.Outline(System.Drawing.Point,System.Drawing.Point,System.Int32,System.String)">
            <summary>
            When implemented by a class, creates an outlining section based on specific scope at specific level of outline nesting and with specific text substituting collapsed text.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <param name="outlineText">Specifies text to substitute collapsed text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.Outline(System.Drawing.Point,System.Drawing.Point,System.String)">
            <summary>
            When implemented by a class, creates an outlining section based on specific scope within current outlined section and with specific text substituting collapsed text.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <param name="outlineText">Specifies text to substitute collapsed text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.UnOutline(System.Drawing.Point)">
            <summary>
            When implemented by a class, removes outlined section at the specific position.
            </summary>
            <param name="position">Specifies position in the text.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.UnOutline(System.Int32)">
            <summary>
            When implemented by a class, removes all outline sections containing the given line.
            </summary>
            <param name="index">Specifies line in the text.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.UnOutline">
            <summary>
            When implemented by a class, removes all outlined sections from outline collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.GetOutlineRange(System.Drawing.Point)">
            <summary>
            When implemented by a class, returns outline section, which represents text substituting outlined section and level of outline nesting at the specific position.
            </summary>
            <param name="position">Specifies position in the text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.GetOutlineRange(System.Int32)">
            <summary>
            When implemented by a class, returns outline section, which represents text substituting outlined section and level of outline nesting at the specific line.
            </summary>
            <param name="index">Index of line in the text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.IsExpanded(System.Int32)">
            <summary>
            When implemented by a class, indicates whether the outlined text at the specified line is expanded.
            </summary>
            <param name="index">Index of the line to test.</param>
            <returns>True if expanded; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.IsCollapsed(System.Int32)">
            <summary>
            When implemented by a class, indicates whether the outlined text at the specified line is collapsed.
            </summary>
            <param name="index">Index of the line to test.</param>
            <returns>True if collapsed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.IsVisible(System.Drawing.Point)">
            <summary>
            When implemented by a class, indicates whether the text at the specified position is visible, that is there is no collapsed outline section containing given position.
            </summary>
            <param name="position">The Point value that specifies position in the text.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.IsVisible(System.Int32)">
            <summary>
            When implemented by a class, indicates whether the text at the specified line is visible, that is there is no collapsed outline section containing given line.
            </summary>
            <param name="index">Specifies index of line in the text.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.Collapse(System.Int32)">
            <summary>
            When implemented by a class, collapses the specified line.
            </summary>
            <param name="index">The index of the line to collapse.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.Expand(System.Int32)">
            <summary>
            When implemented by a class, expands outline section at the given line.
            </summary>
            <param name="index">The index of the line to expand.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.EnsureExpanded(System.Int32)">
            <summary>
            When implemented by a class, makes all outline sections containing specified line expanded.
            </summary>
            <param name="index">Specifies position of the line in the text.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.EnsureExpanded(System.Drawing.Point)">
            <summary>
            When implemented by a class, makes all outline sections containing specified position expanded.
            </summary>
            <param name="position">The Point value that specifies position in the text.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.FullExpand">
            <summary>
            When implemented by a class, expands all outlining sections.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.FullExpand(System.Collections.IList)">
            <summary>
            When implemented by a class, expands all outline sections specified by Ranges parameter.
            </summary>
            <param name="ranges">Specifies <c>IOutlineRange</c> collection to expand.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.FullCollapse">
            <summary>
            When implemented by a class, collapses all outlining sections.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.FullCollapse(System.Collections.IList)">
            <summary>
            When implemented by a class, collapses all sections objects specified by Ranges parameter.
            </summary>
            <param name="ranges">Specifies <c>IOutlineRange</c> collection to collapse.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.ToggleOutlining">
            <summary>
            When implemented by a class, toggles expanded state for all <c>IOutlineRange</c> objects in outline collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.CollapseToDefinitions">
            <summary>
            When implemented by a class, collapses and expandes some outline section to get a quick overall view of the content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.GetOutlineHint(Stimulsoft.Editor.IOutlineRange)">
            <summary>
            When implemented by a class, returns string that appears in the hint window when mouse pointer is over the outline button.
            </summary>
            <param name="range">Specifies the <c>IOutlineRange</c> object holding the hint.</param>
            <returns>Hint string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.GetOutlineRanges(System.Collections.IList,System.Int32)">
            <summary>
            When implemented by a class, fills list specified by ranges parameter with all outline sections containing specific line.
            </summary>
            <param name="ranges">Specifles list to fill.</param>
            <param name="index">Specifies index of line in text coordinates.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.GetOutlineRanges(System.Collections.IList,System.Drawing.Point)">
            <summary>
            When implemented by a class, fills list specified by ranges parameter with all outline sections containing specific position.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="position">Specifies position in the text.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.GetOutlineRanges(System.Collections.IList,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            When implemented by a class, fills list specified by ranges parameter with all outline sections containing specific range.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="startPoint">Specifies start position in the text.</param>
            <param name="endPoint">Specifies end position in the text.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.GetOutlineRanges(System.Collections.IList)">
            <summary>
            When implemented by a class, fills list specified by ranges parameter with all existing outline sections.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.SetOutlineRanges(System.Collections.IList)">
            <summary>
            When implemented by a class, updates <c>IOutlineRange</c> collection from given list of ranges. 
            </summary>
            <param name="ranges">Specifies new <c>IOutlineRange</c> collection to set.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.SetOutlineRanges(System.Collections.IList,System.Boolean)">
            <summary>
            When implemented by a class, updates <c>IOutlineRange</c> collection from given list of ranges. 
            </summary>
            <param name="ranges">Specifies new <c>IOutlineRange</c> collection to set.</param>
            <param name="preserveVisible">Indicates whether new ranges should preserve collapsed state of existing outline sections.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.BeginUpdate">
            <summary>
            When implemented by a class, prevents outline list updating until calling <c>ICollapsable.EndUpdate</c> method.
            </summary>
            <returns>Number of outline list updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.EndUpdate">
            <summary>
            When implemented by a class, re-enables outline list updating, that was turn of by calling <c>ICollapsable.BeginUpdate</c> method.
            </summary>
            <returns>Number of outline list updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.ResetAllowOutlining">
            <summary>
            When implemented by a class, resets <c>AllowOutlining</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICollapsable.ResetOutlineOptions">
            <summary>
            When implemented by a class, resets <c>OutlineOptions</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICollapsable.CollapsedCount">
            <summary>
            When implemented by a class, returns number of collapsed sections.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICollapsable.UpdateCount">
            <summary>
            When implemented by a class, keeps track of calls to <c>BeginUndoUpdate</c> and <c>EndUndoUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICollapsable.AllowOutlining">
            <summary>
            When implemented by a class, gets or sets a value indicating whether outlining enabled.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICollapsable.OutlineOptions">
            <summary>
            When implemented by a class, gets or sets outlining options.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IOutlining">
            <summary>
            Represents additional properties and methods that affects appearance and behaviour of outline sections within Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IOutlining.Assign(Stimulsoft.Editor.IOutlining)">
            <summary>
            When implemented by a class, copies the contents from another <c>IOutlining</c> object.
            </summary>
            <param name="source">Specifies <c>IOutlining</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IOutlining.OutlineText">
            <summary>
            When implemented by a class, tries to perform lexical analysis of entire text to create outline sections based on results of this analysis.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IOutlining.UnOutlineText">
            <summary>
            When implemented by a class, removes all outline section from outline collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IOutlining.ResetOutlineColor">
            <summary>
            When implemented by a class, resets the <c>OutlineColor</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IOutlining.OutlineColor">
            <summary>
            When implemented by a class, gets or sets color that is used to draw outline button.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeCompletion">
            <summary>
            Represents properties and methods to provide code completion list box/tooltip for the Editor's content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletion.ShowCodeCompletionBox(Stimulsoft.Editor.ICodeCompletionProvider)">
            <summary>
            When implemented by a class, shows code completion popup window with given provider at the current position.
            </summary>
            <param name="provider">Represents data for code completion popup window.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletion.ShowCodeCompletionBox(Stimulsoft.Editor.ICodeCompletionProvider,System.Drawing.Point)">
            <summary>
            When implemented by a class, shows code completion popup window with given Provider at the specified position.
            </summary>
            <param name="provider">Represents data for code completion popup window.</param>
            <param name="position">Position to show code completion popup window.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletion.ShowCodeCompletionHint(Stimulsoft.Editor.ICodeCompletionProvider)">
            <summary>
            When implemented by a class, displays <c>ICodeCompletionHint</c> with given provider at the current position.
            </summary>
            <param name="provider">Represents data for code completion hint.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletion.ShowCodeCompletionHint(Stimulsoft.Editor.ICodeCompletionProvider,System.Drawing.Point)">
            <summary>
            When implemented by a class, displays <c>ICodeCompletionHint</c> with given provider at the specified position.
            </summary>
            <param name="provider">Represents data for code completion hint.</param>
            <param name="position">Position to display the hint.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletion.IsValidText(System.Drawing.Point)">
            <summary>
            When implemented by a class, indicates whether text at the specified position is valid (that is does not contain comments or stirng constants).
            </summary>
            <param name="position">Position to check.</param>
            <returns>True if text is not plain; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletion.RemovePlainText(System.Int32)">
            <summary>
            When implemented by a class, removes all plain (string constants or comments) parst of text from specified line.
            </summary>
            <param name="line">Index of line to process.</param>
            <returns>String without plain parts.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletion.CompleteWord">
            <summary>
            When implemented by a class, displays a code completion window that lists members of the current class in the Editor's content and locates single member, if possible.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletion.ListMembers">
            <summary>
            When implemented by a class, displays a code completion window that lists members of the current class in the Editor's content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletion.QuickInfo">
            <summary>
            When implemeted by a class, displays a code completion window with simple tooltip information.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletion.ParameterInfo">
            <summary>
            When implemeted by a class, displays a code completion window containing information for the current method or parameter in the Editor's content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletion.CodeSnippets">
            <summary>
            When implemented by a class, displays a code completion window with list of available code snippets.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.ICodeCompletion.NeedCodeCompletion">
            <summary>
            When implemented by a class, occurs when code completion window is to be displayed.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletion.CodeCompletionBox">
            <summary>
            When implemented by a class, represents object that specifies a popup window that contains Code completion information presented in the form of list.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletion.CodeCompletionHint">
            <summary>
            When implemented by a class, represents object that specifies a popup window that contains Code completion information presented in the form of the tooltip.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletion.CodeCompletionChars">
            <summary>
            When implemented by a class, represents a collection of characters that initializes a code completion procedure when typing in the editor.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IRecordPlayBack">
            <summary>
            Represents properties and methods that allows recording sequences of keyboard commands and play back them later.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IRecordPlayBack.PlayBackMacro">
            <summary>
            When implemented by a class, repeats the stored command sequence.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IRecordPlayBack.StartMacroRecording">
            <summary>
            When implemented by a class, starts recording the command sequence.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IRecordPlayBack.StopMacroRecording">
            <summary>
            When implemented by a class, stops recording the command sequence.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IRecordPlayBack.PauseMacroRecording">
            <summary>
            When implemented by a class, suspends recording the command sequence.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IRecordPlayBack.ResumeMacroRecording">
            <summary>
            When implemented by a class, resumes recording the command sequence.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IRecordPlayBack.ToggleMacroRecording">
            <summary>
            When implemented by a class, toggles recording the command sequence.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IRecordPlayBack.SaveMacros(System.IO.Stream)">
            <summary>
            When implemented by a class, saves the macro records to the given stream in xml format.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IRecordPlayBack.SaveMacros(System.IO.TextWriter)">
            <summary>
            When implemented by a class, saves the macro records to the given stream in xml format.
            </summary>
            <param name="writer">The TextWriter object to write macros to stream.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IRecordPlayBack.SaveMacros(System.String)">
            <summary>
            When implemented by a class, saves the macro records to the given file in xml format.
            </summary>
            <param name="fileName">Name of file to save macros.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IRecordPlayBack.LoadMacros(System.IO.Stream)">
            <summary>
            When implemented by a class, loads the macro records fromt the given stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IRecordPlayBack.LoadMacros(System.IO.TextReader)">
            <summary>
            When implemented by a class, loads the macro records fromt the given stream.
            </summary>
            <param name="reader">The TextReader object to read macros from stream.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IRecordPlayBack.LoadMacros(System.String)">
            <summary>
            When implemented by a class, loads the macro records fromt the given file.
            </summary>
            <param name="fileName">Name of file to load macros.</param>
        </member>
        <member name="P:Stimulsoft.Editor.IRecordPlayBack.MacroRecording">
            <summary>
            When implemented by a class, gets or sets a boolean value indicating whether Edit control should record sequence of keyboard commands. 
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IRecordPlayBack.MacroSuspendend">
            <summary>
            When implemented by a class, gets or sets a boolean value indicating whether recording is suspendend. 
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IRecordPlayBack.MacroRecords">
            <summary>
            When implemented by a class, represents an array containing keyboard commands.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IAutoCorrect">
            <summary>
            Represents properties and methods allowing to auto correct words when typing.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IAutoCorrect.HasAutoCorrection(System.String,System.String@)">
            <summary>
            When implemented by a class, checks whether specified word has correction. 
            </summary>
            <param name="word">Word that should be corrected.</param>
            <param name="correctWord">Receives a corrected word.</param>
            <returns>True if word has correction; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.IAutoCorrect.AutoCorrectDelimiters">
            <summary>
            When implemented by a class, gets or sets an array of chars that used as word delimiters.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IAutoCorrect.AutoCorrection">
            <summary>
            When implemented by a class, gets or sets a boolean value indicating whether to auto correct words being typed.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.IAutoCorrect.AutoCorrect">
            <summary>
            When implemented by a class, occurs when control tries to auto correct word being typed.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IEditColors">
            <summary>
            Represents a collection of colors that are used by Edit control to display it's content in readonly an disabled states.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditColors.ReadonlyForeColor">
            <summary>
            When implemented by a class, gets or sets foreground color used in the readonly state.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditColors.ReadonlyBackColor">
            <summary>
            When implemented by a class, gets or sets background color used in the readonly state.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditColors.DisabledForeColor">
            <summary>
            When implemented by a class, gets or sets foreground color used in the disabled state.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditColors.DisabledBackColor">
            <summary>
            When implemented by a class, gets or sets background color used in the disabled state.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ISplitView">
            <summary>
            Represents properties and methods allowing Edit control to visually split its content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISplitView.CanSplitHorz">
            <summary>
            When implemented by a class, indicates whether control can split its content horizontally.
            </summary>
            <returns>True if can split horizontally; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISplitView.CanSplitVert">
            <summary>
            When implemented by a class, indicates whether control can split its content vertically.
            </summary>
            <returns>True if can split vertically; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISplitView.CanUnsplitHorz">
            <summary>
            When implemented by a class, indicates whether control has horizontal split view.
            </summary>
            <returns>True if horizontal split view is visible; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISplitView.CanUnsplitVert">
            <summary>
            When implemented by a class, indicates whether control has vertical split view.
            </summary>
            <returns>True if vertical split view is visible; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISplitView.SplitViewHorz">
            <summary>
            When implemented by a class, splits its content horizontally.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISplitView.SplitViewVert">
            <summary>
            When implemented by a class, splits its content vertically.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISplitView.UnsplitViewHorz">
            <summary>
            When implemented by a class, removes horizontal split view.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISplitView.UnsplitViewVert">
            <summary>
            When implemented by a class, removes vertical split view.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISplitView.VertSplitEdit">
            <summary>
            When implemented by a class, represents an vertical split view control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISplitView.HorzSplitEdit">
            <summary>
            When implemented by a class, represents horizontal split view control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISplitView.VertSplitter">
            <summary>
            When implemented by a class, represents a vertical Splitter control allowing to split Edit content vertically.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISplitView.HorzSplitter">
            <summary>
            When implemented by a class, represents a horizontal Splitter control allowing to split Edit content horizontally.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.ISplitView.SplitHorz">
            <summary>
            When implemented by a class, occurs when user splits Edit control horizontally.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.ISplitView.SplitVert">
            <summary>
            When implemented by a class, occurs when user splits Edit control vertically.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.ISplitView.UnsplitHorz">
            <summary>
            When implemented by a class, occurs when horizontal split view is removed.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.ISplitView.UnsplitVert">
            <summary>
            When implemented by a class, occurs when vertical split view is removed.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IEditPage">
            <summary>
            Represents properties and methods to describe and manipulate with a particular page within Edit control content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPage.Assign(Stimulsoft.Editor.IEditPage)">
            <summary>
            When implemented by a class, copies the contents of another <c>IEditPage</c> object.
            </summary>
            <param name="source">Specifies <c>IEditPage</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPage.Update">
            <summary>
            When implemented by a class, recalculates page bounds and content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPage.Invalidate">
            <summary>
            When implemented by a class, invalidates the page.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPage.BeginUpdate">
            <summary>
            When implemented by a class, prevents page updating until calling <c>IEditPage.EndUpdate</c> method.
            </summary>
            <returns>Number of page updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPage.EndUpdate">
            <summary>
            When implemented by a class, re-enables page updating, that was turn of by calling <c>IEditPage.BeginUpdate</c> method.
            </summary>
            <returns>Number of page updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPage.Paint(Stimulsoft.Editor.IPainter)">
            <summary>
            When implemented by a class, draws <c>IEditPage</c> object on specified graphic surface.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPage.GetBounds(System.Boolean)">
            <summary>
            When implemented by a class, retrieves a bounds of the <c>IEditPage</c>.
            </summary>
            <param name="includeSpace">Specifies whether to include whitespace area.</param>
            <returns>Rectangle that bounded this <c>IEditPage</c>.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPage.PageSize">
            <summary>
            When implemented by a class, gets or sets size (width and height) of this <c>IEditPage</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPage.Margins">
            <summary>
            When implemented by a class, gets or sets margins specifying offsets of editing area of this <c>IEditPage</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPage.PageKind">
            <summary>
            When implemented by a class, gets or sets kind of the page specifying standard paper size.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPage.Landscape">
            <summary>
            When implemented by a class, gets or sets boolean value that indicates the page orientation (landscape or portrait).
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPage.HorzOffset">
            <summary>
            When implemented by a class, gets or sets a horizontal indentation between pages.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPage.VertOffset">
            <summary>
            When implemented by a class, gets or sets a vertical indentation between pages.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPage.IsFirstPage">
            <summary>
            When implemented by a class, indicates whether this page is the first page within the Edit control pages collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPage.IsLastPage">
            <summary>
            When implemented by a class, indicates whether this page is the last page within the Edit control pages collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPage.PrevPage">
            <summary>
            When implemented by a class, represents a previous <c>IEditPage</c> within the Edit control pages collection.
            </summary>
            <remarks>Returns null if the page represents the first page.</remarks>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPage.NextPage">
            <summary>
            When implemented by a class, represents a next <c>IEditPage</c> within the Edit control pages collection.
            </summary>
            <remarks>Returns null if the page represents the last page.</remarks>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPage.Header">
            <summary>
            When implemented by a class, represents <c>IPageHeader</c> specifying page header.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPage.Footer">
            <summary>
            When implemented by a class, represents <c>IPageHeader</c> specifying page footer.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPage.Origin">
            <summary>
            When implemented by a class, represents page's absolute screen coordinate of the page within Edit control. 
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPage.BoundsRect">
            <summary>
            When implemented by a class, represents a bounding area of the page withing Edit control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPage.ClientRect">
            <summary>
            When implemented by a class, represents a client(editing) area of the page within Edit control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPage.StartLine">
            <summary>
            When implemented by a class, represents starting line of the page within Edit control content in display coordinates.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPage.EndLine">
            <summary>
            When implemented by a class, represents ending line of the page within Edit control content in display coordinates.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPage.Index">
            <summary>
            When implemented by a class, represents ordinal number of page within the Edit control pages collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPage.PaintNumber">
            <summary>
            When implemented by a class, get or sets a boolean value that indicates whether control should paint it's number at the bottom of page.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPage.UsePrinterSettings">
            <summary>
            When implemented by a class, get or sets a boolean value that indicates whether control should use printer settings for calcuating page size, margin and orientation.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IEditPages">
            <summary>
            Represents a collection of pages in the Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.BeginUpdate">
            <summary>
            When implemented by a class, prevents pages updating until calling <c>IEditPages.EndUpdate</c> method.
            </summary>
            <returns>Number of pages updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.EndUpdate">
            <summary>
            When implemented by a class, re-enables pages updating, that was turn of by calling <c>IEditPages.BeginUpdate</c> method.
            </summary>
            <returns>Number of pages updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.Update">
            <summary>
            When implemented by a class, recalculates bounds of all pages in the collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.Update(Stimulsoft.Editor.IEditPage)">
            <summary>
            When implemented by a class, recalculates bounds of the specified page.
            </summary>
            <param name="page">Page to update.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.Update(Stimulsoft.Editor.IEditPage,System.Boolean)">
            <summary>
            When implemented by a class, recalculates bounds and updates content of specified page.
            </summary>
            <param name="page">Page to update.</param>
            <param name="changed">Indicates that page should recalculate it's content.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.Add">
            <summary>
            When implemented by a class, adds a new <c>IEditPage</c> to the collection.
            </summary>
            <returns><c>IEditPage</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.Add(Stimulsoft.Editor.IEditPage)">
            <summary>
            When implemented by a class, adds specified <c>IEditPage</c> to the collection.
            </summary>
            <param name="page"><c>IEditPage</c> to add.</param>
            <returns>Index of <c>IEditPage</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.Remove(Stimulsoft.Editor.IEditPage)">
            <summary>
            When implemented by a class, removes specified <c>IEditPage</c> from the collection.
            </summary>
            <param name="page"><c>IEditPage</c> to remove.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.Clear">
            <summary>
            When implemented by a class, removes all items from the pages collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.GetPageIndexAt(System.Drawing.Point)">
            <summary>
            When implemented by a class, finds page at specified display position.
            </summary>
            <param name="position">Position in display coordinates to obtain the page.</param>
            <returns>Ordinal number of found page within the collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.GetPageIndexAt(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, finds page at specified display position.
            </summary>
            <param name="x">X-coordinate of the position (in display coordinates) to find the page.</param>
            <param name="y">Y-coordinate of the position (in display coordinates) to find the page.</param>
            <returns>Ordinal number of found page within the collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.GetPageIndexAtPoint(System.Drawing.Point)">
            <summary>
            When implemented by a class, finds page at specified screen position.
            </summary>
            <param name="position">Position in screen coordinates to obtain the page.</param>
            <returns>Ordinal number of found page within the collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.GetPageIndexAtPoint(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, finds page at specified screen position.
            </summary>
            <param name="x">X-coordinate of the position (in screen coordinates) to find the page.</param>
            <param name="y">Y-coordinate of the position (in screen coordinates) to find the page.</param>
            <returns>Ordinal number of found page within the collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.GetPageIndexAtCursor">
            <summary>
            When implemented by a class, finds page at caret position.
            </summary>
            <returns>Ordinal number of found page within the collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.GetPageAt(System.Drawing.Point)">
            <summary>
            When implemented by a class, finds page at specified display position.
            </summary>
            <param name="position">Position in display coordinates to obtain the page.</param>
            <returns><c>IEditPage</c> found.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.GetPageAt(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, finds page at specified display position.
            </summary>
            <param name="x">X-coordinate of the position (in display coordinates) to find the page.</param>
            <param name="y">Y-coordinate of the position (in display coordinates) to find the page.</param>
            <returns><c>IEditPage</c> containing specified position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.GetPageAtPoint(System.Drawing.Point)">
            <summary>
            When implemented by a class, finds page at specified screen position.
            </summary>
            <param name="position">Position in screen coordinates to obtain the page.</param>
            <returns><c>IEditPage</c> containing specified position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.GetPageAtPoint(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, finds page at specified screen position.
            </summary>
            <param name="x">X-coordinate of the position (in screen coordinates) to find the page.</param>
            <param name="y">Y-coordinate of the position (in screen coordinates) to find the page.</param>
            <returns><c>IEditPage</c> containing specified position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.GetPageAtCursor">
            <summary>
            When implemented by a class, finds page at caret position.
            </summary>
            <returns><c>IEditPage</c> containing caret.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.Paint(Stimulsoft.Editor.IPainter,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, draws pages collection on the graphic surface.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="rect">Rectangular area of pages collection to draw on.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.InitDefaultPageSettings(System.Drawing.Printing.PageSettings)">
            <summary>
            When implemented by a class, initializes page settings with default values.
            </summary>
            <param name="settings">Specifies page settings to initialize.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.CancelDragging">
            <summary>
            When implemented by a class, cancels dragging operation of the page ruler.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.ResetPageType">
            <summary>
            When implemented by a class, resets <c>PageType</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.ResetBackColor">
            <summary>
            When implemented by a class, resets <c>BackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.ResetBorderColor">
            <summary>
            When implemented by a class, resets <c>BorderColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.ResetDisplayWhiteSpace">
            <summary>
            When implemented by a class, resets <c>DisplayWhiteSpace</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.ResetRulerUnits">
            <summary>
            When implemented by a class, resets <c>RulerUnits</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.ResetRulerOptions">
            <summary>
            When implemented by a class, resets <c>RulerOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.ResetRulers">
            <summary>
            When implemented by a class, resets <c>Rulers</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.ResetRulerBackColor">
            <summary>
            When implemented by a class, resets <c>RulerBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IEditPages.ResetRulerIndentBackColor">
            <summary>
            When implemented by a class, resets <c>RulerIndentBackColor</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPages.Items">
            <summary>
            When implemented by a class, represents a collection of <c>IEditPage</c> objects.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPages.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to individual <c>IEditPage</c> stored in the collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPages.PageType">
            <summary>
            When implemented by a class, gets or sets value specifying the way of viewing Edit control's content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPages.PageKind">
            <summary>
            Gets or sets kind of the pages specifying standard paper size.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPages.DefaultPage">
            <summary>
            When implemented by a class, gets or sets properties for default <c>IEditPage</c> object in the pages collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPages.BackColor">
            <summary>
            When implemented by a class, gets or sets a background color of each page in the collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPages.BorderColor">
            <summary>
            When implemented by a class, gets or sets a border color of each page in the collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPages.DisplayWhiteSpace">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether Edit control should draw whitespace area between pages.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPages.Count">
            <summary>
            When implemented by a class, represents a number of pages in the collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPages.Height">
            <summary>
            When implemented by a class, represents total height of all pages in the collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPages.Width">
            <summary>
            When implemented by a class, represents pages width.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPages.VertRuler">
            <summary>
            When implemented by a class, represents <c>IEditRuler</c> object used as a vertical page ruler.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPages.HorzRuler">
            <summary>
            When implemented by a class, represents <c>IEditRuler</c> object used as a horizontal page ruler.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPages.RulerUnits">
            <summary>
            When implemented by a class, gets or sets measurement units of the pages rulers.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPages.RulerOptions">
            <summary>
            When implemented by a class, gets or sets options of the pages rulers.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPages.Rulers">
            <summary>
            When implemented by a class, gets or sets the rulers displayed withing Edit control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPages.ApplyRulerToAllPages">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates that changing of rulers indentation applies to all pages rather than to current page.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPages.RulerBackColor">
            <summary>
            When implemented by a class, gets or sets background color of the pages rulers.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPages.RulerIndentBackColor">
            <summary>
            When implemented by a class, gets or sets background color of the indentations parts of the pages rulers.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditPages.Transparent">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether Edit control should draw background around the pages.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.IEditPages.DrawHeader">
            <summary>
            When implemented by a class, occurs when header or footer part of each page is drawing.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IEditRuler">
            <summary>
            Represents properties and methods of Edit control's ruler.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IEditRuler.Assign(Stimulsoft.Editor.IEditRuler)">
            <summary>
            When implemented by a class, copies the contents of another <c>IEditRuler</c> object.
            </summary>
            <param name="source">Specifies <c>IEditRuler</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IEditRuler.CancelDragging">
            <summary>
            When implemented by a class, cancels dragging operation.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IEditRuler.ResetOptions">
            <summary>
            When implemented by a class, resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IEditRuler.ResetUnits">
            <summary>
            When implemented by a class, resets the <c>Units</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IEditRuler.ResetIndentBackColor">
            <summary>
            When implemented by a class, resets the <c>IndentBackColor</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditRuler.IndentBackColor">
            <summary>
            When implemented by a class, gets or sets background color of indentation parts of the ruler.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditRuler.Vertical">
            <summary>
            When implemented by a class, gets or sets a boolean value indicating whether ruler has vertical or horizontal direction.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditRuler.PageStart">
            <summary>
            When implemented by a class, gets or sets beginning of the page part of the ruler.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditRuler.PageWidth">
            <summary>
            When implemented by a class, gets or sets width, in pixels between left and right indentations indicating width of the page.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditRuler.RulerStart">
            <summary>
            When implemented by a class, gets or sets position, in pixels, of left indentation specifying start of the page.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditRuler.RulerWidth">
            <summary>
            When implemented by a class, gets or sets ruler width.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditRuler.MarkWidth">
            <summary>
            When implemented by a class, gets or sets default distance between adjacent marks.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditRuler.Units">
            <summary>
            When implemented by a class, gets or sets ruler measurement units.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditRuler.Options">
            <summary>
            When implemented by a class, gets or sets <c>RulerOptions</c> determining ruler behaviour.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IEditRuler.IsDragging">
            <summary>
            When implemented by a class, indicates whether some of ruler indentation is in dragging state.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.IEditRuler.Change">
            <summary>
            When implemented by a class, occurs when some of ruler indentations has changed its position due to the dragging operation.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IBookMark">
            <summary>
            Represents properties and methods to store individual boomark within Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMark.Assign(Stimulsoft.Editor.IBookMark)">
            <summary>
            When implemented by a class, copies the contents of another <c>IBookMark</c> object.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Stimulsoft.Editor.IBookMark.Line">
            <summary>
            When implemented by a class, gets Y-coordinate of the position (index of line) within the Edit control's text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IBookMark.Pos">
            <summary>
            When implemented by a class, gets X-coordinate of the bookmark position (position of character in a line) within the control's text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IBookMark.Index">
            <summary>
            When implemented by a class, gets an integer value that specifies ordinal number of the bookmark.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IBookMark.Position">
            <summary>
            When implemented by a class, gets position of the bookmark within the control's text. Y-Coordinate represents index of line and X-Coordinate - index of character in this line.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IBookMarkEx">
            <summary>
            Represents a bookmark with extended possibilities.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IBookMarkEx.Name">
            <summary>
            When implemented by a class, gets or sets a string value that specifies the name of this <c>IBookMarkEx</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IBookMarkEx.Description">
            <summary>
            When implemented by a class, gets or sets a string value that specifies short description of this <c>IBookMarkEx</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IBookMarkEx.Url">
            <summary>
            When implemented by a class, gets or sets an Url address of this <c>IBookMarkEx</c>.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IBookMarks">
            <summary>
            Represents properties and methods to provide an indexed access to individual <c>IBookMark</c> object.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMarks.Assign(Stimulsoft.Editor.IBookMarks)">
            <summary>
            When implemented by a class, copies the contents from another <c>IBookMarks</c> object.
            </summary>
            <param name="source">Specifies <c>IBookMarks</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMarks.GetBookMark(System.Int32)">
            <summary>
            When implemented by a class, finds the first item in the bookmark collection located within the specified text line.
            </summary>
            <param name="line">Index of the text line.</param>
            <returns>Index of the found bookmark.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMarks.GetBookMark(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            When implemented by a class, finds the first item in the bookmark collection located within the specified scope.
            </summary>
            <param name="startPoint">The Point value that specifies start position to search.</param>
            <param name="endPoint">The Point value that specifies end position to search.</param>
            <returns>Index of the found bookmark.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMarks.GetBookMarks(System.Drawing.Point,System.Drawing.Point,System.Collections.IList)">
            <summary>
            When implemented by a class, finds all items in the bookmark collection located within the specified scope.
            </summary>
            <param name="startPoint">The Point value that specifies start position to search.</param>
            <param name="endPoint">The Point value that specifies end position to search.</param>
            <param name="list">Represents the collection of the bookmarks located within the specified scope.</param>
            <returns>Index of the located bookmarks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMarks.FindBookMark(System.Int32)">
            <summary>
            When implemented by a class, finds the bookmark with specified Index property within bookmark collection.
            </summary>
            <param name="bookMark">Specifies bookmark Index.</param>
            <returns><c>IBookMark</c> object found.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMarks.FindBookMark(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, finds the bookmark with specified Index in a specific line within bookmark collection.
            </summary>
            <param name="bookMark">Specifies bookmark Index.</param>
            <param name="line">Specifies line Index.</param>
            <returns><c>index of bookmark within BookMarks collection</c> object found.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMarks.FindBookMark(System.String)">
            <summary>
            When implemented by a class, finds the bookmark with specified Name property within bookmark collection.
            </summary>
            <param name="name">Specifies bookmark name.</param>
            <returns><c>IBookMark</c> object found.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMarks.SetBookMark(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, sets the bookmark with specified index to the position specifed by Line parameter.
            </summary>
            <param name="line">The integer value that specifies index of the text line.</param>
            <param name="bookMark">The integer value that specifies bookmark index.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMarks.SetBookMark(System.Drawing.Point,System.Int32)">
            <summary>
            When implemented by a class, sets the bookmark with specified index to the specified position.
            </summary>
            <param name="position">Specifies position of the bookmark.</param>
            <param name="bookMark">The integer value that specifies index of the bookmark.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMarks.SetBookMark(Stimulsoft.Editor.IBookMark)">
            <summary>
            When implemented by a class, sets bookmark specified by bookMark parameter.
            </summary>
            <param name="bookMark">Specifies bookmark to set.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMarks.SetBookMark(System.Drawing.Point,System.Int32,System.String,System.String,System.String)">
            <summary>
            When implemented by a class, sets the bookmark with specified index, name, description and url to the position specified by Point parameter.
            </summary>
            <param name="position">Specifies position of the <c>BookMark</c>.</param>
            <param name="bookMark">The integer value that specifies <c>BookMark</c> index.</param>
            <param name="name">The string value that specifies <c>BookMark</c> name.</param>
            <param name="description">The string value that specifies <c>BookMark</c> description.</param>
            <param name="url">The string value that specifies <c>BookMark</c> url.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMarks.FindBookMark(System.Int32,System.Drawing.Point@)">
            <summary>
            When implemented by a class, finds the bookmark with specified Index property within bookmark collection.
            </summary>
            <param name="bookMark">Specifies bookmark index.</param>
            <param name="position">Receives position(index of character and line) of the found bookmark.</param>
            <returns>True if the bookmark successfully found; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMarks.ToggleBookMark(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, toggles (sets or removes) bookmark with specified Index property at the specified line.
            </summary>
            <param name="line">Index of line to toggle.</param>
            <param name="bookMark">Specifies Index property of the bookmark to toggle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMarks.ToggleBookMark(System.Drawing.Point,System.Int32)">
            <summary>
            When implemented by a class, toggles (sets or removes) bookmark with specified Index property at the specified position.
            </summary>
            <param name="position">Specifies position of the bookmark (index of character and current line).</param>
            <param name="bookMark">Specifies Index property of the bookmark to toggle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMarks.ToggleBookMark(Stimulsoft.Editor.IBookMark)">
            <summary>
            When implemented by a class, toggles (sets or removes) specified bookmark.
            </summary>
            <param name="bookMark">Specifies bookmark to toggle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMarks.ToggleBookMark(System.Drawing.Point,System.Int32,System.String,System.String,System.String)">
            <summary>
            When implemented by a class, toggles (sets or removes) the bookmark with specified index, name, description and url to the position specified by Point parameter.
            </summary>
            <param name="position">Specifies position of the bookmark to toggle.</param>
            <param name="bookMark">Specifies <c>BookMark</c> index.</param>
            <param name="name">Specifies <c>BookMark</c> name.</param>
            <param name="description">Specifies <c>BookMark</c> description.</param>
            <param name="url">Specifies <c>BookMark</c> url.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMarks.ToggleBookMark(System.Int32)">
            <summary>
            When implemented by a class, toggles (sets or removes) bookmark with specified Index property at the current line.
            </summary>
            <param name="bookMark"></param>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMarks.ToggleBookMark">
            <summary>
            When implemented by a class, toggles (sets or removes) an unnumbered bookmark on the current line in the control's text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMarks.ClearBookMark(System.Int32)">
            <summary>
            When implemented by a class, finds the bookmark by given index and removes its from bookmark collection.
            </summary>
            <param name="bookMark">Index of the bookmark in the bookmark collection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMarks.ClearBookMark(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, finds the bookmark by given index in a given line and removes its from bookmark collection.
            </summary>
            <param name="line">Index of line in lines collection.</param>
            <param name="bookMark">Index of the bookmark in the bookmark collection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMarks.ClearBookMarks(System.Int32)">
            <summary>
            When implemented by a class, removes all bookmarks from the specified line.
            </summary>
            <param name="line">The integer value that specifies index of the text line.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMarks.ClearAllBookMarks">
            <summary>
            When implemented by a class, removes all items from the bookmark collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMarks.NextBookMark">
            <summary>
            When implemented by a class, returns the minimal possible value of the bookmark's Index property of the new bookmark.
            </summary>
            <returns>Bookmark index.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMarks.GotoBookMark(System.Int32)">
            <summary>
            When implemented by a class, moves Edit control's caret to the location of the specified bookmark.
            </summary>
            <param name="bookMark">Specifies Index property of the bookmark.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMarks.GotoNextBookMark">
            <summary>
            When implemented by a class, moves Edit control's caret to the location of the next unnumbered bookmark.
            </summary>
            <remarks>If the currently selected bookmark is the last bookmark within the bookmarks collection the method moves to the first bookmark.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMarks.GotoPrevBookMark">
            <summary>
            When implemented by a class, moves Edit control's caret to the location of the previous unnumbered bookmark.
            </summary>
            <remarks>If the currently selected bookmark is the first bookmark within the bookmarks collection the method moves to the last bookmark.</remarks>
        </member>
        <member name="P:Stimulsoft.Editor.IBookMarks.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to individual <c>IBookMark</c> stored in the collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IBookMarks.ClearAllUnnumberedBookmarks">
            <summary>
            When implemented by a class, removes all unnumbered bookmarks from the bookmarks collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ILineStyle">
            <summary>
            Represents properties and methods for a particular style of the line in Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ILineStyle.Assign(Stimulsoft.Editor.ILineStyle)">
            <summary>
            When implemented by a class, copies the contents from another <c>ILineStyle</c> object.
            </summary>
            <param name="source">Specifies <c>ILineStyle</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ILineStyle.ResetForeColor">
            <summary>
            When implemented by a class, resets the <c>ForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ILineStyle.ResetBackColor">
            <summary>
            When implemented by a class, resets the <c>BackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ILineStyle.ResetPenColor">
            <summary>
            When implemented by a class, resets the <c>PenColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ILineStyle.ResetImageIndex">
            <summary>
            When implemented by a class, resets the <c>ImageIndex</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ILineStyle.ResetOptions">
            <summary>
            When implemented by a class, resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILineStyle.Name">
            <summary>
            When implemented by a class, gets or sets name of the <c>ILineStyle</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILineStyle.ForeColor">
            <summary>
            When implemented by a class, gets or sets foreground color of the <c>ILineStyle</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILineStyle.BackColor">
            <summary>
            When implemented by a class, gets or sets background color of the <c>ILineStyle</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILineStyle.PenColor">
            <summary>
            When implemented by a class, gets or sets pen color of the <c>ILineStyle</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILineStyle.ImageIndex">
            <summary>
            When implemented by a class, gets or sets the index of the image displayed for the <c>ILineStyle</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILineStyle.Options">
            <summary>
            When implemented by a class, gets or sets display options for the <c>ILineStyle</c>.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ILineStyles">
            <summary>
            Represents properties and methods for a collection that binds line styles to individual lines within Edit control content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ILineStyles.Assign(Stimulsoft.Editor.ILineStyles)">
            <summary>
            When implemented by a class, copies the contents from another <c>ILineStyles</c> object.
            </summary>
            <param name="source">Specifies <c>ILineStyles</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ILineStyles.RemoveLineStyle(System.Int32)">
            <summary>
            When implemented by a class, removes the first line style at the specified line.
            </summary>
            <param name="line">Index of the text line.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ILineStyles.ToggleLineStyle(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, sets or removes line style at the specified line.
            </summary>
            <param name="line">Index of line to toggle line style.</param>
            <param name="style">Index of style.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ILineStyles.ToggleLineStyle(System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, sets or removes line style at the specified line.
            </summary>
            <param name="line">Index of line to toggle line style.</param>
            <param name="priority">Priority of the line style. This parameter is usefull only for line styles having image indexes</param>
            <param name="style">Index of style.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ILineStyles.GetLineStyle(System.Int32)">
            <summary>
            When implemented by a class, finds the first element in the line style collection located at the specified text line.
            </summary>
            <param name="index">Index of the text line.</param>
            <returns>Index of the found line style if the search succeed; otherwise -1.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ILineStyles.GetLineStyles(System.Int32,System.Collections.IList)">
            <summary>
            When implemented by a class, finds all linestyles in the <c>ILineStyles</c> collection located inside specified line.
            </summary>
            <param name="line">The index of the line to find.</param>
            <param name="list">Represents the collection of the bookmarks located within the specified range.</param>
            <returns>The number of the linestyles located within the specified range.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ILineStyles.SetLineStyle(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, sets given line style to the specified line.
            </summary>
            <param name="index">Index of the text line.</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ILineStyles.SetLineStyle(System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, sets given line style to the specified line.
            </summary>
            <param name="line">Index of the text line.</param>
            <param name="priority">Priority of the line style. This parameter is usefull only for line styles having image indexes</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ILineStyles.SetLineStyle(System.Drawing.Point,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, sets given line style to the specified line.
            </summary>
            <param name="position">Position of the line style.</param>
            <param name="priority">Priority of the line style. This parameter is usefull only for line styles having image indexes</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ILineStyles.SetLineStyle(Stimulsoft.Editor.IRange,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, sets given line style to the specified line.
            </summary>
            <param name="range">Range where line style is defined.</param>
            <param name="priority">Priority of the line style. This parameter is usefull only for line styles having image indexes</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="T:Stimulsoft.Editor.ILineStylesEx">
            <summary>
            Represents properties and methods for a collection of the <c>ILineStyle</c> objects each one specifying a particular style of the line in Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ILineStylesEx.Assign(Stimulsoft.Editor.ILineStylesEx)">
            <summary>
            When implemented by a class, copies the contents from another <c>ILineStylesEx</c> object.
            </summary>
            <param name="source">Specifies <c>ILineStylesEx</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ILineStylesEx.IndexOfName(System.String)">
            <summary>
            When implemented by a class, returns the zero-based index of the first occurrence of the specified Name in the line style collection.
            </summary>
            <param name="name">Name of line style to locate.</param>
            <returns>Index of the style found.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ILineStylesEx.AddLineStyle">
            <summary>
            When implemented by a class, adds a new <c>ILineStyle</c> to the collection.
            </summary>
            <returns>Index of the added element.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ILineStylesEx.AddLineStyle(System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Int32,Stimulsoft.Editor.LineStyleOptions)">
            <summary>
            When implemented by a class, adds a new <c>ILineStyle</c> with specified parameters to the collection.
            </summary>
            <param name="name">Name of new <c>ILineStyle</c>.</param>
            <param name="foreColor">Foreground color of new <c>ILineStyle</c>.</param>
            <param name="backColor">Background color of new <c>ILineStyle</c>.</param>
            <param name="penColor">Pen color of new <c>ILineStyle</c>.</param>
            <param name="imageIndex">Image index of new <c>ILineStyle</c>.</param>
            <param name="options">Options of new <c>ILineStyle</c>.</param>
            <returns>Index of the added element in the <c>ILineStyle</c> collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ILineStylesEx.GetLineStyle(System.Int32)">
            <summary>
            When implemented by a class, returns <c>ILineStyle</c> within the line styles collection by its index.
            </summary>
            <param name="index">Index of <c>ILineStyle</c>.</param>
            <returns><c>ILineStyle</c> with specified Index property.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.ILineSeparator">
            <summary>
            Represents properties and methods used to separate lines and highlight current line within the Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ILineSeparator.Assign(Stimulsoft.Editor.ILineSeparator)">
            <summary>
            When implemented by a class, copies the contents from another <c>ILineSeparator</c> object.
            </summary>
            <param name="source">Specifies <c>ILineSeparator</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ILineSeparator.NeedHighlight">
            <summary>
            When implemented by a class, indicates whether Edit control owning the <c>ILineSeparator</c> need to highlight the current line.
            </summary>
            <returns>True if need; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ILineSeparator.NeedHide">
            <summary>
            When implemented by a class, indicates whether Edit control owning the <c>ILineSeparator</c> needs to hide highlighting of the current line when loosing input focus.
            </summary>
            <returns>True if need; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ILineSeparator.ResetOptions">
            <summary>
            When implemented by a class, resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ILineSeparator.ResetHighlightForeColor">
            <summary>
            When implemented by a class, resets the <c>HighlightForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ILineSeparator.ResetHighlightBackColor">
            <summary>
            When implemented by a class, resets the <c>HighlightBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ILineSeparator.ResetLineColor">
            <summary>
            When implemented by a class, resets the <c>LineColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ILineSeparator.ResetContentDividerColor">
            <summary>
            When implemented by a class, resets the <c>ContentDividerColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ILineSeparator.TempHighlightLine(System.Int32)">
            <summary>
            When implemented by a class, temporary highlights specifies line until Edit control state changed.
            </summary>
            <param name="index">Index of line to highlight.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ILineSeparator.TempUnhighlightLine">
            <summary>
            Removes highlightning from temporary highlighted line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILineSeparator.Options">
            <summary>
            When implemented by a class, gets or sets a set of flags customizing appearance and behaviour of the <c>ILineSeparator</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILineSeparator.HighlightBackColor">
            <summary>
            When implemented by a class, gets or sets a background color of highlighted line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILineSeparator.HighlightForeColor">
            <summary>
            When implemented by a class, gets or sets a foreground color of highlighted line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILineSeparator.LineColor">
            <summary>
            When implemented by a class, gets or sets color of horizontal lines between particular lines in the Edit control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILineSeparator.ContentDividerColor">
            <summary>
            When implemented by a class, gets or sets color of horizontal lines between text sections in the Edit control.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ISelection">
            <summary>
            Contains properties and methods used to manage selected part of the Edit control's text content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.Assign(Stimulsoft.Editor.ISelection)">
            <summary>
            When implemented by a class, copies the contents from another <c>ISelection</c> object.
            </summary>
            <param name="source">Specifies <c>ISelection</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SetSelection(Stimulsoft.Editor.SelectionType,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, sets new selection region with specified selection type.
            </summary>
            <param name="selectionType">New selection type.</param>
            <param name="selectionRect">New selected rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SetSelection(Stimulsoft.Editor.SelectionType,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            When implemented by a class, sets new selection region with specified selection type.
            </summary>
            <param name="selectionType">New selection type.</param>
            <param name="selectionStart">Left-top corner of the selected rectange.</param>
            <param name="selectionEnd">Right-bottom corner of the selected rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectCharLeft">
            <summary>
            When implemented by a class, increases selected text to one character at the left side of the selection region.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectCharLeft(Stimulsoft.Editor.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to one character at the left side of the selection region and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectCharRight">
            <summary>
            When implemented by a class, increases selected text to one character at the right side of the selection region.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectCharRight(Stimulsoft.Editor.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to one character at the right side of the selection region and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectWordLeft">
            <summary>
            When implemented by a class, increases selected text to the word located at the left side of the current position in the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectWordLeft(Stimulsoft.Editor.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to the word located at the left side of the current position in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectWordRight">
            <summary>
            When implemented by a class, increases selected text to the word located at the right side of the current position in the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectWordRight(Stimulsoft.Editor.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to the word located at the right side of the current position in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectLineUp">
            <summary>
            When implemented by a class, increases selected text to the preceding line in the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectLineUp(Stimulsoft.Editor.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to the preceding line in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectLineDown">
            <summary>
            When implemented by a class, increases selected text to the following line in the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectLineDown(Stimulsoft.Editor.SelectionType)">
            <summary>
             When implemented by a class, increases selected text to the following line in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectPageUp">
            <summary>
            When implemented by a class, increases selected text to the one page up in the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectPageUp(Stimulsoft.Editor.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to the one page up in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectPageDown">
            <summary>
            When implemented by a class, increases selected text to the one page down in the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectPageDown(Stimulsoft.Editor.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to the one page down in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectScreenTop">
            <summary>
            When implemented by a class, increases selected text to the begin of screen.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectScreenTop(Stimulsoft.Editor.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to the begin of the screen and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectScreenBottom">
            <summary>
            When implemented by a class, increases selected text to the end of screen.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectScreenBottom(Stimulsoft.Editor.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to the end of the screen and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectLineBegin">
            <summary>
            When implemented by a class, selects from current position to the beginning of current line in the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectLineBegin(Stimulsoft.Editor.SelectionType)">
            <summary>
            When implemented by a class, selects from current position to the beginning of current line in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectLineEnd">
            <summary>
            When implemented by a class, selects from current position to the end of current line in the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectLineEnd(Stimulsoft.Editor.SelectionType)">
            <summary>
            When implemented by a class, selects from current position to the end of current line in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectFileBegin">
            <summary>
            When implemented by a class, increases selected text to beginning of the control's content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectFileBegin(Stimulsoft.Editor.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to beginning of the control's content and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectFileEnd">
            <summary>
            When implemented by a class, increases selected text to end of the control's content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectFileEnd(Stimulsoft.Editor.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to end of the control's content and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectLine">
            <summary>
            When implemented by a class, selects entire line at the current position in the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectWord">
            <summary>
            When implemented by a class, selects word at the current position in the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectAll">
            <summary>
            When implemented by a class, selects all lines in the control's content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectToOpenBrace">
            <summary>
            When implemented by a class, increases selected text to the prev open brace.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectToCloseBrace">
            <summary>
            When implemented by a class, increases selected text to the next closing brace.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectToBrace">
            <summary>
            When implemented by a class, increases selected text to the next open or closing brace.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.CommentSelection">
            <summary>
            When implemented by a class, marks the selected text as a comment, using the correct comment syntax for the programming language.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.UncommentSelection">
            <summary>
            When implemented by a class, removes the comment syntax from the selected text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SmartFormat">
            <summary>
            When implemented by a class, formats selected text using indentation obtained from Syntax Parser supporting <c>QWhale.Syntax.SyntaxOptions.SmartIndent</c>.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SmartFormat(System.Int32)">
            <summary>
            When implemented by a class, formats given line using indentation obtained from Syntax Parser supporting <c>QWhale.Syntax.SyntaxOptions.SmartIndent</c>.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SmartIndent">
            <summary>
            When implemented by a class, positions the cursor to the line indentation level, obtained from parser supporting <c>QWhale.Syntax.SyntaxOptions.SmartIndent</c> option when user presses Enter.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SmartFormatBlock">
            <summary>
            When implemented by a class, formats current syntax block using indentation obtained from Syntax Parser supporting <c>QWhale.Syntax.SyntaxOptions.SmartIndent</c>.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SmartFormatDocument">
            <summary>
            When implemented by a class, formats entire document using indentation obtained from Syntax Parser supporting <c>QWhale.Syntax.SyntaxOptions.SmartIndent</c>.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.Tabify">
            <summary>
            When implemented by a class, converts spaces to tabs in the current string within the selected area according to tab settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.UnTabify">
            <summary>
            When implemented by a class, converts tabs to spaces in the current string within the selected area according to tab settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.Indent">
            <summary>
            When implemented by a class, indents the selected text by one indentation level, inserting Tab or spaces to the beginning of the line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.UnIndent">
            <summary>
            When implemented by a class, unindents the selected text by one indentation level, deleting Tab or spaces from the beginning of the line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.LowerCase">
            <summary>
            When implemented by a class, converts all selected characters to the lower-case.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.UpperCase">
            <summary>
            When implemented by a class, converts all selected characters to the upper-case.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.Capitalize">
            <summary>
            When implemented by a class, changes first character of all words in selected text to upper-case and all another characters to lower-case.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.DeleteWhiteSpace">
            <summary>
            When implemented by a class, removes all space and tab characters from selected text. If no text selected - removes space and tab characters from current line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.ToggleOutlining">
            <summary>
            When implemented by a class, toggles expanded state for all <c>IOutlineRange</c> objects in outline collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.CollapseToDefinitions">
            <summary>
            When implemented by a class, collapses and expandes some outline section to get a quick overall view of the Edit content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SwapAnchor">
            <summary>
            When implemented by a class, change current position from beginning of selection rectangle to the end of selection rectangle or vice versa.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.CanCopy">
            <summary>
            When implemented by a class, indicates whether selected text can be copied to clipboard.
            </summary>
            <returns>True if the selection is not empty; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.CanCut">
            <summary>
            When implemented by a class, indicates whether selected text can be cut to the clipboard.
            </summary>
            <returns>True if the selection can be cut; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.CanPaste">
            <summary>
            When implemented by a class, indicates whether control can paste some text from the clipboard.
            </summary>
            <returns>True if the Clipboard has some text or unicode text;</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.Copy">
            <summary>
            When implemented by a class, copies <c>SelectedText</c> to the Clipboard.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.Cut">
            <summary>
            When implemented by a class, cuts <c>SelectedText</c> to the Clipboard.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.Paste">
            <summary>
            When implemented by a class, pastes content of the Clipboard to the Edit control, replacing selected text if needed.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.Delete">
            <summary>
            When implemented by a class, deletes selected text from the control.
            </summary>
            <returns>True if successfull</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.Clear">
            <summary>
            When implemented by a class, makes selection empty, without deleting its content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.Move(System.Drawing.Point,System.Boolean)">
            <summary>
            When implemented by a class, moves or copies selected text to the specified position.
            </summary>
            <param name="position">Position to move or copy.</param>
            <param name="deleteOrigin">Indicates whether method should move or copy selected text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.BeginUpdate">
            <summary>
            When implemented by a class, prevents the <c>ISelection</c> updating until the <c>EndUpdate</c> method is called.
            <seealso cref="!:QWhale.Editor.Selection.EndUpdate"/>
            </summary>
            <returns>Number of update locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.EndUpdate">
            <summary>
            When implemented by a class, re-enables selection updating turned off by calling <c>BeginUpdate</c> method.
            <seealso cref="!:QWhale.Editor.Selection.BeginUpdate"/>
            </summary>
            <returns>Number of update locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.DeleteLeft">
            <summary>
            When implemented by a class, deletes one character left to the cursor.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.DeleteRight">
            <summary>
            When implemented by a class, deletes one character right to the cursor.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.DeleteWordLeft">
            <summary>
            When implemented by a class, deletes one word left to the cursor.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.DeleteWordRight">
            <summary>
            When implemented by a class, deletes one word right to the cursor.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.DeleteLine">
            <summary>
            When implemented by a class, deletes current line if no text selected; otherwise deletes selected text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.CutLine">
            <summary>
            When implemented by a class, cuts current line to the clipboard if no text is selected; otherwise cuts selected text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.NewLine">
            <summary>
            When implemented by a class, inserts a line break at the current position of the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.NewLineAbove">
            <summary>
            When implemented by a class, inserts a line break above the current position of the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.NewLineBelow">
            <summary>
            When implemented by a class, inserts a line break below the current position of the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.ProcessEscape">
            <summary>
            When implemented by a class, processes escape presure: method deselects selected text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.ProcessTab">
            <summary>
            When implemented by a class, inserts new tab character or spaces if the selected text is empty; otherwise indents selected text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.ProcessShiftTab">
            <summary>
            When implemented by a class, moves current position to the previous tab stop if the selected text is empty; otherwise unindents selected text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.ToggleOverWrite">
            <summary>
            When implemented by a class, toggles the control's overwrite mode.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.InsertString(System.String)">
            <summary>
            When implemented by a class, inserts given text to the control's content deleting selected text if needed.
            </summary>
            <param name="s">Text to insert.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.CharTransponse">
            <summary>
            When implemented by a class, transposes character under the caret with the next character.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.WordTransponse">
            <summary>
            When implemented by a class, transposes word under the caret with the next word.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.LineTransponse">
            <summary>
            When implemented by a class, transposes line under the caret with the next line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.CanDrag(System.Drawing.Point)">
            <summary>
            When implemented by a class, indicates whether control can drag selected text.
            </summary>
            <param name="position">Specifies destination position of drag operation.</param>
            <returns>True if the control can drag selected text; otherwise false.</returns>
            <remarks>Control must not be in the read-only state to allow dragging selected text.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.DragTo(System.Drawing.Point,System.Boolean)">
            <summary>
            When implemented by a class, moves or copies selected text to the specified position.
            </summary>
            <param name="position">Position to move or copy.</param>
            <param name="deleteOrigin">Indicates whether method should move or copy selected text.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.ChangeBlock(Stimulsoft.Editor.StringEvent)">
            <summary>
            When implemented by a class, changes selected text by applying specified event to every line in the selected text.
            </summary>
            <param name="action">Specifies action to execute.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.ChangeBlock(Stimulsoft.Editor.StringEvent,System.Boolean,System.Boolean)">
            <summary>
            When implemented by a class, changes selected text by applying specified event to every line in the selected text.
            </summary>
            <param name="action">Specifies action to execute.</param>
            <param name="changeIfEmpty">Indicates that action should be performed for current line if selection is empty.</param>
            <param name="extendFirstLine">Specifies that action should applied to whole lines in the selested region rather than to the selected portion of the line.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectionToTextPoint(System.Drawing.Point)">
            <summary>
            When implemented by a class, converts given selection coordinate to the text coordinate.
            </summary>
            <param name="position">The selection coordinate Point to convert.</param>
            <returns>Point that represents the converted position, in text coordinates.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.TextToSelectionPoint(System.Drawing.Point)">
            <summary>
            When implemented by a class, converts given text coordinate to the selection coordinate.
            </summary>
            <param name="position">The text coordinate Point to convert.</param>
            <returns>Point that represents the converted position, in selection coordinates.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.IsPosInSelection(System.Drawing.Point)">
            <summary>
            When implemented by a class, indicates whether given position located within the selected region.
            </summary>
            <param name="position">Position to check.</param>
            <returns>True if position in selected region; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.IsPosInSelection(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, indicates whether given position located within the selected region.
            </summary>
            <param name="x">Horizontal coordinate of the position to check.</param>
            <param name="y">Vertical coordinate of the position to check.</param>
            <returns>True if position in selected region; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.GetSelectionForLine(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            When implemented by a class, sets left and right parameter to the first and last selected characters within specified line.
            </summary>
            <param name="index">Index of line within Edit control content.</param>
            <param name="left">Receives index of the first selected character.</param>
            <param name="right">Receives index of the last selected character.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectedCount">
            <summary>
            When implemented by a class, returns amount of the lines being selected.
            </summary>
            <returns>Number of selected lines.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.SelectedString(System.Int32)">
            <summary>
            When implemented by a class, returns selected part of string at specified position.
            </summary>
            <param name="index">Specifies index of the line.</param>
            <returns>Selected part of specified string.</returns>
            <remarks>If selection is empty method returns null.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.ResetOptions">
            <summary>
            When implemented by a class, resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.ResetAllowedSelectionMode">
            <summary>
            When implemented by a class, resets the <c>AllowedSelectionMode</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.ResetForeColor">
            <summary>
            When implemented by a class, resets the <c>ForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.ResetBackColor">
            <summary>
            When implemented by a class, resets the <c>BackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.ResetInActiveForeColor">
            <summary>
            When implemented by a class, resets the <c>InActiveForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.ResetInActiveBackColor">
            <summary>
            When implemented by a class, resets the <c>InActiveBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISelection.ResetBorderColor">
            <summary>
            When implemented by a class, resets the <c>BorderColor</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISelection.UpdateCount">
            <summary>
            When implemented by a class, keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISelection.IsEmpty">
            <summary>
            When implemented by a class, indicates whether nothing is selected.
            </summary>
            <returns>True if empty; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.ISelection.SelectionStart">
            <summary>
            When implemented by a class, gets or sets the position of the first selected character while text considered as a single string.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISelection.SelectionLength">
            <summary>
            When implemented by a class, gets or sets length of the <c>SelectedText</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISelection.SelectionRect">
            <summary>
            When implemented by a class, gets or sets rectangular area indicating selected text of the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISelection.SelectionType">
            <summary>
            When implemented by a class, gets or sets type of current selection.
            <seealso cref="!:QWhale.Editor.SelectionType"/>
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISelection.SelectedText">
            <summary>
            When implemented by a class, gets or sets strings that corresponds to selected part of the control's text content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISelection.Options">
            <summary>
            When implemented by a class, gets or sets options determining behaviour or the <c>ISelection</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISelection.ForeColor">
            <summary>
            When implemented by a class, gets or sets a foreground color of the <c>SelectedText</c> when owner control has input focus.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISelection.BackColor">
            <summary>
            When implemented by a class, gets or sets a background color of the <c>SelectedText</c> when owner control has input focus.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISelection.InActiveForeColor">
            <summary>
            When implemented by a class, gets or sets a foreground color of the <c>SelectedText</c> when owner control does not have input focus.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISelection.BorderColor">
            <summary>
            When implemented by a class, gets or sets a color of the selection border.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISelection.InActiveBackColor">
            <summary>
            When implemented by a class, gets or sets a background color of the <c>SelectedText</c> when owner control does not have input focus.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISelection.AllowedSelectionMode">
            <summary>
            When implemented by a class, gets or sets types of selection allowed to Edit control content.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.ISelection.SelectionChanged">
            <summary>
            When implemented by a class, occurs when selection bounds are changed.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IWordBreak">
            <summary>
            Represents properties and methods used to separate words within Edit control content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IWordBreak.IsDelimiter(System.String,System.Int32)">
            <summary>
            When implemented by a class, indicates whether the character at the specific position of given string is a delimiter character.
            </summary>
            <param name="s">The string in which character should be tested.</param>
            <param name="pos">The index of character in the given string.</param>
            <returns>True if specified character is delimiter; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IWordBreak.IsDelimiter(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, indicates whether the character at the specific position of the string collection is delimiter character.
            </summary>
            <param name="index">The index of line in which character should be tested.</param>
            <param name="pos">The index of character in the specific string.</param>
            <returns>True if specified character is delimiter; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IWordBreak.IsDelimiter(System.Char)">
            <summary>
            When implemented by a class, indicates whether the specified character is delimiter character.
            </summary>
            <param name="ch">The char value that should be tested.</param>
            <returns>True if specified character is delimiter; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IWordBreak.GetWord(System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            When implemented by a class, returns word start and end, if there is word at the specified position.
            </summary>
            <param name="s">The given string.</param>
            <param name="pos">The index of character within the string.</param>
            <param name="left">Receives start position of the word.</param>
            <param name="right">Receives end position of the word.</param>
            <returns>True if any word found; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IWordBreak.GetWord(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            When implemented by a class, returns word start and end, if there is word at the specified position.
            </summary>
            <param name="index">The index of line in the text.</param>
            <param name="pos">The index of character in the within the string.</param>
            <param name="left">Receives start position of the word.</param>
            <param name="right">Receives end position of the word.</param>
            <returns>True if any word found; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IWordBreak.GetTextAt(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, returns word at the specific text position.
            </summary>
            <param name="pos">Specifies index of the line.</param>
            <param name="line">Specifies index of character in the text string.</param>
            <returns>Word found at the specified position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IWordBreak.GetTextAt(System.Drawing.Point)">
            <summary>
            When implemented by a class, returns word at the specific text position.
            </summary>
            <param name="position">The Point value that specifies position in the text.</param>
            <returns>Word found at the specified position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IWordBreak.ResetDelimiters">
            <summary>
            When implemented by a class, resets the <c>Delimiters</c> to the defalut value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IWordBreak.Delimiters">
            <summary>
            When implemented by a class, gets or sets an array of characters used as delimiters between words in the text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IWordBreak.DelimiterString">
            <summary>
            When implemented by a class, gets or sets <c>Delimiters</c> as a single string.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IWordBreak.DelimTable">
            <summary>
            When implemented by a class, represents <c>Delimiters</c>  as a key-and-value pairs collection where each key is a single delimiter character.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IWordWrap">
            <summary>
            Represents properties and methods to wrap Edit control's text content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IWordWrap.UpdateWordWrap">
            <summary>
            When implemented by a class, re-wraps all lines in the text.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IWordWrap.UpdateWordWrap(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, re-wraps lines in the text within specific scope.
            </summary>
            <param name="first">Specifies first line to wrap.</param>
            <param name="last">Specifies last line to wrap.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IWordWrap.GetWrapMargin">
            <summary>
            When implemented by a class, returns position of the wrapping margin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stimulsoft.Editor.IWordWrap.ResetWordWrap">
            <summary>
            When implemented by a class, resets the <c>WordWrap</c> to the defalut value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IWordWrap.ResetWrapAtMargin">
            <summary>
            When implemented by a class, resets the <c>WrapAtMargin</c> to the defalut value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IWordWrap.WordWrap">
            <summary>
            When implemented by a class, gets or sets a value indicating whether control automatically wraps words to the beginning of the next line when necessary.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IWordWrap.WrapAtMargin">
            <summary>
            When implemented by a class, gets or sets a value indicating whether control automatically wraps words at margin position.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IWordWrap.WrapMargin">
            <summary>
            When implemented by a class, gets position of the wrapping margin.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IDisplayStrings">
            <summary>
            Represents properties and methods for a collection of visible strings in the Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IDisplayStrings.PointToDisplayPoint(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, converts the specified text coordinates to display coordinates.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies the text coordinates to be converted.</param>
            <param name="y">The Y-constituent of the Point value that specifies the text coordinates to be converted.</param>
            <returns>Display coordinates of the specified text point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.IDisplayStrings.PointToDisplayPoint(System.Drawing.Point)">
            <summary>
            When implemented by a class, converts the specified text coordinates to display coordinates.
            </summary>
            <param name="position">The Point value that specifies the text coordinates to be converted.</param>
            <returns>Display coordinates of the specified text point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.IDisplayStrings.DisplayPointToPoint(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, converts the specified display coordinates to text coordinates.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies the display coordinates to be converted.</param>
            <param name="y">The Y-constituent of the Point value that specifies the display coordinates to be converted.</param>
            <returns>Text coordinates of specified display point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.IDisplayStrings.DisplayPointToPoint(System.Drawing.Point)">
            <summary>
            When implemented by a class, converts the specified display coordinates to the text coordinates.
            </summary>
            <param name="position">The Point value that specifies the display coordinates to be converted.</param>
            <returns>Text coordinates of specified display point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.IDisplayStrings.GetCount">
            <summary>
            When implemented by a class, returns number of visible lines.
            </summary>
            <returns>Number of visible lines.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IDisplayStrings.GetColorData(System.Int32)">
            <summary>
            When implemented by a class, returns color information related to the the specified line.
            </summary>
            <param name="index">The index of line in strings array.</param>
            <returns>Color information of specified line.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IDisplayStrings.GetLexStyle(System.Drawing.Point)">
            <summary>
            When implemented by a class, returns lexical style related to the specified position.
            </summary>
            <param name="position">The Point value that specifies position to receive lexical style.</param>
            <returns>Lexical style at specified position.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.IDisplayStrings.Lines">
            <summary>
            When implemented by a class, gets or sets the collection of underlying "real" collection of text lines.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IDisplayStrings.MaxLineWidth">
            <summary>
            When implemented by a class, gets width of the largest line in the control's text.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IGutter">
            <summary>
            Represents properties and methods to operate with gutter at the left side of the Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.Assign(Stimulsoft.Editor.IGutter)">
            <summary>
            When implemented by a class, copies the contents from another <c>IGutter</c> object.
            </summary>
            <param name="source">Specifies <c>IGutter</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.Paint(Stimulsoft.Editor.IPainter,System.Drawing.Rectangle,System.Int32)">
            <summary>
            When implemented by a class, draws gutter on the specified graphic surface.
            </summary>
            <param name="painter">Represents <c>IPainter</c> surface to draw on.</param>
            <param name="rect">Rectangular area of gutter to draw.</param>
            <param name="startLine">the first display line to draw</param>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.Paint(Stimulsoft.Editor.IPainter,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, draws gutter on the specified graphic surface.
            </summary>
            <param name="painter">Represents <c>IPainter</c> surface to draw on.</param>
            <param name="rect">Rectangular area of gutter to draw.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.OnClick(System.EventArgs)">
            <summary>
            When implemented by a class, raises the <c>Click</c> event.
            </summary>
            <param name="e">The EventArgs that contains data to this event.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.OnDoubleClick(System.EventArgs)">
            <summary>
            When implemented by a class, raises the <c>DoubleClick</c> event.
            </summary>
            <param name="e">The EventArgs that contains data to this event.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.ResetBrushColor">
            <summary>
            When implemented by a class, resets the <c>Width</c> to the default value.
            </summary>
            <summary>
            When implemented by a class, resets the <c>BrushColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.ResetPenColor">
            <summary>
            When implemented by a class, resets the <c>PenColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.ResetVisible">
            <summary>
            When implemented by a class, resets the <c>Visible</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.ResetLineNumbersStart">
            <summary>
            When implemented by a class, resets the <c>LineNumbersStart</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.ResetLineNumbersLeftIndent">
            <summary>
            When implemented by a class, resets the <c>LineNumbersLeftIndent</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.ResetLineNumbersRightIndent">
            <summary>
            When implemented by a class, resets the <c>LineNumbersRightIndent</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.ResetLineNumbersForeColor">
            <summary>
            When implemented by a class, resets the <c>LineNumbersForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.ResetLineNumbersBackColor">
            <summary>
            When implemented by a class, resets the <c>LineNumbersBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.ResetLineNumbersAlignment">
            <summary>
            When implemented by a class, resets the <c>LineNumbersAlignment</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.ResetOutliningLeftIndent">
            <summary>
            When implemented by a class, resets the <c>OutliningLeftIndentt</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.ResetOutliningRightIndent">
            <summary>
            When implemented by a class, resets the <c>OutliningRightIndent</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.ResetOptions">
            <summary>
            When implemented by a class, resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.ResetBookMarkImageIndex">
            <summary>
            When implemented by a class, resets the <c>BookMarkImageIndex</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.ResetWrapImageIndex">
            <summary>
            When implemented by a class, resets the <c>WrapImageIndex</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.ResetDrawLineBookmarks">
            <summary>
            When implemented by a class, resets the <c>DrawLineBookmarks</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.ResetLineBookmarksColor">
            <summary>
            When implemented by a class, resets the <c>LineBookmarksColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.ResetShowBookmarkHints">
            <summary>
            When implemented by a class, resets the <c>ShowBookmarkHints</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.ResetLineModificatorChangedColor">
            <summary>
            When implemented by a class, resets the <c>LineModificatorChangedColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.ResetLineModificatorSavedColor">
            <summary>
            When implemented by a class, resets the <c>LineModificatorSavedColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.ResetWidth">
            <summary>
            When implemented by a class, resets the <c>Width</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.ResetUserMarginWidth">
            <summary>
            When implemented by a class, resets the <c>UserMarginWidth</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.ResetUserMarginForeColor">
            <summary>
            When implemented by a class, resets the <c>UserMarginForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.ResetUserMarginBackColor">
            <summary>
            When implemented by a class, resets the <c>UserMarginBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IGutter.ResetUserMarginText">
            <summary>
            When implemented by a class, resets the <c>UserMarginText</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.Width">
            <summary>
            When implemented by a class, gets or sets the width of the gutter.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.Brush">
            <summary>
            When implemented by a class, gets or sets a Brush object used to paint gutter.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.Pen">
            <summary>
            When implemented by a class, gets or sets a Pen object used to paint gutter line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.BrushColor">
            <summary>
            When implemented by a class, gets or sets background color of the gutter.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.PenColor">
            <summary>
            When implemented by a class, gets or sets color of the gutter line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.Visible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the gutter area is visible.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.Rect">
            <summary>
            When implemented by a class, gets the rectangle that represents gutter area.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.LineNumbersStart">
            <summary>
            When implemented by a class, gets or sets index of the first line being painted on the gutter.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.LineNumbersLeftIndent">
            <summary>
            When implemented by a class, gets or sets line numbers indentation from the left gutter border.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.LineNumbersRightIndent">
            <summary>
            When implemented by a class, gets or sets line numbers indentation from the right gutter border.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.LineNumbersForeColor">
            <summary>
            When implemented by a class, gets or sets foreground color of the line numbers.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.LineNumbersBackColor">
            <summary>
            When implemented by a class, gets or sets background color of the line numbers.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.LineNumbersAlignment">
            <summary>
            When implemented by a class, gets or sets line numbers alignment information.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.OutliningLeftIndent">
            <summary>
            When implemented by a class, gets or sets outlining indentation from the left gutter border.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.OutliningRightIndent">
            <summary>
            When implemented by a class, gets or sets outlining indentation from the right gutter border.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.Options">
            <summary>
            When implemented by a class, gets or sets a <c>GutterOptions</c> that determine gutter appearance and behaviour.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.Images">
            <summary>
            When implemented by a class, gets or sets an ImageList object that contains collection of images for gutter.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.BookMarkImageIndex">
            <summary>
            When implemented by a class, gets or sets a value that specifies index of item in the image collection used to paint bookmark.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.WrapImageIndex">
            <summary>
            When implemented by a class, gets or sets a value that specifies index of item in the image collection used to paint special mark indicating the wrapped line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.DrawLineBookmarks">
            <summary>
            When implemented by a class, gets or sets a value indicating whether Edit control should draw triangle at bookmark position inside line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.LineBookmarksColor">
            <summary>
            When implemented by a class, gets or sets a color of the line bookmarks.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.ShowBookmarkHints">
            <summary>
            When implemented by a class, gets or sets a value indicating whether Edit control should display text describing bookmark in form of tooltip window when mouse pointer is over the gutter bookmark.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.LineModificatorChangedColor">
            <summary>
            When implemented by a class, gets or sets a color of the line modificators(color stitch that indicates that the line content is unmodified, modified or saved) in the modified state.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.LineModificatorSavedColor">
            <summary>
            When implemented by a class, gets or sets a color of the line modificators(color stitch that indicates that the line content is unmodified, modified or saved) in the saved state.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.UserMarginWidth">
            <summary>
            When implemented by a class, gets or sets the width of the user margin area.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.UserMarginForeColor">
            <summary>
            When implemented by a class, gets or sets foreground color for the user margin.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.UserMarginBackColor">
            <summary>
            When implemented by a class, gets or sets background color of the user margin.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IGutter.UserMarginText">
            <summary>
            When implemented by a class, gets or sets text of the user margin.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.IGutter.Click">
            <summary>
            When implemented by a class, occurs when the <c>IGutter</c> clicked.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.IGutter.DoubleClick">
            <summary>
            When implemented by a class, occurs when the <c>IGutter</c> double-clicked.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.IGutter.DrawUserMargin">
            <summary>
            When implemented by a class, occurs when user margin part of each line is drawing.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IMargin">
            <summary>
            Represents properties and methods specifying appearance of the margin in Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IMargin.Assign(Stimulsoft.Editor.IMargin)">
            <summary>
            When implemented by a class, copies the contents from another <c>IMargin</c> object.
            </summary>
            <param name="source">Specifies <c>IMargin</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IMargin.Paint(Stimulsoft.Editor.IPainter,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, draws <c>IMargin</c> object on the specified graphic surface.
            </summary>
            <param name="painter">Represents <c>IPainter</c> surface to draw on.</param>
            <param name="rect">Rectangular area of <c>IMargin</c> to draw.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IMargin.PaintColumn(Stimulsoft.Editor.IPainter,System.Drawing.Rectangle)">
            <summary>
            Draws margin column on the specified graphic surface.
            </summary>
            <param name="painter">Represents <c>IPainter</c> surface to draw on.</param>
            <param name="rect">Rectangular area of <c>Margin</c> to draw.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IMargin.ResetPosition">
            <summary>
            When implemented by a class, resets the <c>Position</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IMargin.ResetColumnPositions">
            <summary>
            When implemented by a class, resets the <c>ColumnPositions</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IMargin.ResetPenColor">
            <summary>
            When implemented by a class, resets the <c>PenColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IMargin.ResetVisible">
            <summary>
            When implemented by a class, resets the <c>Visible</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IMargin.ResetColumnsPenColor">
            <summary>
            When implemented by a class, resets the <c>ColumnPenColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IMargin.ResetColumnsVisible">
            <summary>
            When implemented by a class, resets the <c>ColumnsVisible</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IMargin.ResetAllowDrag">
            <summary>
            When implemented by a class, resets the <c>AllowDrag</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IMargin.ResetShowHints">
            <summary>
            When implemented by a class, resets the <c>ShowHints</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IMargin.CancelDragging">
            <summary>
            When implemented by a class, cancels dragging the margin.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IMargin.Contains(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, indicates whether <c>IMargin</c> area contains given position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies the point to check-up.</param>
            <param name="y">The Y-constituent of the Point value that specifies the point to check-up.</param>
            <returns>True if contains; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IMargin.DragTo(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, moves <c>IMargin</c> to specified position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies position to drag.</param>
            <param name="y">The Y-constituent of the Point value that specifies position to drag.</param>
        </member>
        <member name="P:Stimulsoft.Editor.IMargin.Position">
            <summary>
            When implemented by a class, gets or sets value indicating position, in characters, of the vertical line within the text portion of the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IMargin.ColumnPositions">
            <summary>
            When implemented by a class, gets or sets the character columns where additional column margin will be drawn.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IMargin.Pen">
            <summary>
            When implemented by a class, gets or sets Pen object that describes the color and pattern of <c>IMargin</c> line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IMargin.PenColor">
            <summary>
            When implemented by a class, gets or sets a color of the margin line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IMargin.ColumnPen">
            <summary>
            When implemented by a class, gets or sets Pen object that describes the color and pattern of column margin lines.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IMargin.ColumnPenColor">
            <summary>
            When implemented by a class, gets or sets a color of the column margin line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IMargin.Visible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether vertical line should be painted.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IMargin.ColumnsVisible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether column margins should be painted.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IMargin.IsDragging">
            <summary>
            When implemented by a class, indicates whether <c>IMargin</c> is in dragging state.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IMargin.AllowDrag">
            <summary>
            When implemented by a class,  indicates whether drag operation can performed to <c>IMargin</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IMargin.ShowHints">
            <summary>
            When implemented by a class, gets or sets a value indicating whether <c>IMargin</c> should display some hint when mouse pointer is over the margin area.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IHyperText">
            <summary>
            Represetns methods to operate with hypertext sections within the text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IHyperText.IsHyperText(System.String)">
            <summary>
            When implemented by a class, indicates whether given text represents hypertest.
            </summary>
            <param name="text">Text to test.</param>
            <returns>True if given text represents hypertext; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IHyperText.ResetHighlightUrls">
            <summary>
            When implemented by a class, resets <c>HighlightUrls</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IHyperText.HighlightUrls">
            <summary>
            When implemented by a class, gets or sets a value indicating whether hypertext urls in the text should be highlighted.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.IHyperText.CheckHyperText">
            <summary>
            When implemented by a class, occurs when a control needs checking whether some string represents hypertext.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IHyperTextEx">
            <summary>
            Represetns extended properties and methods to operate hypertext section within the text.
            <seealso cref="!:QWhale.Editor.IHyperText"/>
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IHyperTextEx.Assign(Stimulsoft.Editor.IHyperTextEx)">
            <summary>
            When implemented by a class, copies the contents from another <c>IHyperTextEx</c> object.
            </summary>
            <param name="source">Specifies <c>IHyperTextEx</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IHyperTextEx.UrlJump(System.String)">
            <summary>
            When implemented by a class, tries to launch default browser to process specified url.
            </summary>
            <param name="text">Specifies name of a document or application file to jump to.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IHyperTextEx.ResetUrlStyle">
            <summary>
            When implemented by a class, resets the <c>UrlStyle</c> to the default value.
            </summary>
            <remarks>Use JumpToUrl to suppress launching default browser.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.IHyperTextEx.ResetUrlColor">
            <summary>
            When implemented by a class, resets the <c>UrlColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IHyperTextEx.ResetShowHints">
            <summary>
            When implemented by a class, resets the <c>ShowHints</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IHyperTextEx.ShowHints">
            <summary>
            When implementing by a class, gets or sets value indicating whether default hint for hypertext section needs displaying when user moves mouse over the hypertext.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IHyperTextEx.UrlStyle">
            <summary>
            When implemented by a class, gets or sets font style of highlighted urls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IHyperTextEx.UrlColor">
            <summary>
            When implemented by a class, gets or sets a value that represents color of highlighted urls.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.IHyperTextEx.JumpToUrl">
            <summary>
            When implemented by a class, occurs when user attempts to jump to url.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ISpelling">
            <summary>
            Represents properties and methods allowing check spelling of the text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISpelling.IsWordCorrect(System.String)">
            <summary>
            When implemented by a class, checks whether spelling for the given word is correct.
            </summary>
            <param name="text">Specifies text to check-up.</param>
            <returns>True if correct; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISpelling.ResetCheckSpelling">
            <summary>
            When implemented by a class, resets the <c>CheckSpelling</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISpelling.CheckSpelling">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the document can check spelling for its content.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.ISpelling.WordSpell">
            <summary>
            When implemented by a class, occurs when spelling of some word within the text needs checking.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ISpellingEx">
            <summary>
            Represents properties and methods to allowing to visually highlight mispelled words in the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISpellingEx.Assign(Stimulsoft.Editor.ISpellingEx)">
            <summary>
            When implemented by a class, copies the contents from another <c>ISpellingEx</c> object.
            </summary>
            <param name="source">Specifies <c>ISpellingEx</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISpellingEx.ResetSpellColor">
            <summary>
            When implemented by a class, resets the <c>SpellColor</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISpellingEx.SpellColor">
            <summary>
            When implemented by a class, gets or sets a value representing color to draw wavy underlines under mispelled words.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IKeyList">
            <summary>
            Represents list of key or its combinations with attached actions.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IKeyList.Add(System.Windows.Forms.Keys,Stimulsoft.Editor.KeyEventEx,System.Object,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, adds a new key to key collection with specified parameters.
            </summary>
            <param name="keyData">Key added to the collection.</param>
            <param name="action">Extended action that executes when the key is pressed.</param>
            <param name="param">Object passed as a parameter to the extended action.</param>
            <param name="state">State of the Edit control when key is pressed.</param>
            <param name="leaveState">State of the Edit control after key is pressed.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IKeyList.Add(System.Windows.Forms.Keys,Stimulsoft.Editor.KeyEvent,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, adds a new key to key collection with specified parameters.
            </summary>
            <param name="keyData">Key added to the collection.</param>
            <param name="action">Action that executes when the key is pressed.</param>
            <param name="state">State of the Edit control before key is pressed.</param>
            <param name="leaveState">State of the Edit control after key is pressed.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IKeyList.Add(System.Windows.Forms.Keys,Stimulsoft.Editor.KeyEventEx,System.Object)">
            <summary>
            When implemented by a class, adds a new key to key collection with specified parameters.
            </summary>
            <param name="keyData">Key added to the collection.</param>
            <param name="action">Extended action that executes when the key is pressed.</param>
            <param name="param">Object passed as a parameter to the extended action.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IKeyList.Add(System.Windows.Forms.Keys,Stimulsoft.Editor.KeyEvent)">
            <summary>
            When implemented by a class, adds a new key to key collection with specified action.
            </summary>
            <param name="keyData">Key added to the collection.</param>
            <param name="action">Action that executes when the key is pressed.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IKeyList.AddNormal(System.Windows.Forms.Keys,Stimulsoft.Editor.KeyEventEx,System.Object)">
            <summary>
            When implemented by a class, adds a new key to key collection with specified parameters and default (normal) state and leave state.
            </summary>
            <param name="keyData">Key added to the collection.</param>
            <param name="action">Extended action that executes when the key is pressed.</param>
            <param name="param">Object passed as a parameter to the extended action.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IKeyList.AddNormal(System.Windows.Forms.Keys,Stimulsoft.Editor.KeyEvent)">
            <summary>
            When implemented by a class, adds a new key to key collection with specified parameters and default (normal) state and leave state.
            </summary>
            <param name="keyData">Key that added to the collection.</param>
            <param name="action">Action that executes when the key is pressed.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IKeyList.Remove(System.Windows.Forms.Keys,System.Int32)">
            <summary>
            When implemented by a class, removes given key from the key collection.
            </summary>
            <param name="keyData">Key to remove.</param>
            <param name="state">State of the Edit control when the key is pressed.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IKeyList.Remove(System.Windows.Forms.Keys)">
            <summary>
            When implemented by a class, removes given key from the key collection.
            </summary>
            <param name="keyData">Key to remove.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IKeyList.Clear">
            <summary>
            When implemented by a class, removes all elements from the key list.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IKeyList.ExecuteKey(System.Windows.Forms.Keys,System.Int32@)">
            <summary>
            When implemented by a class, executes action or extended action attached to the specified key.
            </summary>
            <param name="keyData">Key for which action should be executed.</param>
            <param name="state">Receive leave state of specified action.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IKeyList.FindKey(System.Windows.Forms.Keys,System.Int32)">
            <summary>
            When implemented by a class, indicates whether given key locates within the collection.
            </summary>
            <param name="keyData">Key to find.</param>
            <param name="state">State of the Edit control before the key is pressed.</param>
            <returns>True if the specified key exists; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.IKeyList.Handlers">
            <summary>
            When implemented by a class, represents an event handlers collection which contains elements that can be used as a particular action attached to key or key combination from the <c>IKeyList</c>.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeCompletionWindow">
            <summary>
            Represents properties and methods to display a popup window containing Code Completion information.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionWindow.Popup">
            <summary>
            When implemented by a class, displays popup window at the current mouse position.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionWindow.PopupAt(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, displays popup window at the specified screen position.
            </summary>
            <param name="x">Horizontal coordinate at which popup window should be displayed.</param>
            <param name="y">Vertical coordinate at which popup window should be displayed.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionWindow.PopupAt(System.Drawing.Point)">
            <summary>
            When implemented by a class, displays popup window at the specified screen position.
            </summary>
            <param name="position">The Point object that specifies the coordinates at which popup window should be displayed.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionWindow.Close(System.Boolean)">
            <summary>
            When implemented by a class, closes the popup window.
            </summary>
            <param name="accept">Indicates whether the result of the popup should be accepted.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionWindow.CloseDelayed(System.Boolean)">
            <summary>
            When implemented by a class, closes the popup window with delay.
            </summary>
            <param name="accept">Indicates whether the result of the popup should be accepted.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionWindow.IsFocused">
            <summary>
            When implemented by a class, indicates whether <c>ICodeCompletionWindow</c> or it's child control has an input focus.
            </summary>
            <returns>True if focused; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionWindow.ResetContent">
            <summary>
            When implemented by a class, updates <c>ICodeCompletionWindow</c> content from its <c>Provider</c>.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionWindow.ResetSizeable">
            <summary>
            When implemented by a class, resets the <c>Sizeable</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionWindow.ResetAutoSize">
            <summary>
            When implemented by a class, resets the <c>AutoSize</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionWindow.ResetCodeCompletionFlags">
            <summary>
            When implemented by a class, resets the <c>CodeCompletions</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionWindow.Provider">
            <summary>
            When implemented by a class, gets or sets the object that contains data related to the popup window.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionWindow.Sizeable">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the border of the popup window is resizable.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionWindow.AutoSize">
            <summary>
            When implemented by a class, gets or sets a value indicating whether a popup window is automatically resized to fit its contents.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionWindow.Images">
            <summary>
            When implemented by a class, gets or sets the ImageList for code completion items.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionWindow.CompletionFlags">
            <summary>
            When implemented by a class, gets or sets collection of attributes that specifies behaviour of the popup window.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionWindow.OwnerControl">
            <summary>
            When implemented by a class, represents a control owning the <c>ICodeCompletionWindow</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionWindow.StartPos">
            <summary>
            When implemented by a class, specifies position within the text (as index of line and character) where <c>ICodeCompletionWindow</c> is valid.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionWindow.EndPos">
            <summary>
            When implemented by a class, specifies position within the text (as index of line and character) where <c>ICodeCompletionWindow</c> is valid.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionWindow.DisplayPos">
            <summary>
            When implemented by a class, specifies position within the text (as index of line and character) where <c>ICodeCompletionWindow</c> is displayed.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.ICodeCompletionWindow.ClosePopup">
            <summary>
            When implemented by a class, occurs when the popup window is closed.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.ICodeCompletionWindow.ShowPopup">
            <summary>
            When implemented by a class, occurs when the popup window is displayed.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.ICodeCompletionWindow.Disposed">
            <summary>
            When implemented by a class, occurs when the popup window is disposed.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.ICodeCompletionWindow.KeyPreviewEvent">
            <summary>
            Occurs when the popup window receives key message
            </summary>
            <remarks>The event handler receives an argument of type <c>KeyPreviewEventArgs</c> containing data related to this event.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeCompletionColumn">
            <summary>
            Represents properties and methods to indentify individual column object within a code completion columns collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionColumn.ResetFontStyle">
            <summary>
            When implemented by a class, resets <c>FontStyle</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionColumn.ResetForeColor">
            <summary>
            When implemented by a class, resets <c>ForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionColumn.ResetVisible">
            <summary>
            When implemented by a class, resets <c>Visible</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionColumn.Name">
            <summary>
            When implemented by a class, gets or sets the name of the column.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionColumn.FontStyle">
            <summary>
            When implemented by a class, gets or sets font style of the column.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionColumn.ForeColor">
            <summary>
            When implemented by a class, gets or sets foreground color of the column.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionColumn.Visible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether a column is visible.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeCompletionColumns">
            <summary>
            Represents properties and methods to provide indexed access to <c>ICodeCompletionColumn</c>object.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionColumns.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to individual <c>ICodeCompletionColumn</c> stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeCompletionBox">
            <summary>
            Represents properties and methods to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionBox.ClearColumns">
            <summary>
            When implemented by a class, removes all columns from the <c>ICodeCompletionBox</c> column collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionBox.AddColumn">
            <summary>
            When implemented by a class, adds a new column to the <c>ICodeCompletionBox</c> column collection.
            </summary>
            <returns>New added column.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionBox.InsertColumn(System.Int32)">
            <summary>
            When implemented by a class, inserts a new column to the specified position in the column collection.
            </summary>
            <param name="index">Index of the column in the collection.</param>
            <returns>New inserted column.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionBox.RemoveColumnAt(System.Int32)">
            <summary>
            When implemented by a class, removes the column at the specified index of the column collection.
            </summary>
            <param name="index">Specifies zero-based index of the column to remove.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionBox.ResetDropDownCount">
            <summary>
            When implemented by a class, resets the <c>DropDownCount</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionBox.Columns">
            <summary>
            When implemented by a class, represents collection of <c>ICodeCompletionColumn</c> objects displayed by Code Completion ListBox.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionBox.DropDownCount">
            <summary>
            When implemented by a class, gets or sets a value that specifies maximal visible index of the ListBox items within the popup control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionBox.Filtered">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether <c>ICodeCompletionBox</c> should filter its content using <c>Filer</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionBox.Filter">
            <summary>
            When implemented by a class, gets or sets filter string used to filter <c>ICodeCompletionBox</c> content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionBox.Sorted">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the items in the <c>ICodeCompletionBox</c> are sorted alphabetically.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.ICodeCompletionBox.SelectionChanged">
            <summary>
            When implemented by a class, occurs when index specifying the currently selected item is changed.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeCompletionHint">
            <summary>
            Represents properties and methods to display a popup window that can contain Code Completion information presented in the form of tooltip window.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionHint.ResetAutoHide">
            <summary>
            When implemented by a class, resets the <c>AutoHide</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionHint.ResetAutoHidePause">
            <summary>
            When implemented by a class, resets the <c>AutoHidePause</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionHint.AutoHide">
            <summary>
            When implemented by a class, gets or sets a value that indicates whether <c>ICodeCompletionHint</c> should be closed after some period of time.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionHint.AutoHidePause">
            <summary>
            When implemented by a class, gets or sets a value that specifies delay, in miliseconds, between displaying and hiding popup hint.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeCompletionEdit">
            <summary>
            Represents properties and methods to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionEdit.EditField">
            <summary>
            When implemented by a class, gets or sets a value that indicates caption of the Edit label.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionEdit.EditPath">
            <summary>
            When implemented by a class, gets or sets a value that indicates path to the nested data.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionEdit.EditText">
            <summary>
            When implemented by a class, gets or sets a value that indicates text of the field being edited.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IBraceMatching">
            <summary>
            Represents properties and methods to handle matching braces within the Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IBraceMatching.FindClosingBrace(System.Int32@,System.Int32@)">
            <summary>
            When implemented by a class, locates closing brace.
            </summary>
            <param name="x">Retrieves X-coordinate of the found brace.</param>
            <param name="y">Retrieves Y-coordinate of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IBraceMatching.FindClosingBrace(System.Drawing.Point@)">
            <summary>
            When implemented by a class, locates closing brace.
            </summary>
            <param name="position">Retrieves position of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IBraceMatching.FindOpenBrace(System.Int32@,System.Int32@)">
            <summary>
            When implemented by a class, locates open brace.
            </summary>
            <param name="x">Retrieves X-coordinate of the found brace.</param>
            <param name="y">Retrieves Y-coordinate of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IBraceMatching.FindOpenBrace(System.Drawing.Point@)">
            <summary>
            When implemented by a class, locates open brace.
            </summary>
            <param name="position">Retrieves position of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IBraceMatching.TempHighlightBraces(System.Drawing.Rectangle[])">
            <summary>
            When implemented by a class, temporary highlights all text within the area specified by rects.
            <seealso cref="!:QWhale.Editor.IBraceMatching.TempUnhighlightBraces"/>
            </summary>
            <param name="rects">Specifies the area to highlight the text.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IBraceMatching.TempUnhighlightBraces">
            <summary>
            When implemented by a class, cancels text highlighting turned on using <c>TempHighlightBraces</c>
            <seealso cref="!:QWhale.Editor.IBraceMatching.TempHighlightBraces"/>
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IBraceMatching.ResetBracesOptions">
            <summary>
            When implemented by a class, resets the <c>BracesOptions</c> to its default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IBraceMatching.ResetOpenBraces">
            <summary>
            When implemented by a class, resets the <c>OpenBraces</c> to its default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IBraceMatching.ResetClosingBraces">
            <summary>
            When implemented by a class, resets the <c>ClosingBraces</c> to its default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IBraceMatching.BracesOptions">
            <summary>
            When implemented by a class, gets or sets options specifying appearance and behaviour of matching braces within Edit control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IBraceMatching.OpenBraces">
            <summary>
            When implemented by a class, gets or sets an array of characters each one representing an open brace.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IBraceMatching.ClosingBraces">
            <summary>
            When implemented by a class, gets or sets an array of characters each one representing a closing brace.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IBraceMatchingEx">
            <summary>
            Represents extended properties and methods to handle matching braces within the Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IBraceMatchingEx.Assign(Stimulsoft.Editor.IBraceMatchingEx)">
            <summary>
            When implemented by a class, copies the contents from another <c>IBraceMatchingEx</c> object.
            </summary>
            <param name="source">Specifies <c>IBraceMatchingEx</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IBraceMatchingEx.ResetForeColor">
            <summary>
            When implemented by a class, resets the <c>ForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IBraceMatchingEx.ResetBackColor">
            <summary>
            When implemented by a class, resets the <c>BackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IBraceMatchingEx.ResetStyle">
            <summary>
            When implemented by a class, resets the <c>Style</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IBraceMatchingEx.ResetUseRoundRect">
            <summary>
            When implemented by a class, resets the <c>UseRoundRect</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IBraceMatchingEx.ForeColor">
            <summary>
            When implemented by a class, gets or sets a value that represents foreground color to draw matching braces.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IBraceMatchingEx.BackColor">
            <summary>
            When implemented by a class, gets or sets a value that represents background color to draw matching braces.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IBraceMatchingEx.Style">
            <summary>
            When implemented by a class, gets or sets a FontStyle value that is used to draw matching braces.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IBraceMatchingEx.UseRoundRect">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether Edit control should draw rectangle around matching braces.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ITextSource">
            <summary>
            Represents properties and methods that provide interface between edited text and Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ITextSource.TextPointToAbsolutePosition(System.Drawing.Point)">
            <summary>
            When implemented by a class, converts given Point value to the absolute position.
            </summary>
            <param name="position">Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</param>
            <returns>Absolute position of given point.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ITextSource.AbsolutePositionToTextPoint(System.Int32)">
            <summary>
            When implemented by a class, converts given absolute position to position as Point value.
            </summary>
            <param name="position">Specifies index of character if the text considered as a single string.</param>
            <returns>Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ITextSource.GetCharIndexFromPosition(System.Drawing.Point)">
            <summary>
            When implemented by a class, converts given Point value to the index of character.
            </summary>
            <param name="position">Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</param>
            <returns>Index of character if the text considered as a single string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ITextSource.GetPositionFromCharIndex(System.Int32)">
            <summary>
            When implemented by a class, converts given character index to position as Point value.
            </summary>
            <param name="charIndex">Specifies index of character if the text considered as a single string.</param>
            <returns>Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ITextSource.ParseString(System.Int32)">
            <summary>
            When implemented by a class, perform lexical analysis of the specified string.
            </summary>
            <param name="index">Index of line to parse.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ITextSource.ParseStrings(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, perform lexical analysis specified strings.
            </summary>
            <param name="first">Index of the first line to parse.</param>
            <param name="last">Index of the last line to parse.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ITextSource.ParseToString(System.Int32)">
            <summary>
            When implemented by a class, perform lexical analysis of specified strings.
            </summary>
            <param name="index">Index of the last string to parse.</param>
            <remarks>Method parses string collection from last parsed string to the string specified by Index parameter.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.ITextSource.NeedParse">
            <summary>
            When implemented by a class, indicates whether syntax parsing can be performed for the text, or some of formatting text elements, such as urls or braces, should be highlighted.
            </summary>
            <returns>True if need to perform syntax parsing; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ITextSource.FormatText">
            <summary>
            When implemented by a class, tries to format and outline <c>TextSource</c> text using attached <c>Lexer</c>.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ITextSource.SetColorFlag(System.Drawing.Point,System.Int32,Stimulsoft.Editor.ColorFlags,System.Boolean)">
            <summary>
            When implemented by a class, sets color information to curent <c>IStrItem.ColorData</c>.
            </summary>
            <param name="pos">Specifies the first item in <c>IStrItem.ColorData</c> to set.</param>
            <param name="len">Specifies number of items in <c>IStrItem.ColorData</c> to set.</param>
            <param name="flag">Specifies color information to set.</param>
            <param name="setFlag">Indicates whether Color information should be set or removed.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ITextSource.CreateStrItem(System.String)">
            <summary>
            Create a new <c>IStrItem</c> object containing specified text.
            </summary>
            <param name="s">String that <c>IStrItem</c> contain.</param>
            <returns>Created <c>IStrItem</c> object.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.ITextSource.FileName">
            <summary>
            When implemented by a class, gets or sets name of file that holds text source content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ITextSource.Edits">
            <summary>
            When implemented by a class, represents a collection of <c>ISyntaxEdit</c> controls linked to the text source.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ITextSource.Lines">
            <summary>
            When implemented by a class, represents the object that implements <c>ISyntaxStrings</c> interface containing collection of strings determining text source content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ITextSource.Text">
            <summary>
            When implemented by a class, gets or sets text source content as a single string with the individual strings delimited by carriage returns.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ITextSource.LineStyles">
            <summary>
            When implemented by a class, represents an object that implements <c>ILineStyles</c> interface hodling collection of line styles for this document.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ITextSource.BookMarks">
            <summary>
            When implemented by a class, represents an object that implements <c>IBookMarks</c> interface holding collection of <c>IBookMark</c> objects each determening particular bookmark within the text source.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ITextSource.ActiveEdit">
            <summary>
            When implemented by a class, gets or sets an object that represent currently active (focused) <c>ISyntaxEdit</c> control linked to the text source.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ITextSource.Lexer">
            <summary>
            When implemented by a class, gets or sets object that can perform lexical analysis of the text source content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ITextSource.ParserLine">
            <summary>
            When implemented in a class, gets the line currently parsed by the attached Lexer, when text source performs syntax parsing of the text.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ISyntaxEdit">
            <summary>
            Represents properties and methods for an advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.ScreenToText(System.Drawing.Point)">
            <summary>
            When implemented by a class, converts given screen coordinates to text coordinates (index of line and character).
            </summary>
            <param name="position">The screen coordinate Point to convert.</param>
            <returns>The Point representing text coordinate.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.TextToScreen(System.Drawing.Point)">
            <summary>
            When implemented by a class, converts given text coordinates, index of line and character, to screen coordinates.
            </summary>
            <param name="position">The text coordinate Point to convert.</param>
            <returns>The Point representing screen coordinate</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.ScreenToText(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, converts given screen coordinates to text coordinates (index of line and character).
            </summary>
            <param name="x">Horizontal screen coordinate to convert.</param>
            <param name="y">Vertical screen coordinate to convert.</param>
            <returns>The Point representing text coordinate.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.TextToScreen(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, converts given text coordinates, index of line and character, to screen coordinates.
            </summary>
            <param name="x">Horizontal text coordinate to convert.</param>
            <param name="y">Vertical text coordinate to convert.</param>
            <returns>The Point representing screen coordinate.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.ScreenToDisplay(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, converts given screen coordinates to display coordinates(index of line and character).
            </summary>
            <param name="x">Horizontal screen coordinate to convert.</param>
            <param name="y">Vertical screen coordinate to convert.</param>
            <returns>The Point representing display coordinate.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.DisplayToScreen(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, converts given display coordinates, index of line and character, to screen coordinates.
            </summary>
            <param name="x">Index of character in the line.</param>
            <param name="y">Index of line.</param>
            <returns>The Point representing screen coordinate</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.MoveCaretOnDrag">
            <summary>
            When implemented by a class, moves caret to the position of drag cursor.
            </summary>
            <param name="position">Position in the text to make visible.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.MakeVisible(System.Drawing.Point)">
            <summary>
            When implemented by a class, scrolls the control's content, if necessary, to ensure a specified text position is in view.
            </summary>
            <param name="position">Position in the text to make visible.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.MakeVisible(System.Drawing.Point,System.Boolean)">
            <summary>
            When implemented by a class, scrolls the control's content, if necessary, to ensure a specified text position is in view.
            </summary>
            <param name="position">Position in the text to make visible.</param>
            <param name="centerLine">Specifies whether given line must be centered within control's client area.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.ShowScrollHint(System.Int32)">
            <summary>
            When implemented by a class, displays tooltip indicating destination line when scrolling.
            </summary>
            <param name="pos">Specifies vertical position (in display coordinates) to obtain hint info.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.HideScrollHint">
            <summary>
            When implemented by a class, hides scroll hint window if necessary.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.CharsInWidth">
            <summary>
            When implemented by a class, returns number of characters painted with current font that will fit into control's client area.
            </summary>
            <returns>Number of characters that can fit in.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.CharsInWidth(System.Int32)">
            <summary>
            When implemented by a class, returns number of characters painted with current font that will fit into specified Width.
            </summary>
            <param name="width">Width to fit charachers.</param>
            <returns>Number of characters that can fit in.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.LinesInHeight">
            <summary>
            When implemented by a class, determines how many lines can fit into control's client area.
            </summary>
            <returns>Number of lines that can fit in.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.LinesInHeight(System.Int32)">
            <summary>
            When implemented by a class, determines how many lines can fit into given Height.
            </summary>
            <param name="height">Height to fit lines.</param>
            <returns>Number of lines that can fit in.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.GetHitTest(System.Drawing.Point,Stimulsoft.Editor.HitTestInfo@)">
            <summary>
            When implemented by a class, fills hitTestInfo parameter by information about a part of the control at specified coordinate.
            </summary>
            <param name="position">Specifies coordinate to check.</param>
            <param name="hitTestInfo">Retrieves information about part of control.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.GetHitTest(System.Int32,System.Int32,Stimulsoft.Editor.HitTestInfo@)">
            <summary>
            When implemented by a class, fills hitTestInfo parameter by information about a part of the control at specified coordinate.
            </summary>
            <param name="x">Specifies horizontal coordinate of position to check.</param>
            <param name="y">Specifies vertical coordinate of position to check.</param>
            <param name="hitTestInfo">Retrieves information about part of control.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.GetHitTestAtTextPoint(System.Drawing.Point,Stimulsoft.Editor.HitTestInfo@)">
            <summary>
            When implemented by a class, fills hitTestInfo parameter by information about a part of control at specified text coordinate.
            </summary>
            <param name="position">Specifies coordinate to check.</param>
            <param name="hitTestInfo">Retrieves information about part of control.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.GetHitTestAtTextPoint(System.Int32,System.Int32,Stimulsoft.Editor.HitTestInfo@)">
            <summary>
            When implemented by a class, retrieves information about part of control at specified text coordinate.
            </summary>
            <param name="x">Specifies horizontal coordinate of text position to check.</param>
            <param name="y">Specifies vertical coordinate of text position to check.</param>
            <param name="hitTestInfo">Retrieves information about part of control.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.GetTextAtCursor">
            <summary>
            When implemented by a class, returns word at the cursor position.
            </summary>
            <returns>Word at the cursor position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.DisplayGotoLineDialog">
            <summary>
            When implemented by a class, initializes and runs a dialog prompting you for index of the line you need to locate.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.DisplaySearchDialog">
            <summary>
            When implemented by a class, initializes and runs a dialog box allowing you to search for some text.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.DisplayReplaceDialog">
            <summary>
            When implemented by a class, initializes and runs a dialog box allowing you to search for text and replace it.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.DisplayEditorSettingsDialog(Stimulsoft.Editor.EditorSettingsTab)">
            <summary>
            When implemented by a class, initializes and runs a dialog box allowing you to change Edit control settings.
            </summary>
            <param name="hiddenTabs">specifies hidden tabs in the syntax settings dialog</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.DisplayEditorSettingsDialog">
            <summary>
            When implemented by a class, initializes and runs a dialog box allowing you to change Edit control settings.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.ProcessKeyPress(System.Char)">
            <summary>
            When implemented by a class, processes key press
            </summary>
            <param name="keyChar">Tepresents key character to process.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.ResetAcceptTabs">
            <summary>
            When implemented by a class, resets the <c>AcceptTabs</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.ResetAcceptReturns">
            <summary>
            When implemented by a class, resets the <c>AcceptReturns</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.ResetBorderStyle">
            <summary>
            When implemented by a class, resets the <c>BorderStyle</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.ResetBorderColor">
            <summary>
            When implemented by a class, resets the <c>BorderColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.ResetSyntaxErrorsHints">
            <summary>
            When implemented by a class, resets the <c>SyntaxErrorsHints</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.ResetDrawColumnsIndent">
            <summary>
            When implemented by a class, resets the <c>DrawColumnsIndent</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxEdit.ResetColumnsIndentForeColor">
            <summary>
            When implemented by a class, resets the <c>ColumnsIndentForeColor</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.Source">
            <summary>
            When implemented by a class, gets or sets an object that implements <c>ITextSource</c> interface containing an actual string data displayed by the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.Lines">
            <summary>
            When implemented by a class, represents object that implements <c>ISyntaxStrings</c> interface containing collection of strings determining control's content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.DisplayLines">
            <summary>
            When implemented by a class, represents the object that implements <c>IDisplayStrings</c> interface containing collection of lines to be drawn in the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.Selection">
            <summary>
            When implemented by a class, represents an object that implements <c>ISelection</c> interface. This object represents various properties and methods to manipulate text selection, such as copy, paste and drag selected text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.Gutter">
            <summary>
            When implemented by a class, represents object that implements <c>IGutter</c> interface containing methods and properties necessary to operate with gutter at the left size of the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.EditMargin">
            <summary>
            When implemented by a class, represents an object that implements <c>IMargin</c> interface and specifies appearance of vertical line drawn over the text and used to mark some limit, for example, of the maximum string length allowed.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.Painter">
            <summary>
            When implemented by a class, represents an object that implements <c>IPainter</c> interface used to draw control's text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.KeyList">
            <summary>
            When implemented by a class, represents object that implements <c>IKeyList</c> containing list of keys with attached actions, which executed by key pressure.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.LineStyles">
            <summary>
            When implemented by a class, represents an object that implements <c>ILineStylesEx</c> interface holding collection of <c>ILineStyle</c> objects each of them determines particular style of the line in the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.Printing">
            <summary>
            When implemented by a class, represents an object that implements <c>IPrinting</c> interface allowing to perform various printing actions such as print, preview document, and setup print options.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.WhiteSpace">
            <summary>
            When implemented by a class, represents an object that implements <c>IWhiteSpace</c> interface. This object specifies appearance of white space characters, as well as End-of-line and End-of-file marks.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.LineSeparator">
            <summary>
            When implemented by a class, represents an object that implements <c>ILineSeparator</c> interface containing methods and properties necessary to separate lines and highlight current line within the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.Outlining">
            <summary>
            When implementing by a class, represents an object that implements <c>IOutlining</c> interface that specifies appearance and behaviour of outline sections within the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.Braces">
            <summary>
            When implemented by a class, represents an object that implements <c>IBraceMatchingEx</c> interface allowing to change appearance of matching braces within the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.HyperText">
            <summary>
            When implemented by a class, represents object that implements <c>IHyperTextEx</c> interface allowing to customize appearance and behaviour of hypertext sections within the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.Spelling">
            <summary>
            When implemented by a class, represents object that implements <c>ISpellingEx</c> interface containing properties and methods to check control's content spelling and highlight mispelled words.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.Scrolling">
            <summary>
            When implemented by a class, represents an object that implements <c>IScrolling</c> interface containing properties and methods that describe scrolling behaviour of the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.Pages">
            <summary>
            When implemented by a class, represents an object that implements <c>IEditPage</c> interface containing properties and methods representing collection of particular pages.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.AcceptTabs">
            <summary>
            When implemented by a class, gets or set a boolean value that indicates whether TAB key should be accepted by Edit control as input key.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.AcceptReturns">
            <summary>
            When implemented by a class, gets or set a boolean value that indicates whether Enter key should be accepted by Edit control as input key.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.BorderStyle">
            <summary>
            When implemented by a class, gets or sets the border style for the Edit control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.BorderColor">
            <summary>
            When implemented by a class, gets or sets the border color for the Edit control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.ClientRect">
            <summary>
            When implemented by a class, gets the rectangle that represents the client area of the Edit control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.Transparent">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether Edit control should draw its background.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.SyntaxErrorsHints">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether Edit control should display hint over each syntax error in it's content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.UseDefaultMenu">
            <summary>
            When implemented by a class, indicates whether edit control should use bultin popup menu.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.DrawColumnsIndent">
            <summary>
            When implemented by a class, indicates whether edit control should draw columns indentation marks.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxEdit.ColumnsIndentForeColor">
            <summary>
            When implemented by a class, specifies columns indentation color.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.ISyntaxEdit.SourceStateChanged">
            <summary>
            When implemented by a class, occurs when text Source's state is changed, for example when caret position moved, text edited, amount of lines changed, lexer changed, etc.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.ISyntaxEdit.ModifiedChanged">
            <summary>
            When implemented by a class, occurs when modified state is changed.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.ISyntaxEdit.PaintBackground">
            <summary>
            When implemented by a class, occurs when Edit control should paint its background in transparent mode.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.PageHeader">
            <summary>
            Represents header/footer parts of the Editor page.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.PageHeader.#ctor">
            <summary>
            Initializes a new instance of <c>PageHeader</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.PageHeader.#ctor(Stimulsoft.Editor.IEditPage)">
            <summary>
            Initializes a new instance of <c>PageHeader</c> class with specified owner.
            </summary>
            <param name="page">Specifies <c>IEditPage</c> that owns this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.PageHeader.Finalize">
            <summary>
            Destroys the instance of the <c>PageHeader</c> class.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.PageHeader.GetTextToPaint(System.String,System.Int32,System.Int32)">
            <summary>
            Replaces all tags in the given text by their values.
            </summary>
            <param name="text">Specifies text to format.</param>
            <param name="pageIndex">Specifies index of page.</param>
            <param name="pageCount">Specifies page count.</param>
            <returns>Formatted text.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.PageHeader.BeginUpdate">
            <summary>
            prevents header updating until calling <c>PageHeader.EndUpdate</c> method.
            </summary>
            <returns>Number of header updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.PageHeader.EndUpdate">
            <summary>
            Re-enables header updating, that was turn of by calling <c>PageHeader.BeginUpdate</c> method.
            </summary>
            <returns>Number of header updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.PageHeader.Update">
            <summary>
            Invalidates the header.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.PageHeader.Paint(Stimulsoft.Editor.IPainter,System.Drawing.Rectangle,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Draws page header/footer on the specified graphic surface.
            </summary>
            <param name="painter">Represents <c>IPainter</c> surface to draw on.</param>
            <param name="rect">Rectangular area of header/footer to draw on.</param>
            <param name="pageIndex">Index of page which header/footer is drawing.</param>
            <param name="pageCount">Total number of pages.</param>
            <param name="pageNumbers">Specifies whether header/footer should draw page number.</param>
        </member>
        <member name="M:Stimulsoft.Editor.PageHeader.Assign(Stimulsoft.Editor.IPageHeader)">
            <summary>
            Copies the contents of another <c>IPageHeader</c> object.
            </summary>
            <param name="source">Specifies <c>IPageHeader</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.PageHeader.ResetFont">
            <summary>
            Resets the <c>PageHeader.Font</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.PageHeader.ResetFontColor">
            <summary>
            Resets the <c>PageHeader.FontColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.PageHeader.ResetOffset">
            <summary>
            Resets the <c>PageHeader.Offset</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.PageHeader.ResetReverseOnEvenPages">
            <summary>
            Resets the <c>PageHeader.ReverseOnEvenPages</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.PageHeader.ShouldSerializeFontColor">
            <summary>
            Indicates whether the <c>FontColor</c> property should be persisted.
            </summary>
            <returns>True if <c>FontColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.PageHeader.ShouldSerializeOffset">
            <summary>
            Indicates whether the <c>Offset</c> property should be persisted.
            </summary>
            <returns>True if <c>Offset</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.PageHeader.ShouldSerializeLeftText">
            <summary>
            Indicates whether the <c>LeftText</c> property should be persisted.
            </summary>
            <returns>True if <c>LeftText</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.PageHeader.ShouldSerializeRightText">
            <summary>
            Indicates whether the <c>RightText</c> property should be persisted.
            </summary>
            <returns>True if <c>RightText</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.PageHeader.ShouldSerializeCenterText">
            <summary>
            Indicates whether the <c>CenterText</c> property should be persisted.
            </summary>
            <returns>True if <c>CenterText</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.PageHeader.ShouldSerializeFont">
            <summary>
            Indicates whether the <c>Font</c> property should be persisted.
            </summary>
            <returns>True if <c>Font</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.PageHeader.LeftText">
            <summary>
            Gets or sets a string that appears at the left part of the header/footer area.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.PageHeader.CenterText">
            <summary>
            Gets or sets a string that appears at the center of the header/footer area.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.PageHeader.RightText">
            <summary>
            Gets or sets a string that appears at the right part of the header/footer area.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.PageHeader.FontColor">
            <summary>
            Gets or sets font color used to draw header/footer text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.PageHeader.Font">
            <summary>
            Gets or sets font used to draw header/footer text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.PageHeader.Offset">
            <summary>
            Gets or sets indentation of the primary text edge.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.PageHeader.Visible">
            <summary>
            Gets or sets a value indicating whether the <c>PageHeader</c> is visible.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.PageHeader.ReverseOnEvenPages">
            <summary>
            Gets or sets a value indicating whether the <c>LeftText</c> and <c>RightText</c> interchanging on even page.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.PageHeader.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>PageHeader</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.EditPage">
            <summary>
            Represents a particular page within Edit control content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.EditPage.#ctor(Stimulsoft.Editor.EditPages)">
            <summary>
            Initializes a new instance of the <c>EditPage</c> with specified owner.
            </summary>
            <param name="pages">The <c>EditPages</c> that contains this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.EditPage.Paint(Stimulsoft.Editor.IPainter)">
            <summary>
            Draws <c>EditPage</c> object on specified graphic surface.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
        </member>
        <member name="M:Stimulsoft.Editor.EditPage.Update">
            <summary>
            Recalculates page bounds.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.EditPage.Update(System.Boolean)">
            <summary>
            Recalculates page bounds and content.
            </summary>
            <param name="changed">Indicates that page should recalculate it's content.</param>
        </member>
        <member name="M:Stimulsoft.Editor.EditPage.Invalidate">
            <summary>
            Invalidates the page.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.EditPage.BeginUpdate">
            <summary>
            Prevents page updating until calling <c>EditPage.EndUpdate</c> method.
            </summary>
            <returns>Number of page updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditPage.EndUpdate">
            <summary>
            Re-enables page updating, that was turn of by calling <c>EditPage.BeginUpdate</c> method.
            </summary>
            <returns>Number of page updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditPage.Assign(Stimulsoft.Editor.IEditPage)">
            <summary>
            Copies the contents of another <c>IEditPage</c> object.
            </summary>
            <param name="source">Specifies <c>IEditPage</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.EditPage.GetBounds(System.Boolean)">
            <summary>
            Retrieves a bounds of the <c>EditPage</c>.
            </summary>
            <param name="includeSpace">Specifies whether to include whitespace area.</param>
            <returns>Rectangle that bounded this <c>EditPage</c>.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditPage.ShouldSerializeLandscape">
            <summary>
            Indicates whether the <c>Landscape</c> property should be persisted.
            </summary>
            <returns>True if <c>Landscape</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditPage.ShouldSerializeMargins">
            <summary>
            Indicates whether the <c>Margins</c> property should be persisted.
            </summary>
            <returns>True if <c>Margins</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditPage.ShouldSerializePageKind">
            <summary>
            Indicates whether the <c>PageKind</c> property should be persisted.
            </summary>
            <returns>True if <c>PageKind</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditPage.ShouldSerializePageSize">
            <summary>
            Indicates whether the <c>PageSize</c> property should be persisted.
            </summary>
            <returns>True if <c>PageSize</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditPage.ShouldSerializeHorzOffset">
            <summary>
            Indicates whether the <c>HorzOffset</c> property should be persisted.
            </summary>
            <returns>True if <c>HorzOffset</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditPage.ShouldSerializeVertOffset">
            <summary>
            Indicates whether the <c>VertOffset</c> property should be persisted.
            </summary>
            <returns>True if <c>VertOffset</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.EditPage.StartLine">
            <summary>
            Represents starting line of the page within Edit control content in display coordinates.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPage.EndLine">
            <summary>
            Represents ending line of the page within Edit control content in display coordinates.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPage.Index">
            <summary>
            Represents ordinal number of page within the Edit control pages collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPage.PageSize">
            <summary>
            Gets or sets size (width and height) of this <c>EditPage</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPage.Margins">
            <summary>
            Gets or sets margins specifying offsets of editing area of this <c>EditPage</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPage.PageKind">
            <summary>
            Gets or sets kind of the page specifying standard paper size.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPage.Landscape">
            <summary>
            Gets or sets boolean value that indicates the page orientation (landscape or portrait).
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPage.HorzOffset">
            <summary>
            Gets or sets a horizontal indentation between pages.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPage.VertOffset">
            <summary>
            Gets or sets a vertical indentation between pages.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPage.IsFirstPage">
            <summary>
            Indicates whether this page is the first page within the Edit control pages collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPage.IsLastPage">
            <summary>
            Indicates whether this page is the last page within the Edit control pages collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPage.PrevPage">
            <summary>
            Represents a previous <c>EditPage</c> within the Edit control pages collection.
            </summary>
            <remarks>Returns null if the page represents the first page.</remarks>
        </member>
        <member name="P:Stimulsoft.Editor.EditPage.NextPage">
            <summary>
            Represents a next <c>EditPage</c> within the Edit control pages collection.
            </summary>
            <remarks>Returns null if the page represents the last page.</remarks>
        </member>
        <member name="P:Stimulsoft.Editor.EditPage.Origin">
            <summary>
            Represents page's absolute screen coordinate of the page within Edit control. 
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPage.BoundsRect">
            <summary>
            Represents a bounding area of the page withing Edit control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPage.ClientRect">
            <summary>
            Represents a client(editing) area of the page within Edit control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPage.PageRect">
            <summary>
            I don't now.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPage.PaintRect">
            <summary>
            Represents a bounding area exluding whitespace area of the page withing Edit control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPage.WhiteSpaceTopRect">
            <summary>
            Represents a whitespace area of the page withing Edit control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPage.WhiteSpaceBottomRect">
            <summary>
            Represents a whitespace area of the page withing Edit control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPage.Header">
            <summary>
            Represents <c>IPageHeader</c> specifying page header.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPage.Footer">
            <summary>
            Represents <c>IPageHeader</c> specifying page footer.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPage.PaintNumber">
            <summary>
            Get or sets a boolean value that indicates whether control should paint it's number at the bottom of page.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPage.UsePrinterSettings">
            <summary>
            Get or sets a boolean value that indicates whether control should use printer settings for calcuating page size, margin and orientation.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPage.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>EditPage</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.EditPages">
            <summary>
            Represents a collection of pages in the Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.#ctor">
            <summary>
            Initializes a new instance of the <c>EditPages</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.#ctor(Stimulsoft.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>EditPages</c> class with the specified owner.
            </summary>
            <param name="owner"><c>ISyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.		
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.InitDefaultPageSettings(System.Drawing.Printing.PageSettings)">
            <summary>
            Initializes page setting with default values.
            </summary>
            <param name="pageSettings">Specifies page settings to initialize.</param>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.Paint(Stimulsoft.Editor.IPainter,System.Drawing.Rectangle)">
            <summary>
            Draws pages collection on the graphic surface.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="rect">Rectangular area of pages collection to draw on.</param>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.Add(Stimulsoft.Editor.IEditPage)">
            <summary>
            Adds specified <c>IEditPage</c> to the collection.
            </summary>
            <param name="page"><c>IEditPage</c> to add.</param>
            <returns>Index of <c>IEditPage</c> that is added</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.Remove(Stimulsoft.Editor.IEditPage)">
            <summary>
            Removes specified <c>IEditPage</c> from the collection.
            </summary>
            <param name="page"><c>IEditPage</c> to remove.</param>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.Clear">
            <summary>
            Removes all items from the pages collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.BeginUpdate">
            <summary>
            Prevents pages updating until calling <c>EditPages.EndUpdate</c> method.
            </summary>
            <returns>Number of pages updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.EndUpdate">
            <summary>
            Re-enables pages updating, that was turn of by calling <c>EditPages.BeginUpdate</c> method.
            </summary>
            <returns>Number of pages updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.Update(Stimulsoft.Editor.IEditPage)">
            <summary>
            Recalculates bounds of the specified page.
            </summary>
            <param name="page">Page to update.</param>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.Invalidate(Stimulsoft.Editor.IEditPage)">
            <summary>
            Invalidates specified page.
            </summary>
            <param name="page">Page to invalidate.</param>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.Update(Stimulsoft.Editor.IEditPage,System.Boolean)">
            <summary>
            Recalculates bounds and updates content of specified page.
            </summary>
            <param name="page">Page to update.</param>
            <param name="changed">Indicates that page should recalculate it's content.</param>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.Update">
            <summary>
            Recalculates bounds of all pages in the collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.Add">
            <summary>
            Adds a new <c>IEditPage</c> to the collection.
            </summary>
            <returns><c>IEditPage</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.GetPageIndexAtPoint(System.Int32,System.Int32)">
            <summary>
            Finds page at specified screen position.
            </summary>
            <param name="x">X-coordinate of the position (in screen coordinates) to find the page.</param>
            <param name="y">Y-coordinate of the position (in screen coordinates) to find the page.</param>
            <returns>Ordinal number of found page within the collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.GetPageIndexAtPoint(System.Drawing.Point)">
            <summary>
            Finds page at specified screen position.
            </summary>
            <param name="point">Position in screen coordinates to obtain the page.</param>
            <returns>Ordinal number of found page within the collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.GetPageIndexAt(System.Int32,System.Int32)">
            <summary>
            Finds page at specified display position.
            </summary>
            <param name="x">X-coordinate of the position (in display coordinates) to find the page.</param>
            <param name="y">Y-coordinate of the position (in display coordinates) to find the page.</param>
            <returns>Ordinal number of found page within the collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.GetPageIndexAt(System.Drawing.Point)">
            <summary>
            Finds page at specified display position.
            </summary>
            <param name="point">Position in display coordinates to obtain the page.</param>
            <returns>Ordinal number of found page within the collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.GetPageIndexAtCursor">
            <summary>
            Finds page at caret position.
            </summary>
            <returns>Ordinal number of found page within the collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.GetPageAt(System.Int32,System.Int32)">
            <summary>
            Finds page at specified display position.
            </summary>
            <param name="x">X-coordinate of the position (in display coordinates) to find the page.</param>
            <param name="y">Y-coordinate of the position (in display coordinates) to find the page.</param>
            <returns><c>IEditPage</c> containing specified position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.GetPageAt(System.Drawing.Point)">
            <summary>
            Finds page at specified display position.
            </summary>
            <param name="point">Position in display coordinates to obtain the page.</param>
            <returns><c>IEditPage</c> found.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.GetPageAtCursor">
            <summary>
            Finds page at caret position.
            </summary>
            <returns><c>IEditPage</c> containing caret.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.GetPageAtPoint(System.Int32,System.Int32)">
            <summary>
            Finds page at specified screen position.
            </summary>
            <param name="x">X-coordinate of the position (in screen coordinates) to find the page.</param>
            <param name="y">Y-coordinate of the position (in screen coordinates) to find the page.</param>
            <returns><c>IEditPage</c> containing specified position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.GetPageAtPoint(System.Drawing.Point)">
            <summary>
            Finds page at specified screen position.
            </summary>
            <param name="point">Position in screen coordinates to obtain the page.</param>
            <returns><c>IEditPage</c> containing specified position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.OnDrawHeader(System.String@)">
            <summary>
            Raises <c>DrawHeader</c> event.
            </summary>
            <param name="text">Specifies text to draw.</param>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.CancelDragging">
            <summary>
            Cancels dragging operation of the page ruler.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.ResetPageType">
            <summary>
            Resets <c>PageType</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.ResetBackColor">
            <summary>
            Resets <c>BackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.ResetBorderColor">
            <summary>
            Resets <c>BorderColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.ResetDisplayWhiteSpace">
            <summary>
            Resets <c>DisplayWhiteSpace</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.ResetRulerUnits">
            <summary>
            Resets <c>RulerUnits</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.ResetRulerOptions">
            <summary>
            Resets <c>RulerOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.ResetRulers">
            <summary>
            Resets <c>Rulers</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.ResetRulerBackColor">
            <summary>
            Resets <c>RulerBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.ResetRulerIndentBackColor">
            <summary>
            Resets <c>RulerIndentBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.ShouldSerializeBackColor">
            <summary>
            Indicates whether the <c>BackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>BackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.ShouldSerializeBorderColor">
            <summary>
            Indicates whether the <c>BorderColor</c> property should be persisted.
            </summary>
            <returns>True if <c>BorderColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.ShouldSerializeRulerOptions">
            <summary>
            Indicates whether the <c>RulerOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>RulerOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.ShouldSerializePageKind">
            <summary>
            Indicates whether the <c>PageKind</c> property should be persisted.
            </summary>
            <returns>True if <c>PageKind</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.ShouldSerializeRulerBackColor">
            <summary>
            Indicates whether the <c>RulerBackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>RulerBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditPages.ShouldSerializeRulerIndentBackColor">
            <summary>
            Indicates whether the <c>RulerIndentBackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>RulerIndentBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.EditPages.Item(System.Int32)">
            <summary>
            Provides an indexed access to individual <c>IEditPage</c> stored in the collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPages.PageType">
            <summary>
            Gets or sets value specifying the way of viewing Edit control's content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPages.DefaultPage">
            <summary>
            Gets or sets properties for default <c>IEditPage</c> object in the pages collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPages.DisplayWhiteSpace">
            <summary>
            Gets or sets a boolean value that indicates whether Edit control should draw whitespace area between pages.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPages.BackColor">
            <summary>
            Gets or sets a background color of each page in the collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPages.BorderColor">
            <summary>
            Gets or sets a border color of each page in the collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPages.Width">
            <summary>
            Represents pages width.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPages.Height">
            <summary>
            Represents total height of all pages in the collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPages.RulerBackColor">
            <summary>
            Gets or sets background color of the pages rulers.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPages.RulerIndentBackColor">
            <summary>
            Gets or sets background color of the indentations parts of the pages rulers.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPages.HorzRuler">
            <summary>
            Represents <c>IEditRuler</c> object used as a horizontal page ruler.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPages.VertRuler">
            <summary>
            Represents <c>IEditRuler</c> object used as a vertical page ruler.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPages.RulerUnits">
            <summary>
            Gets or sets measurement units of the pages rulers.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPages.RulerOptions">
            <summary>
            Gets or sets options of the pages rulers.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPages.Rulers">
            <summary>
            Gets or sets the rulers displayed withing Edit control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPages.Count">
            <summary>
            Represents a number of pages in the collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPages.Items">
            <summary>
            Represents a collection of <c>EditPage</c> objects.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPages.PageKind">
            <summary>
            Gets or sets kind of the pages specifying standard paper size.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPages.ApplyRulerToAllPages">
            <summary>
            Gets or sets a boolean value that indicates that changing of rulers indentation applies to all pages rather than to current page.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPages.Transparent">
            <summary>
            Gets or sets a boolean value that indicates whether Edit control should draw background around the pages.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.EditPages.DrawHeader">
            <summary>
            Occurs when header or footer part of each page is drawing.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditPages.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>EditPages</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.FmtExporter">
            <summary>
            Represents base class for exproting Edit control's content to various formats.
            </summary>
            <remarks>Do not create instances of this class directly; use derived classes like <c>XmlExporter</c> or <c>RtfExporter</c> instead.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.FmtExporter.Write(Stimulsoft.Editor.ISyntaxEdit,Stimulsoft.Editor.ISyntaxStrings,System.IO.TextWriter)">
            <summary>
            Writes content of the given <c>ISyntaxEdit</c> object to the specified target.
            </summary>
            <param name="owner"><c>ISyntaxEdit</c> object which content should be exported.</param>
            <param name="writer">Output TextWriter object.</param>
        </member>
        <member name="T:Stimulsoft.Editor.XmlExporter">
            <summary>
            Represents class that can export Edit control's content to XML format.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.RtfExporter">
            <summary>
            Represents class that can export Edit control's content to rich text format.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.RtfExporter.#ctor">
            <summary>
            Initializes a new instance of the <c>RtfExporter</c> class with default settings.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.HtmlExporter">
            <summary>
            Represents class that can export Edit control's content to HTML format.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.HtmlExporter.#ctor">
            <summary>
            Initializes a new instance of the <c>HtmlExporter</c> class with default settings.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.FmtImporter">
            <summary>
            Represents basic class to import Edit control's content from various formats.
            </summary>
            <remarks>Do not create instances of this class directly; use derived classes like <c>XmlImportet</c> and <c>RtfImporter</c>.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.FmtImporter.#ctor">
            <summary>
            Initializes a new instance of the <c>FmtImporter</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.FmtImporter.Read(Stimulsoft.Editor.ISyntaxEdit,System.IO.TextReader,System.Object)">
            <summary>
            Reads content of the given <c>ISyntaxEdit</c> object from the specified target.
            </summary>
            <param name="owner"><c>ISyntaxEdit</c> object which content should be read.</param>
            <param name="reader">Input TextReader object.</param>
            <param name="userData">Specifies user-defined data.</param>
        </member>
        <member name="P:Stimulsoft.Editor.FmtImporter.DefaultStyle">
            <summary>
            Defines default font style of the text.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.FmtImporter.ReadFormattedText">
            <summary>
            Occurs when formatted text is read.
            </summary>
            <remarks>The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.XmlImporter">
            <summary>
            Represents class that can import Edit control's content stored in XML format.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.RtfImporter">
            <summary>
            Represents class that can import Edit control's content stored in reach text format.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.HtmlImporter">
            <summary>
            Represents class that can import Edit control's content stored in HTML format.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.HtmlImporter.#ctor">
            <summary>
            Initializes a new instance of the <c>HtmlImporter</c> class with default settings.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.FmtFiler">
            <summary>
            Represents class that can export to and import from Edit control's content in various formats.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.FmtFiler.#ctor(Stimulsoft.Editor.ISyntaxEdit,Stimulsoft.Editor.ISyntaxStrings,Stimulsoft.Editor.ExportFormat)">
            <summary>
            Initializes a new instance of the <c>FmtFiler</c> with specified parameters.
            </summary>
            <param name="owner"><c>ISyntaxEdit</c> that owns this new instance.</param>
            <param name="lines"><c>ISyntaxStrings</c> that content to be saved.</param>
            <param name="format">Specifies format used to save/load Edit control's content.</param>
        </member>
        <member name="M:Stimulsoft.Editor.FmtFiler.Write(System.IO.TextWriter)">
            <summary>
            Writes content of the <c>ISyntaxEdit</c> owner to the specified target.
            </summary>
            <param name="writer">Output TextWriter object.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.FmtFiler.Read(System.IO.TextReader)">
            <summary>
            Reads content of the <c>ISyntaxEdit</c> owner from the specified target.
            </summary>
            <param name="reader">Input TextReader object.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.Gutter">
            <summary>
            Represents gutter at the left side of the Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.#ctor">
            <summary>
            Initializes a new instance of the <c>Gutter</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.#ctor(Stimulsoft.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>Gutter</c> class with specified owner.
            </summary>
            <param name="owner"><c>ISyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.Finalize">
            <summary>
            Destroys the instance of the <c>Gutter</c> class.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.Assign(Stimulsoft.Editor.IGutter)">
            <summary>
            Copies the contents from another <c>IGutter</c> object.
            </summary>
            <param name="source">Specifies <c>IGutter</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.OnClick(System.EventArgs)">
            <summary>
            Raises the <c>Click</c> event.
            </summary>
            <param name="args">The EventArgs that contains data to this event.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.OnDrawUserMargin(System.String@,System.Int32)">
            <summary>
            Raises the <c>DrawUserMargin</c> event.
            </summary>
            <param name="text">Specifies text to draw.</param>
            <param name="line">Specifies line number of the text being draw.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.OnDoubleClick(System.EventArgs)">
            <summary>
            Raises the <c>DoubleClick</c> event.
            </summary>
            <param name="args">The EventArgs that contains data to this event.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.Paint(Stimulsoft.Editor.IPainter,System.Drawing.Rectangle)">
            <summary>
            Draws gutter on the specified graphic surface.
            </summary>
            <param name="painter">Represents <c>IPainter</c> surface to draw on.</param>
            <param name="rect">Rectangular area of gutter to draw.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.Paint(Stimulsoft.Editor.IPainter,System.Drawing.Rectangle,System.Int32)">
            <summary>
            Draws gutter on the specified graphic surface.
            </summary>
            <param name="painter">Represents <c>IPainter</c> surface to draw on.</param>
            <param name="rect">Rectangular area of gutter to draw.</param>
            <param name="startLine">the first display line to draw</param>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ResetWidth">
            <summary>
            Resets the <c>Width</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ResetUserMarginWidth">
            <summary>
            Resets the <c>UserMarginWidth</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ResetUserMarginForeColor">
            <summary>
            Resets the <c>UserMarginForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ResetUserMarginBackColor">
            <summary>
            Resets the <c>UserMarginBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ResetUserMarginText">
            <summary>
            Resets the <c>UserMarginText</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ResetBrushColor">
            <summary>
            Resets the <c>BrushColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ResetPenColor">
            <summary>
            Resets the <c>PenColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ResetLineNumbersForeColor">
            <summary>
            Resets the <c>LineNumbersForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ResetLineNumbersBackColor">
            <summary>
            Resets the <c>LineNumbersBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ResetLineModificatorChangedColor">
            <summary>
            Resets the <c>LineModificatorChangedColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ResetLineModificatorSavedColor">
            <summary>
            Resets the <c>LineModificatorSavedColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ResetVisible">
            <summary>
            Resets the <c>Visible</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ResetLineNumbersStart">
            <summary>
            Resets the <c>LineNumbersStart</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ResetLineNumbersLeftIndent">
            <summary>
            Resets the <c>LineNumbersLeftIndent</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ResetLineNumbersRightIndent">
            <summary>
            Resets the <c>LineNumbersRightIndent</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ResetLineNumbersAlignment">
            <summary>
            Resets the <c>LineNumbersAlignment</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ResetOutliningLeftIndent">
            <summary>
            Resets the <c>OutliningLeftIndent</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ResetOutliningRightIndent">
            <summary>
            Resets the <c>OutliningRightIndent</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ResetOptions">
            <summary>
            Resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ResetBookMarkImageIndex">
            <summary>
            Resets the <c>BookMarkImageIndex</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ResetWrapImageIndex">
            <summary>
            Resets the <c>WrapImageIndex</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ResetDrawLineBookmarks">
            <summary>
            Resets the <c>DrawLineBookmarks</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ResetLineBookmarksColor">
            <summary>
            Resets the <c>LineBookmarksColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ResetShowBookmarkHints">
            <summary>
            Resets the <c>ShowBookmarkHints</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ShouldSerializeBrushColor">
            <summary>
            Indicates whether the <c>BrushColor</c> property should be persisted.
            </summary>
            <returns>True if <c>BrushColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ShouldSerializePenColor">
            <summary>
            Indicates whether the <c>PenColor</c> property should be persisted.
            </summary>
            <returns>True if <c>PenColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ShouldSerializeLineNumbersForeColor">
            <summary>
            Indicates whether the <c>LineNumbersForeColor</c> property should be persisted.
            </summary>
            <returns>True if <c>LineNumbersForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ShouldSerializeLineNumbersBackColor">
            <summary>
            Indicates whether the <c>LineNumbersBackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>LineNumbersBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ShouldSerializeLineBookmarksColor">
            <summary>
            Indicates whether the <c>LineBookmarksColor</c> property should be persisted.
            </summary>
            <returns>True if <c>LineBookmarksColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ShouldSerializeLineModificatorChangedColor">
            <summary>
            Indicates whether the <c>LineModificatorChangedColor</c> property should be persisted.
            </summary>
            <returns>True if <c>LineModificatorChangedColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ShouldSerializeLineModificatorSavedColor">
            <summary>
            Indicates whether the <c>LineModificatorSavedColor</c> property should be persisted.
            </summary>
            <returns>True if <c>LineModificatorSavedColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ShouldSerializeWidth">
            <summary>
            Indicates whether the <c>Width</c> property should be persisted.
            </summary>
            <returns>True if <c>Width</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ShouldSerializeUserMarginWidth">
            <summary>
            Indicates whether the <c>UserMarginWidth</c> property should be persisted.
            </summary>
            <returns>True if <c>UserMarginWidth</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ShouldSerializeUserMarginForeColor">
            <summary>
            Indicates whether the <c>UserMarginForeColor</c> property should be persisted.
            </summary>
            <returns>True if <c>UserMarginBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ShouldSerializeUserMarginBackColor">
            <summary>
            Indicates whether the <c>UserMarginBackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>UserMarginBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ShouldSerializeUserMarginText">
            <summary>
            Indicates whether the <c>UserMarginText</c> property should be persisted.
            </summary>
            <returns>True if <c>UserMarginText</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ShouldSerializeLineNumbersStart">
            <summary>
            Indicates whether the <c>LineNumbersStart</c> property should be persisted.
            </summary>
            <returns>True if <c>LineNumbersStart</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ShouldSerializeLineNumbersLeftIndent">
            <summary>
            Indicates whether the <c>LineNumbersLeftIndent</c> property should be persisted.
            </summary>
            <returns>True if <c>LineNumbersLeftIndent</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ShouldSerializeLineNumbersRightIndent">
            <summary>
            Indicates whether the <c>LineNumbersRightIndent</c> property should be persisted.
            </summary>
            <returns>True if <c>LineNumbersRightIndent</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ShouldSerializeOutliningLeftIndent">
            <summary>
            Indicates whether the <c>OutliningLeftIndent</c> property should be persisted.
            </summary>
            <returns>True if <c>OutliningLeftIndent</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ShouldSerializeOutliningRightIndent">
            <summary>
            Indicates whether the <c>OutliningRightIndent</c> property should be persisted.
            </summary>
            <returns>True if <c>OutliningRightIndent</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ShouldSerializeBookMarkImageIndex">
            <summary>
            Indicates whether the <c>BookMarkImageIndex</c> property should be persisted.
            </summary>
            <returns>True if <c>BookMarkImageIndex</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ShouldSerializeWrapImageIndex">
            <summary>
            Indicates whether the <c>WrapImageIndex</c> property should be persisted.
            </summary>
            <returns>True if <c>WrapImageIndex</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Gutter.ShouldSerializeOptions">
            <summary>
            Indicates whether the <c>Options</c> property should be persisted.
            </summary>
            <returns>True if <c>Options</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.Rect">
            <summary>
            Gets the rectangle that represents gutter area.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.Width">
            <summary>
            Gets or sets the width of the gutter.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.Brush">
            <summary>
            Gets or sets a Brush object used to paint gutter.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.BrushColor">
            <summary>
            Gets or sets background color of the gutter.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.Pen">
            <summary>
            Gets or sets a Pen object used to paint gutter line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.PenColor">
            <summary>
            Gets or sets color of the gutter line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.Visible">
            <summary>
            Gets or sets a value indicating whether the gutter area is visible.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.LineNumbersStart">
            <summary>
            Gets or sets number of the first line being painted on the gutter.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.LineNumbersLeftIndent">
            <summary>
            Gets or sets line numbers indentation from the left gutter border.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.LineNumbersRightIndent">
            <summary>
            Gets or sets line numbers indentation from the right gutter border.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.LineNumbersForeColor">
            <summary>
            Gets or sets foreground color for the line numbers.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.LineNumbersBackColor">
            <summary>
            Gets or sets background color for the line numbers.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.LineNumbersAlignment">
            <summary>
            Gets or sets line numbers alignment information.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.OutliningLeftIndent">
            <summary>
            Gets or sets outlining indentation from the left gutter border.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.OutliningRightIndent">
            <summary>
            Gets or sets outlining indentation from the right gutter border.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.Options">
            <summary>
            Gets or sets a <c>GutterOptions</c> that determine gutter appearance and behaviour.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.Images">
            <summary>
            Gets or sets an ImageList object that contains collection of images for gutter.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.BookMarkImageIndex">
            <summary>
            Gets or sets a value that specifies index of item in the image collection used to paint bookmark.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.WrapImageIndex">
            <summary>
            Gets or sets a value that specifies index of item in the image collection used to paint special mark indicating the wrapped line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.DrawLineBookmarks">
            <summary>
            Gets or sets a value indicating whether Edit control should draw triangle at bookmark position inside line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.ShowBookmarkHints">
            <summary>
            Gets or sets a value indicating whether Edit control should display text describing bookmark in form of tooltip window when mouse pointer is over the gutter bookmark.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.LineBookmarksColor">
            <summary>
            Gets or sets a color of the line bookmarks.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.LineModificatorChangedColor">
            <summary>
            Gets or sets a color of the line modificators(color stitch that indicates that the line content is unmodified, modified or saved) in the modified state.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.LineModificatorSavedColor">
            <summary>
            Gets or sets a color of the line modificators(color stitch that indicates that the line content is unmodified, modified or saved) in the saved state.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.UserMarginWidth">
            <summary>
            Gets or sets the width of the user margin area.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.UserMarginForeColor">
            <summary>
            Gets or sets foreground color of the line numbers.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.UserMarginBackColor">
            <summary>
            Gets or sets background color of the user margin.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.UserMarginText">
            <summary>
            Gets or sets text of the user margin.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Gutter.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>Gutter</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="E:Stimulsoft.Editor.Gutter.Click">
            <summary>
            Occurs when the <c>Gutter</c> clicked.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.Gutter.DoubleClick">
            <summary>
            Occurs when the <c>Gutter</c> double-clicked.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.Gutter.DrawUserMargin">
            <summary>
            Occurs when user margin part of each line is drawing.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.HyperText">
            <summary>
            This class is designed to recognize whether some text represents hypertext.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.HyperText.IsEmailString(System.String)">
            <summary>
            Indicates whether given text is e-mail address.
            </summary>
            <param name="text">Specifies string to check.</param>
            <returns>True if given text is e-mail address; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.HyperText.IsWWWString(System.String)">
            <summary>
            Indicates whether given text is internet address within the World Wide Web.
            </summary>
            <param name="text">Specifies string to check.</param>
            <returns>True if given text is internet address; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.HyperText.IsHttpString(System.String)">
            <summary>
            Indicates whether given text is internet address used Hypertext Transfer Protocol.
            </summary>
            <param name="text">Specifies string to check.</param>
            <returns>True if given text is internet address; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.HyperText.IsFtpString(System.String)">
            <summary>
            Indicates whether given text is address string for File Transfer Protocol.
            </summary>
            <param name="text">Specifies string to check.</param>
            <returns>True if given text is Ftp address; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.HyperText.IsGopherString(System.String)">
            <summary>
            Indicates whether given text is internet address string for the Gopher protocol.
            </summary>
            <param name="text">Specifies string to check.</param>
            <returns>True if given text is Gopher address; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.HyperText.IsFileString(System.String)">
            <summary>
            Indicates whether given text is address string for the local file on the disk.
            </summary>
            <param name="text">Specifies string to check.</param>
            <returns>True if given text is local file address; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.HyperText.IsHyperText(System.String)">
            <summary>
            Indicates whether given text is hypertext.
            </summary>
            <param name="text">Specifies string to check.</param>
            <returns>True if given text is hypertext; otherwise false.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.HyperTextEx">
            <summary>
            Represetns properties and methods to operate with hypertext within Edit control's content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.HyperTextEx.#ctor">
            <summary>
            Initializes a new instance of the <c>HyperTextEx</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.HyperTextEx.#ctor(Stimulsoft.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>HyperTextEx</c> class with specified owner.
            </summary>
            <param name="owner"><c>ISyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.HyperTextEx.IsHyperText(System.String)">
            <summary>
            Indicates whether given text is hypertext.
            </summary>
            <param name="text">Specifies string to check.</param>
            <returns>True if given text is hypertext; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.HyperTextEx.IsUrlAtPoint(System.Int32,System.Int32)">
            <summary>
            Indicates whether text at specified position is hypertext.
            </summary>
            <param name="x">The X-constituent of Point value to check.</param>
            <param name="y">The Y-constituent of Point value to check.</param>
            <returns>True if text at given position is hypertext; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.HyperTextEx.UrlJump(System.String)">
            <summary>
            Tries to launch default browser to process specified url.
            </summary>
            <param name="text">Specifies name of a document or application file to jump to.</param>
        </member>
        <member name="M:Stimulsoft.Editor.HyperTextEx.Assign(Stimulsoft.Editor.IHyperTextEx)">
            <summary>
            Copies the contents from another <c>IHyperTextEx</c> object.
            </summary>
            <param name="source">Specifies <c>IHyperTextEx</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.HyperTextEx.ResetHighlightUrls">
            <summary>
            Resets <c>HighlightUrls</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.HyperTextEx.ResetShowHints">
            <summary>
            Resets the <c>ShowHints</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.HyperTextEx.ResetUrlColor">
            <summary>
            Resets the <c>UrlColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.HyperTextEx.ResetUrlStyle">
            <summary>
            Resets the <c>UrlStyle</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.HyperTextEx.ShouldSerializeUrlColor">
            <summary>
            Indicates whether the <c>UrlColor</c> property should be persisted.
            </summary>
            <returns>True if <c>UrlColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.HyperTextEx.ShouldSerializeUrlStyle">
            <summary>
            Indicates whether the <c>UrlStyle</c> property should be persisted.
            </summary>
            <returns>True if <c>UrlStyle</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.HyperTextEx.HighlightUrls">
            <summary>
            Gets or sets a value indicating whether hypertext urls in the text should be highlighted.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.HyperTextEx.ShowHints">
            <summary>
            Gets or sets value indicating whether default hint for hypertext section needs displaying when user moves mouse over the hypertext.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.HyperTextEx.UrlColor">
            <summary>
            Gets or sets a value that represents color of highlighted urls.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.HyperTextEx.UrlStyle">
            <summary>
            Gets or sets font style of highlighted urls.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.HyperTextEx.JumpToUrl">
            <summary>
            Occurs when user attempts to jump to url by clicking on it in the Edit control.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.HyperTextEx.CheckHyperText">
            <summary>
            Occurs when a control needs checking whether some string represents hypertext.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.HyperTextEx.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>HyperTextEx</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.KeyListData">
            <summary>
            Represents data for a particular record in the Hashtable that contains keys with attached actions.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.KeyListData.#ctor">
            <summary>
            Initializes a new instance of the <c>KeyListData</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.KeyListData.#ctor(System.Windows.Forms.Keys,Stimulsoft.Editor.KeyEvent,Stimulsoft.Editor.KeyEventEx,System.Object,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>KeyListData</c> class with specified parameters.
            </summary>
            <param name="keyData">Specifies key data of this new instance.</param>
            <param name="action">Action that executes when the key is pressed.</param>
            <param name="actionEx">Extended action that executes when the key is pressed.</param>
            <param name="param">Object passed as a parameter to the extended action.</param>
            <param name="leaveState">State of the Edit control after key is pressed.</param>
        </member>
        <member name="M:Stimulsoft.Editor.KeyListData.ToString">
            <summary>
            Converts <c>KeyListData</c> content to string.
            </summary>
            <returns>String that represents this <c>KeyListData</c>.</returns>
        </member>
        <member name="F:Stimulsoft.Editor.KeyListData.KeyData">
            <summary>
            Key to which some action is attached.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.KeyListData.Param">
            <summary>
            Object passed as a parameter to the extended action.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.KeyListData.State">
            <summary>
            State of the Edit control before key is pressed.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.KeyListData.LeaveState">
            <summary>
            State of the Edit control after key is pressed.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.KeyListData.ActionEx">
            <summary>
            Extended action that executes when the key is pressed.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.KeyListData.Action">
            <summary>
            Action that executes when the key is pressed.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.KeyListData.EventName">
            <summary>
            String representation of the action 
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.MacroKeyListData.ParamStr">
            <summary>
            String representation of the parameter
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.MacroKeyListData.FullName">
            <summary>
            String representation of the action 
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.EventHandlers">
            <summary>
            Represents key events for default keymapping.
            </summary>
            <remarks>Normally you do not need to use this class directly, it's used internally by edit control.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.EventHandlers.#ctor(Stimulsoft.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>EventHandlers</c> class with specified owner.
            </summary>
            <param name="owner"><c>ISyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="P:Stimulsoft.Editor.EventHandlers.EventNames">
            <summary>
            Represents names of all available event handlers.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.KeyList">
            <summary>
            Represents list of key or its combinations with attached actions.
            </summary>
            <remarks>KeyList class is used to dinamically link key sequences with executing some actions within Edit control. You can use this class to customize reaction on pressing certain keys sequences in the Edit control.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.KeyList.#ctor(Stimulsoft.Editor.SyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>KeyList</c> class with specified owner.
            </summary>
            <param name="owner"><c>SyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.KeyList.Add(System.Windows.Forms.Keys,Stimulsoft.Editor.KeyEvent,Stimulsoft.Editor.KeyEventEx,System.Object,System.Int32,System.Int32)">
            <summary>
            Adds a new key to key collection with specified parameters.
            </summary>
            <param name="keyData">Key added to the collection.</param>
            <param name="action">Action that executes when the key is pressed.</param>
            <param name="actionEx">Extended action that executes when the key is pressed.</param>
            <param name="param">Object passed as a parameter to the extended action.</param>
            <param name="state">State of the Edit control when key is pressed.</param>
            <param name="leaveState">State of the Edit control after key is pressed.</param>
        </member>
        <member name="M:Stimulsoft.Editor.KeyList.Add(System.Windows.Forms.Keys,Stimulsoft.Editor.KeyEventEx,System.Object,System.Int32,System.Int32)">
            <summary>
            Adds a new key to key collection with specified parameters.
            </summary>
            <param name="keyData">Key added to the collection.</param>
            <param name="action">Extended action that executes when the key is pressed.</param>
            <param name="param">Object passed as a parameter to the extended action.</param>
            <param name="state">State of the Edit control when key is pressed.</param>
            <param name="leaveState">State of the Edit control after key is pressed.</param>
        </member>
        <member name="M:Stimulsoft.Editor.KeyList.Add(System.Windows.Forms.Keys,Stimulsoft.Editor.KeyEvent,System.Int32,System.Int32)">
            <summary>
            Adds a new key to key collection with specified parameters.
            </summary>
            <param name="keyData">Key added to the collection.</param>
            <param name="action">Action that executes when the key is pressed.</param>
            <param name="state">State of the Edit control before key is pressed.</param>
            <param name="leaveState">State of the Edit control after key is pressed.</param>
        </member>
        <member name="M:Stimulsoft.Editor.KeyList.Add(System.Windows.Forms.Keys,Stimulsoft.Editor.KeyEventEx,System.Object)">
            <summary>
            Adds a new key to key collection with specified parameters.
            </summary>
            <param name="keyData">Key added to the collection.</param>
            <param name="action">Extended action that executes when the key is pressed.</param>
            <param name="param">Object passed as a parameter to the extended action.</param>
        </member>
        <member name="M:Stimulsoft.Editor.KeyList.Add(System.Windows.Forms.Keys,Stimulsoft.Editor.KeyEvent)">
            <summary>
            Adds a new key to key collection with specified action.
            </summary>
            <param name="keyData">Key added to the collection.</param>
            <param name="action">Action that executes when the key is pressed.</param>
        </member>
        <member name="M:Stimulsoft.Editor.KeyList.AddNormal(System.Windows.Forms.Keys,Stimulsoft.Editor.KeyEventEx,System.Object)">
            <summary>
            Adds a new key to key collection with specified parameters and default (normal) state and leave state.
            </summary>
            <param name="keyData">Key added to the collection.</param>
            <param name="action">Extended action that executes when the key is pressed.</param>
            <param name="param">Object passed as a parameter to the extended action.</param>
        </member>
        <member name="M:Stimulsoft.Editor.KeyList.AddNormal(System.Windows.Forms.Keys,Stimulsoft.Editor.KeyEvent)">
            <summary>
            Adds a new key to key collection with specified parameters and default (normal) state and leave state.
            </summary>
            <param name="keyData">Key that added to the collection.</param>
            <param name="action">Action that executes when the key is pressed.</param>
        </member>
        <member name="M:Stimulsoft.Editor.KeyList.Remove(System.Windows.Forms.Keys,System.Int32)">
            <summary>
            Removes given key from the key collection.
            </summary>
            <param name="keyData">Key to remove.</param>
            <param name="state">State of the Edit control when the key is pressed.</param>
        </member>
        <member name="M:Stimulsoft.Editor.KeyList.Remove(System.Windows.Forms.Keys)">
            <summary>
            Removes given key from the key collection.
            </summary>
            <param name="keyData">Key to remove.</param>
        </member>
        <member name="M:Stimulsoft.Editor.KeyList.Clear">
            <summary>
            Removes all elements from the key list.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.KeyList.FindKey(System.Windows.Forms.Keys,System.Int32)">
            <summary>
            Indicates whether given key locates within the collection.
            </summary>
            <param name="keyData">Key to find.</param>
            <param name="state">State of the Edit control before the key is pressed.</param>
            <returns>True if the specified key exists; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.KeyList.ExecuteKey(System.Windows.Forms.Keys,System.Int32@)">
            <summary>
            Executes action or extended action attached to the specified key.
            </summary>
            <param name="keyData">Key for which action should be executed.</param>
            <param name="state">Receive leave state of specified action.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.KeyList.Handlers">
            <summary>
            Represents an event handlers collection which contains elements that can be used as a particular action attached to key or key combination from the <c>KeyList</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.KeyList.EventData">
            <summary>
            Represents array of event handlers associated with keys
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.LineSeparator">
            <summary>
            Represents properties and methods used to separate lines and highlight current line within the Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LineSeparator.#ctor">
            <summary>
            Initializes a new instance of the <c>LineSeparator</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LineSeparator.#ctor(Stimulsoft.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>LineSeparator</c> class with specified owner.
            </summary>
            <param name="owner"><c>ISyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LineSeparator.Assign(Stimulsoft.Editor.ILineSeparator)">
            <summary>
            Copies the contents from another <c>ILineSeparator</c> object.
            </summary>
            <param name="source">Specifies <c>ILineSeparator</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LineSeparator.NeedHighlight">
            <summary>
            Indicates whether Edit control owning the <c>LineSeparator</c> need to highlight the current line.
            </summary>
            <returns>True if need; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LineSeparator.NeedHide">
            <summary>
            Indicates whether Edit control owning the <c>LineSeparator</c> needs to hide highlighting of the current line when loosing input focus.
            </summary>
            <returns>True if need; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LineSeparator.TempHighlightLine(System.Int32)">
            <summary>
            Temporary highlights specifies line until Edit control state changed.
            </summary>
            <param name="index">Index of line to highlight.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LineSeparator.TempUnhighlightLine">
            <summary>
            Removes highlightning from temporary highlighted line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LineSeparator.ResetHighlightBackColor">
            <summary>
            Resets the <c>HighlightBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LineSeparator.ResetHighlightForeColor">
            <summary>
            Resets the <c>HighlightForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LineSeparator.ResetLineColor">
            <summary>
            Resets the <c>LineColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LineSeparator.ResetContentDividerColor">
            <summary>
            Resets the <c>ContentDividerColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LineSeparator.ResetOptions">
            <summary>
            Resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LineSeparator.ShouldSerializeHighlightBackColor">
            <summary>
            Indicates whether the <c>HighlightBackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>HighlightBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LineSeparator.ShouldSerializeHighlightForeColor">
            <summary>
            Indicates whether the <c>HighlightForeColor</c> property should be persisted.
            </summary>
            <returns>True if <c>HighlightForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LineSeparator.ShouldSerializeLineColor">
            <summary>
            Indicates whether the <c>LineColor</c> property should be persisted.
            </summary>
            <returns>True if <c>LineColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LineSeparator.ShouldSerializeContentDividerColor">
            <summary>
            Indicates whether the <c>ContentDividerColor</c> property should be persisted.
            </summary>
            <returns>True if <c>ContentDividerColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.LineSeparator.Options">
            <summary>
            Gets or sets a set of flags customizing appearance and behaviour of the <c>LineSeparator</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LineSeparator.HighlightBackColor">
            <summary>
            Gets or sets a background color of highlighted line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LineSeparator.HighlightForeColor">
            <summary>
            Gets or sets a foreground color of highlighted line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LineSeparator.LineColor">
            <summary>
            Gets or sets color of horizontal lines between particular lines in the Edit control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LineSeparator.ContentDividerColor">
            <summary>
            Gets or sets color of horizontal lines between particular sections (for example, methods) in the Edit control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LineSeparator.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>LineSeparator</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.LStyle">
            <summary>
            This represents a particular style of some text line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LStyle.#ctor">
            <summary>
            Initializes a new instance of the <c>LStyle</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LStyle.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>LStyle</c> class with specified parameters.
            </summary>
            <param name="line">Specifies index of the text line.</param>
            <param name="ch">Specifies position of character within text line.</param>
            <param name="index">Specifies ordinal number of line style within line styles collection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LStyle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Stimulsoft.Editor.IRange)">
            <summary>
            Initializes a new instance of the <c>LStyle</c> class with specified parameters.
            </summary>
            <param name="line">Specifies index of the text line.</param>
            <param name="ch">Specifies position of character within text line.</param>
            <param name="index">Specifies ordinal number of line style within line styles collection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LStyle.Assign(Stimulsoft.Editor.LStyle)">
            <summary>
            Copies the contents of another bookmark object to the bookmark.
            </summary>
            <param name="source">Specifies bookmark to copy content from. Call <c>Assign</c> to copy <c>Line</c>, <c>Index</c> and <c>Pos</c> property from source bookmark.</param>
        </member>
        <member name="P:Stimulsoft.Editor.LStyle.Priority">
            <summary>
            Specifes priority of the line style.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.LineStyles">
            <summary>
            Represents properties and methods for a collection that binds line styles to individual lines within Edit control content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyles.#ctor">
            <summary>
            Initializes a new instance of the <c>LineStyles</c> class with default parameters.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyles.#ctor(Stimulsoft.Editor.ITextSource)">
            <summary>
            Initializes a new instance of the <c>LineStyles</c> class with specified owner.
            </summary>
            <param name="owner"><c>ITextSource</c> that owns this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyles.Assign(Stimulsoft.Editor.ILineStyles)">
            <summary>
            Copies the contents from another <c>ILineStyles</c> object.
            </summary>
            <param name="source">Specifies <c>ILineStyles</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyles.SetLineStyle(System.Drawing.Point,Stimulsoft.Editor.IRange,System.Int32,System.Int32)">
            <summary>
            Sets given line style to the specified line.
            </summary>
            <param name="position">Position of the line style.</param>
            <param name="range">Range where line style is defined.</param>
            <param name="priority">Priority of the line style. This parameter is usefull only for line styles having image indexes</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyles.GetLineStyle(System.Int32)">
            <summary>
            Finds the first element in the line style collection located at the specified text line.
            </summary>
            <param name="line">Index of the text line.</param>
            <returns>Index of the found line style if the search succeed; otherwise -1.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyles.GetLineStyles(System.Int32,System.Collections.IList)">
            <summary>
            Finds all linestyles in the <c>LineStyles</c> collection located inside specified line.
            </summary>
            <param name="line">The index of the line to find.</param>
            <param name="list">Represents the collection of the bookmarks located within the specified range.</param>
            <returns>The number of the linestyles located within the specified range.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyles.SetLineStyle(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets given line style to the specified line.
            </summary>
            <param name="line">Index of the text line.</param>
            <param name="priority">Priority of the line style. This parameter is usefull only for line styles having image indexes</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyles.SetLineStyle(Stimulsoft.Editor.IRange,System.Int32,System.Int32)">
            <summary>
            Sets given line style to the specified line.
            </summary>
            <param name="range">Range where line style is defined.</param>
            <param name="priority">Priority of the line style. This parameter is usefull only for line styles having image indexes</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyles.SetLineStyle(System.Drawing.Point,System.Int32,System.Int32)">
            <summary>
            Sets given line style to the specified line.
            </summary>
            <param name="position">Position of the line style.</param>
            <param name="priority">Priority of the line style. This parameter is usefull only for line styles having image indexes</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyles.SetLineStyle(System.Int32,System.Int32)">
            <summary>
            Sets given line style to the specified line.
            </summary>
            <param name="line">Index of the text line.</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyles.RemoveLineStyle(System.Int32)">
            <summary>
            Removes the first line style at the specified line.
            </summary>
            <param name="line">Index of the text line.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyles.ToggleLineStyle(System.Int32,System.Int32)">
            <summary>
            Sets or removes line style at the specified line.
            </summary>
            <param name="line">Index of line to toggle line style.</param>
            <param name="style">Index of style.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyles.ToggleLineStyle(System.Int32,System.Int32,System.Int32)">
            <summary>
            sets or removes line style at the specified line.
            </summary>
            <param name="line">Index of line to toggle line style.</param>
            <param name="priority">Priority of the line style. This parameter is usefull only for line styles having image indexes</param>
            <param name="style">Index of style.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyles.GetLStyle(System.Int32)">
            <summary>
            Finds the first element in the line style collection that locates within the specified text line.
            </summary>
            <param name="index">Index of the line to locate line style.</param>
            <returns><c>LStyle</c> object representing located line style if search is successfull; otherwise null.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.LineStyle">
            <summary>
            Represents a particular style of the line in Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyle.#ctor">
            <summary>
            Initializes a new instance of the <c>LineStyle</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyle.#ctor(Stimulsoft.Editor.SyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>LineStyle</c> class with specified owner.
            </summary>
            <param name="owner"><c>SyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyle.#ctor(Stimulsoft.Editor.SyntaxEdit,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Int32,Stimulsoft.Editor.LineStyleOptions)">
            <summary>
            Initializes a new instance of the <c>LineStyle</c> class with specified parameters.
            </summary>
            <param name="owner"><c>SyntaxEdit</c> that owns this new instance.</param>
            <param name="name">Name of the new instance.</param>
            <param name="foreColor">Foreground color of the new instance.</param>
            <param name="backColor">Background color of the new instance.</param>
            <param name="penColor">Pen color of the new instance.</param>
            <param name="imageIndex">Image index of the new instance.</param>
            <param name="options">Options of the new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyle.Assign(Stimulsoft.Editor.ILineStyle)">
            <summary>
            Copies the contents from another <c>ILineStyle</c> object.
            </summary>
            <param name="source">Specifies <c>ILineStyle</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyle.GetBackColor(System.Drawing.Color)">
            <summary>
            Returns <c>BackColor</c> or <c>ForeColor</c> depending on <c>Options</c>.
            </summary>
            <param name="color">Specifies default color to return if <c>BackColor</c> or <c>ForeColor</c> represent empty color.</param>
            <returns><c>ForeColor</c> if  <c>LineStyleOptions.InvertColors</c> is on; otherwise <c>BackColor</c>.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyle.GetForeColor(System.Drawing.Color)">
            <summary>
            Returns <c>ForeColor</c> or <c>BackColor</c> depending on <c>Options</c>.
            </summary>
            <param name="color">Specifies default color to return if <c>BackColor</c> or <c>ForeColor</c> represent empty color.</param>
            <returns><c>BackColor</c> if  <c>LineStyleOptions.InvertColors</c> is on; otherwise <c>ForeColor</c>.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyle.ResetBackColor">
            <summary>
            Resets the <c>BackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyle.ResetForeColor">
            <summary>
            Resets the <c>ForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyle.ResetPenColor">
            <summary>
            Resets the <c>PenColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyle.ResetOptions">
            <summary>
            Resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyle.ResetImageIndex">
            <summary>
            Resets the <c>ImageIndex</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyle.ShouldSerializeForeColor">
            <summary>
            Indicates whether the <c>ForeColor</c> property should be persisted.
            </summary>
            <returns>True if <c>ForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyle.ShouldSerializeBackColor">
            <summary>
            Indicates whether the <c>BackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>BackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyle.ShouldSerializePenColor">
            <summary>
            Indicates whether the <c>PenColor</c> property should be persisted.
            </summary>
            <returns>True if <c>PenColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LineStyle.ShouldSerializeOptions">
            <summary>
            Indicates whether the <c>Options</c> property should be persisted.
            </summary>
            <returns>True if <c>Options</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.LineStyle.Name">
            <summary>
            Gets or sets name of the <c>LineStyle</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LineStyle.ForeColor">
            <summary>
            Gets or sets foreground color of the <c>LineStyle</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LineStyle.BackColor">
            <summary>
            Gets or sets background color of the <c>LineStyle</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LineStyle.PenColor">
            <summary>
            Gets or sets background color of the <c>LineStyle</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LineStyle.ForeColorString">
            <summary>
            Gets or sets string representation of <c>ForeColor</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LineStyle.BackColorString">
            <summary>
            Gets or sets string representation of <c>BackColor</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LineStyle.PenColorString">
            <summary>
            Gets or sets string representation of <c>PenColor</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LineStyle.ImageIndex">
            <summary>
            Gets or sets the index of the image displayed for the <c>LineStyle</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LineStyle.Options">
            <summary>
            Gets or sets display options for the <c>LineStyle</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LineStyle.Owner">
            <summary>
            Gets <c>SyntaxEdit</c> control that owns this <c>LineStyle</c>.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.LineStylesEx">
            <summary>
            Represents a collection of the <c>ILineStyle</c> objects for Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LineStylesEx.#ctor(Stimulsoft.Editor.SyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>LineStylesEx</c> class with specified owner.
            </summary>
            <param name="owner"><c>SyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LineStylesEx.Assign(Stimulsoft.Editor.ILineStylesEx)">
            <summary>
            Copies the contents from another <c>ILineStylesEx</c> object.
            </summary>
            <param name="source">Specifies <c>ILineStylesEx</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LineStylesEx.GetLineStyle(System.Int32)">
            <summary>
            Returns <c>ILineStyle</c> within the line styles collection by its index.
            </summary>
            <param name="index">Index of <c>ILineStyle</c>.</param>
            <returns><c>ILineStyle</c> with specified Index property.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.LineStylesEx.Item(System.Int32)">
            <summary>
            Provides an inxeded access to <c>LineStyle</c> objects within <c>LineStylesEx</c> collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LineStylesEx.IndexOfName(System.String)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified Name in the line style collection.
            </summary>
            <param name="name">Name of line style to locate.</param>
            <returns>Index of the style found.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LineStylesEx.AddLineStyle">
            <summary>
            Adds a new <c>LineStyle</c> to the collection.
            </summary>
            <returns>Index of the added element.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LineStylesEx.AddLineStyle(System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Int32,Stimulsoft.Editor.LineStyleOptions)">
            <summary>
            Adds a new <c>LineStyle</c> with specified parameters to the collection.
            </summary>
            <param name="name">Name of new <c>LineStyle</c>.</param>
            <param name="foreColor">Foreground color of new <c>LineStyle</c>.</param>
            <param name="backColor">Background color of new <c>LineStyle</c>.</param>
            <param name="penColor">Pen color of new <c>LineStyle</c>.</param>
            <param name="imageIndex">Image index of new <c>LineStyle</c>.</param>
            <param name="options">Options of new <c>LineStyle</c>.</param>
            <returns>Index of the added element in the <c>LineStyle</c> collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LineStylesEx.Add(Stimulsoft.Editor.LineStyle)">
            <summary>
            Adds specified <c>LineStyle</c> to the collection.
            </summary>
            <param name="value"><c>LineStyle</c> to add.</param>
            <returns>Index of the added element in the <c>LineStyle</c> collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LineStylesEx.AddRange(Stimulsoft.Editor.LineStyle[])">
            <summary>
            Adds an array of <c>LineStyle</c> objects to the end of the collection.
            </summary>
            <param name="values">An array of <c>LineStyle</c> objects to add to the collection.</param>
        </member>
        <member name="P:Stimulsoft.Editor.LineStylesEx.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>LineStyleEx</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.Margin">
            <summary>
            Represents an appearance of the margin in Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Margin.#ctor">
            <summary>
            Initializes a new instance of the <c>Margin</c> with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Margin.#ctor(Stimulsoft.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>Margin</c> with specified owner.
            </summary>
            <param name="owner"><c>ISyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Margin.Finalize">
            <summary>
            Destroys the instance of the <c>Margin</c> class.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Margin.Assign(Stimulsoft.Editor.IMargin)">
            <summary>
            Copies the contents from another <c>IMargin</c> object.
            </summary>
            <param name="source">Specifies <c>IMargin</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Margin.Contains(System.Int32,System.Int32)">
            <summary>
            Indicates whether <c>Margin</c> area contains given position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies the point to check-up.</param>
            <param name="y">The Y-constituent of the Point value that specifies the point to check-up.</param>
            <returns>True if contains; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Margin.DragTo(System.Int32,System.Int32)">
            <summary>
            Moves <c>Margin</c> to specified position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies position to drag.</param>
            <param name="y">The Y-constituent of the Point value that specifies position to drag.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Margin.CancelDragging">
            <summary>
            Cancels dragging the margin.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Margin.Paint(Stimulsoft.Editor.IPainter,System.Drawing.Rectangle)">
            <summary>
            Draws <c>Margin</c> object on the specified graphic surface.
            </summary>
            <param name="painter">Represents <c>IPainter</c> surface to draw on.</param>
            <param name="rect">Rectangular area of <c>Margin</c> to draw.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Margin.PaintColumn(Stimulsoft.Editor.IPainter,System.Drawing.Rectangle)">
            <summary>
            Draws margin column on the specified graphic surface.
            </summary>
            <param name="painter">Represents <c>IPainter</c> surface to draw on.</param>
            <param name="rect">Rectangular area of <c>Margin</c> to draw.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Margin.ResetPenColor">
            <summary>
            Resets the <c>PenColor</c> to the default value.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Stimulsoft.Editor.Margin.ResetColumnsPenColor" -->
        <!-- Badly formed XML comment ignored for member "M:Stimulsoft.Editor.Margin.ResetPosition" -->
        <member name="M:Stimulsoft.Editor.Margin.ResetColumnPositions">
            <summary>
            Resets the <c>Position</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Margin.ResetVisible">
            <summary>
            Resets the <c>Visible</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Margin.ResetColumnsVisible">
            <summary>
            Resets the <c>ColumnsVisible</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Margin.ResetAllowDrag">
            <summary>
            Resets the <c>AllowDrag</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Margin.ResetShowHints">
            <summary>
            Resets the <c>ShowHints</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Margin.ShouldSerializePosition">
            <summary>
            Indicates whether the <c>Position</c> property should be persisted.
            </summary>
            <returns>True if <c>Position</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Margin.ShouldSerializeColumnPositions">
            <summary>
            Indicates whether the <c>ColumnPositions</c> property should be persisted.
            </summary>
            <returns>True if <c>ColumnPositions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Margin.ShouldSerializePenColor">
            <summary>
            Indicates whether the <c>PenColor</c> property should be persisted.
            </summary>
            <returns>True if <c>PenColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Margin.ShouldSerializeColumnPenColor">
            <summary>
            Indicates whether the <c>ColumnPenColor</c> property should be persisted.
            </summary>
            <returns>True if <c>ColumnPenColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.Margin.Position">
            <summary>
            Gets or sets value indicating position, in characters, of the vertical line within the text portion of the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Margin.ColumnPositions">
            <summary>
            Gets or sets the character columns where additional column margin will be drawn.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Margin.Pen">
            <summary>
            Gets or sets Pen object that describes the color and pattern of <c>Margin</c> line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Margin.ColumnPen">
            <summary>
            Gets or sets Pen object that describes the color and pattern of <c>Margin</c> line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Margin.Visible">
            <summary>
            Gets or sets a value indicating whether vertical line should be painted.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Margin.ColumnsVisible">
            <summary>
            Gets or sets a value indicating whether column margins should be painted.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Margin.PenColor">
            <summary>
            Gets or sets a color of the margin line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Margin.ColumnPenColor">
            <summary>
            Gets or sets a color of the column margin line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Margin.AllowDrag">
            <summary>
            Indicates whether drag operation can performed to <c>Margin</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Margin.ShowHints">
            <summary>
            Gets or sets a value indicating whether <c>Margin</c> should display some hint when mouse pointer is over the margin area.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Margin.IsDragging">
            <summary>
            Indicates whether <c>Margin</c> is in dragging state.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Margin.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>Margin</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.Outlining">
            <summary>
            Represents properties and methods that affects appearance and behaviour of outline sections within Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.#ctor(Stimulsoft.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>Outlining</c> class with specified owner.
            </summary>
            <param name="owner"><c>ISyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.Outline(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an outlining section based on specific scope at the specific level of outline nesting.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.Outline(System.Int32,System.Int32)">
            <summary>
            Creates an outlining section based on specific scope within current outlined section.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.Outline(System.Drawing.Point,System.Drawing.Point,System.Int32)">
            <summary>
            Creates an outlining section based on specific scope at the specific level of outline nesting.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.Outline(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Creates an outlining section based on specific scope within current outlined section.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.Outline(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Creates an outlining section based on specific scope at specific level of outline nesting and with specific text substituting collapsed text.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <param name="outlineText">Specifies text substituting collapsed text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.Outline(System.Int32,System.Int32,System.String)">
            <summary>
            Creates an outlining section based on specific scope within current outlined section and with specific text substituting  collapsed text.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <param name="outlineText">Specifies first line of section to outline.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.Outline(System.Drawing.Point,System.Drawing.Point,System.Int32,System.String)">
            <summary>
            Creates an outlining section based on specific scope at specific level of outline nesting and with specific text substituting collapsed text.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <param name="outlineText">Specifies text to substitute collapsed text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.Outline(System.Drawing.Point,System.Drawing.Point,System.String)">
            <summary>
            Creates an outlining section based on specific scope within current outlined section and with specific text substituting collapsed text.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <param name="outlineText">Specifies text to substitute collapsed text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.UnOutline(System.Drawing.Point)">
            <summary>
            Removes outlined section at the specific position.
            </summary>
            <param name="point">Specifies position in the text.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.UnOutline(System.Int32)">
            <summary>
            Removes all outline sections containing the given line.
            </summary>
            <param name="index">Specifies line in the text.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.UnOutline">
            <summary>
            Removes all outlined sections from outline collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.GetOutlineRange(System.Drawing.Point)">
            <summary>
            Returns outline section, which represents text substituting outlined section and level of outline nesting at the specific position.
            </summary>
            <param name="point">Specifies position in the text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.GetOutlineRange(System.Int32)">
            <summary>
            Returns outline section, which represents text substituting outlined section and level of outline nesting at the specific line.
            </summary>
            <param name="index">Index of line in the text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.GetOutlineRanges(System.Collections.IList,System.Int32)">
            <summary>
            Fills list specified by ranges parameter with all outline sections containing specific line.
            </summary>
            <param name="ranges">Specifles list to fill.</param>
            <param name="index">Specifies index of line in text coordinates.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.GetOutlineRanges(System.Collections.IList,System.Drawing.Point)">
            <summary>
            Fills list specified by ranges parameter with all outline sections containing specific position.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="point">Specifies position in the text.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.GetOutlineRanges(System.Collections.IList,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Fills list specified by ranges parameter with all outline sections containing specific range.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="startPoint">Specifies start position in the text.</param>
            <param name="endPoint">Specifies end position in the text.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.GetOutlineRanges(System.Collections.IList)">
            <summary>
            Fills list specified by ranges parameter with all existing outline sections.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.SetOutlineRanges(System.Collections.IList)">
            <summary>
            Updates <c>IOutlineRange</c> collection from given list of ranges. 
            </summary>
            <param name="ranges">Specifies new <c>IOutlineRange</c> collection to set.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.SetOutlineRanges(System.Collections.IList,System.Boolean)">
            <summary>
            Updates <c>IOutlineRange</c> collection from given list of ranges. 
            </summary>
            <param name="ranges">Specifies new <c>IOutlineRange</c> collection to set.</param>
            <param name="preserveVisible">Indicates whether new ranges should preserve collapsed state of existing outline sections.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.IsExpanded(System.Int32)">
            <summary>
            Indicates whether the outlined text at the specified line is expanded.
            </summary>
            <param name="index">The index of the line to test.</param>
            <returns>True if expanded; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.IsCollapsed(System.Int32)">
            <summary>
            Indicates whether the outlined text at the specified line is collapsed.
            </summary>
            <param name="index">The index of the line to test.</param>
            <returns>True if collapsed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.IsVisible(System.Drawing.Point)">
            <summary>
            Indicates whether the text at the specified position is visible, that is there is no collapsed outline section containing given position.
            </summary>
            <param name="point">The Point value that specifies position in the text.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.IsVisible(System.Int32)">
            <summary>
            Indicates whether the text at the specified line is visible, that is there is no collapsed outline section containing given line.
            </summary>
            <param name="index">Specifies index of line in the text.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.Collapse(System.Int32)">
            <summary>
            Collapses the specified line.
            </summary>
            <param name="index">The index of the line to collapse.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.Expand(System.Int32)">
            <summary>
            Expands outline section at the given line.
            </summary>
            <param name="index">The index of the line to expand.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.EnsureExpanded(System.Int32)">
            <summary>
            Makes all outline sections containing specified line expanded.
            </summary>
            <param name="index">Specifies position of the line in the text.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.EnsureExpanded(System.Drawing.Point)">
            <summary>
            Makes all outline sections containing specified position expanded.
            </summary>
            <param name="point">The Point value that specifies position in the text.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.FullExpand">
            <summary>
            Expands all outlining sections.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.FullCollapse">
            <summary>
            When implemented by a class, collapses all outlining sections.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.FullExpand(System.Collections.IList)">
            <summary>
            Expands all outline sections specified by Ranges parameter.
            </summary>
            <param name="ranges">Specifies <c>IOutlineRange</c> collection to expand.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.FullCollapse(System.Collections.IList)">
            <summary>
            Collapses all sections objects specified by Ranges parameter.
            </summary>
            <param name="ranges">Specifies <c>IOutlineRange</c> collection to collapse.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.OutlineText">
            <summary>
            Tries to perform lexical analysis of entire text to create outline sections based on results of this analysis.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.UnOutlineText">
            <summary>
            Removes all outline section from outline collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.ToggleOutlining">
            <summary>
            Toggles expanded state for all <c>IOutlineRange</c> objects in outline collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.CollapseToDefinitions">
            <summary>
            Collapses and expandes some outline section to get a quick overall view of the content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.GetOutlineHint(Stimulsoft.Editor.IOutlineRange)">
            <summary>
            Returns string that appears in the hint window when mouse pointer is over the outline button.
            </summary>
            <param name="range">Specifies the <c>IOutlineRange</c> object holding the hint.</param>
            <returns>Hint string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.Assign(Stimulsoft.Editor.IOutlining)">
            <summary>
            Copies the contents from another <c>IOutlining</c> object.
            </summary>
            <param name="source">Specifies <c>IOutlining</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.BeginUpdate">
            <summary>
            Prevents outline list updating until calling <c>EndUpdate</c> method.
            </summary>
            <returns>Number of outline list updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.EndUpdate">
            <summary>
            Re-enables outline list updating, that was turn of by calling <c>BeginUpdate</c> method.
            </summary>
            <returns>Number of outline list updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.ResetAllowOutlining">
            <summary>
            Resets <c>AllowOutlining</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.ResetOutlineOptions">
            <summary>
            Resets <c>OutlineOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.ResetOutlineColor">
            <summary>
            Resets <c>OutlineColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.ShouldSerializeOutlineColor">
            <summary>
            Indicates whether the <c>OutlineColor</c> property should be persisted.
            </summary>
            <returns>True if <c>OutlineColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Outlining.ShouldSerializeOutlineOptions">
            <summary>
            Indicates whether the <c>OutlineOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>OutlineOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.Outlining.CollapsedCount">
            <summary>
            Returns number of collapsed sections.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Outlining.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUndoUpdate</c> and <c>EndUndoUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Outlining.AllowOutlining">
            <summary>
            Gets or sets a value indicating whether outlining enabled.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Outlining.OutlineOptions">
            <summary>
            Gets or sets outlining options.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Outlining.OutlineColor">
            <summary>
            Gets or sets color that is used to draw outline button.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Outlining.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>Outlining</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.EditorPrintDocument">
            <summary>
            Defines a reusable object that sends output to a printer.
            </summary>
            <remarks>Normally you do not need to use this class. It's used internally by Edit control.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.EditorPrintDocument.#ctor(Stimulsoft.Editor.IPrinting,System.Drawing.Printing.PrinterSettings)">
            <summary>
            Initializes a new instance of the <c>EditorPrintDocument</c> class with specified parameters.
            </summary>
            <param name="printing">Specifies <c>IPrinting</c> object for print document.</param>
            <param name="settings">Specifies PrinterSettings for print document.</param>
        </member>
        <member name="M:Stimulsoft.Editor.EditorPrintDocument.Init(Stimulsoft.Editor.ISyntaxEdit)">
            <summary>
            Initializes <c>EditorPrintDocument</c> content with content of Edit control.
            </summary>
            <param name="edit">Represents an <c>ISyntaxEdit</c> object owning <c>EditorPrintDocument</c>.</param>
        </member>
        <member name="M:Stimulsoft.Editor.EditorPrintDocument.Init(Stimulsoft.Editor.ISyntaxEdit,System.Boolean)">
            <summary>
            Initializes <c>EditorPrintDocument</c> content with content of Edit control.
            </summary>
            <param name="edit">Represents an <c>ISyntaxEdit</c> object owning <c>EditorPrintDocument</c>.</param>
            <param name="calcPages">Indicates whether <c>EditorPrintDocument</c> should calculate count of pages to print.</param>
        </member>
        <member name="T:Stimulsoft.Editor.Printing">
            <summary>
            Represents class designed to print, preview and execute print setup dialog for Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Printing.#ctor(Stimulsoft.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>Printing</c> class with specified owner.
            </summary>
            <param name="owner"><c>ISyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Printing.OnCreatePrintEdit">
            <summary>
            Raises the <c>CreatePrintEdit</c> event.
            </summary>
            <returns><c>SyntaxEdit</c> that is created to print.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Printing.OnInitialized">
            <summary>
            Raises the <c>Initialized</c> event.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Printing.Print">
            <summary>
            Sends <c>Printing.PrintDocument</c> content to the printer.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Printing.ExecutePrintDialog">
            <summary>
            Initializes and runs print dialog.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Printing.ExecutePageSetupDialog">
            <summary>
            Initializes and runs page setup dialog.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Printing.ExecutePrintPreviewDialog">
            <summary>
            Initializes and runs print preview dialog.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Printing.ExecutePrintOptionsDialog">
            <summary>
            Initializes and runs print options dialog.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Printing.Assign(Stimulsoft.Editor.IPrinting)">
            <summary>
            Copies the contents of another <c>IPrinting</c> object.
            </summary>
            <param name="source">Specifies <c>IPrinting</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Printing.ResetOptions">
            <summary>
            Resets <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Printing.ResetAllowedOptions">
            <summary>
            Resets <c>AllowedOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Printing.ShouldSerializeOptions">
            <summary>
            Indicates whether the <c>Options</c> property should be persisted.
            </summary>
            <returns>True if <c>Options</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Printing.ShouldSerializeAllowedOptions">
            <summary>
            Indicates whether the <c>AllowedOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>AllowedOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.Printing.PrinterSettings">
            <summary>
            Represents settings for print document.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Printing.PrintDocument">
            <summary>
            Represents document to print, print preview or setup.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Printing.Options">
            <summary>
            Gets or sets <c>PrintOptions</c> that determines printing behaviour.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Printing.Header">
            <summary>
            Represents <c>IPageHeader</c> object to draw header of printing document.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Printing.Footer">
            <summary>
            Represents <c>IPageHeader</c> object to draw footer of printing document.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Printing.PrintDialog">
            <summary>
            Represents a dialog box that allows users to select a printer and choose which portions of the document to print.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Printing.PageSetupDialog">
            <summary>
            Represents a dialog box that allows users to manipulate page settings, including margins and paper orientation.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Printing.PrintPreviewDialog">
            <summary>
            Represents a dialog box that allows user to preview print document.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Printing.PrintOptionsDialog">
            <summary>
            Provides a dialog box that allows users to manipulate print settings.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Printing.AllowedOptions">
            <summary>
            Gets or sets Print Options dialog options, that can be changed by user.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Printing.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>Printing</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="E:Stimulsoft.Editor.Printing.CreatePrintEdit">
            <summary>
            Occurs when Edit control to print is about to be created.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.Printing.Initialized">
            <summary>
            Occurs when document to print is initialized.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.Resources">
            <summary>
            Represents container of various resources used by Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Resources.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <c>Resources</c> class with specified container.
            </summary>
            <param name="container">Specifies IContainer that contains this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Resources.#ctor">
            <summary>
            Initializes a new instance of the <c>Resources</c> class with default settings.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.EditRuler">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.EditRuler.#ctor">
            <summary>
            Initializes a new instance of the <c>EditRuler</c> with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.EditRuler.Finalize">
            <summary>
            Destroys the instance of the <c>EditRuler</c> class.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.EditRuler.Assign(Stimulsoft.Editor.IEditRuler)">
            <summary>
            Copies the contents of another <c>IEditRuler</c> object.
            </summary>
            <param name="source">Specifies <c>IEditRuler</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.EditRuler.CancelDragging">
            <summary>
            Cancels dragging operation.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.EditRuler.ResetOptions">
            <summary>
            Resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.EditRuler.ResetUnits">
            <summary>
            Resets the <c>Units</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.EditRuler.ResetIndentBackColor">
            <summary>
            Resets the <c>IndentBackColor</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditRuler.MarkWidth">
            <summary>
            Gets or sets default distance between adjacent marks.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditRuler.PageStart">
            <summary>
            Gets or sets beginning of the page part of the ruler.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditRuler.PageWidth">
            <summary>
            Gets or sets width, in pixels between left and right indentations indicating width of the page.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditRuler.RulerStart">
            <summary>
            Gets or sets position, in pixels, of left indentation specifying start of the page.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditRuler.RulerWidth">
            <summary>
            Gets or sets ruler width.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditRuler.Options">
            <summary>
            Gets or sets <c>RulerOptions</c> determining ruler behaviour.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditRuler.Units">
            <summary>
            Gets or sets ruler measurement units.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditRuler.IndentBackColor">
            <summary>
            Gets or sets background color of indentation parts of the ruler.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditRuler.Vertical">
            <summary>
            Gets or sets a boolean value indicating whether ruler has vertical or horizontal direction.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditRuler.IsDragging">
            <summary>
            Indicates whether some of ruler indentation is in dragging state.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.EditRuler.Change">
            <summary>
            Occurs when some of ruler indentations has changed its position due to the dragging operation.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IndentOrientation">
            <summary>
            Specifies alignment of an indentation part of ruler.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.IndentOrientation.Near">
            <summary>
            Specifies that indentation is positioned at the begin of the ruler.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.IndentOrientation.Far">
            <summary>
            Specifies that indentation is positioned at the end of the ruler.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.RulerIndent">
            <summary>
            Represents an indentation part of ruler.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.RulerIndent.#ctor">
            <summary>
            Initializes a new instance of the <c>RulerIndent</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.RulerIndent.#ctor(Stimulsoft.Editor.IndentOrientation,System.Int32)">
            <summary>
            Initializes a new instance of the <c>RulerIndent</c> class with specified parameters.
            </summary>
            <param name="orientation">Specifies orientation of this new instance.</param>
            <param name="indent">Specifies size of this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.RulerIndent.CancelDragging">
            <summary>
            Cancels dragging operation.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.RulerIndent.DrawIndent(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draws indentation part of ruler on the specified graphic surface.
            </summary>
            <param name="graph">The Graphics object to draw on.</param>
            <param name="rect">Rectangular area of ruler indentation to draw on.</param>
            <param name="vertical">Indicates whether indentation has vertical or horizontal direction.</param>
            <param name="indentBackColor">Specifies background color of this <c>RulerIndent</c>.</param>
            <param name="backColor">Specifies background color of <c>RulerIndent</c> slider.</param>
        </member>
        <member name="P:Stimulsoft.Editor.RulerIndent.Indent">
            <summary>
            Gets or sets size of this <c>RulerIndent</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.RulerIndent.Dragging">
            <summary>
            Indicates whether <c>RulerIndent</c> is in dragging state.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.RulerIndent.Orientation">
            <summary>
            Gets or sets <c>RulerIndent</c> alignment.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ScrollingButton">
            <summary>
            Represents button displayed at the scroll bar area of Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ScrollingButton.#ctor">
            <summary>
            Initializes a new instance of the <c>ScrollingButton</c> with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ScrollingButton.Finalize">
            <summary>
            Destroys the instance of the <c>ScrollingButton</c> class.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ScrollingButton.Assign(Stimulsoft.Editor.IScrollingButton)">
            <summary>
            Copies the contents of another <c>IScrollingButton</c> object.
            </summary>
            <param name="source">Specifies <c>IScrollingButton</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ScrollingButton.ShouldSerializeDescription">
            <summary>
            Indicates whether the <c>Description</c> property should be persisted.
            </summary>
            <returns>True if <c>Description</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.ScrollingButton.Owner">
            <summary>
            Gets or sets <c>IScrolling</c> control that owns this button.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ScrollingButton.Name">
            <summary>
            Gets or sets a string value that specifies the name of this <c>ScrollingButton</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ScrollingButton.ImageIndex">
            <summary>
            Gets or sets the index of the image displayed for this <c>ScrollingButton</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ScrollingButton.Images">
            <summary>
            Gets or sets the ImageList for this <c>ScrollingButton</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ScrollingButton.Description">
            <summary>
            Gets or sets a string value that specifies short description of this <c>ScrollingButton</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ScrollingButton.Visible">
            <summary>
            Gets or sets a value indicating whether this <c>ScrollingButton</c> is visible.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ScrollingButton.BorderStyle">
            <summary>
            Gets or sets the border style for this <c>ScrollingButton</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ScrollingButton.Button">
            <summary>
            Represents windowed control that appears as a button.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ScrollSplitter">
            <summary>
            Represents scrolling button that appears as splitter.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ScrollSplitter.#ctor">
            <summary>
            Initializes a new instance of the <c>ScrollSplitter</c> class with default settings.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ScrollingButtons">
            <summary>
            Represetns collection of <c>IScrollingButton</c> objects.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ScrollingButtons.#ctor(Stimulsoft.Editor.IScrolling)">
            <summary>
            Initializes a new instance of the <c>ScrollingButtons</c> class with specified owner.
            </summary>
            <param name="owner"><c>IScrolling</c> that owns this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ScrollingButtons.RemoveAt(System.Int32)">
            <summary>
            Removes button at the specified index of the button collection.
            </summary>
            <param name="index">The zero-based index of the button to remove.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ScrollingButtons.Clear">
            <summary>
            Removes all buttons from the button collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ScrollingButtons.Add(System.Object)">
            <summary>
            Adds a new button to the collection.
            </summary>
            <param name="value">Button to add.</param>
            <returns>The index of the added button.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ScrollingButtons.Assign(Stimulsoft.Editor.IScrollingButtons)">
            <summary>
            Copies the contents of another <c>IScrollingButtons</c> object.
            </summary>
            <param name="source">Specifies <c>IScrollingButtons</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ScrollingButtons.Add(Stimulsoft.Editor.ScrollingButton)">
            <summary>
            Adds a new button to the collection.
            </summary>
            <param name="value">Button to add.</param>
            <returns>The index of the added button.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ScrollingButtons.AddRange(Stimulsoft.Editor.ScrollingButton[])">
            <summary>
            Adds an array of <c>ScrollingButton</c> objects to the end of the collection.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Stimulsoft.Editor.ScrollingButtons.AddScrollingButton">
            <summary>
            Adds a new button to the collection.
            </summary>
            <returns>Index of the added button.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ScrollingButtons.AddScrollingButton(System.String,System.String,System.Int32)">
            <summary>
            Adds a new button with specified properties to the collection.
            </summary>
            <param name="name">Specifies button name.</param>
            <param name="description">Specifies button description.</param>
            <param name="imageIndex">Specifies index of button image.</param>
            <returns>Index of the added button.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ScrollingButtons.GetScrollingButton(System.Int32)">
            <summary>
            Provides an indexed access to individual <c>IScrollingButton</c> object stored in the collection.
            </summary>
            <param name="index">Index of <c>IScrollingButton</c> within the collection.</param>
            <returns><c>IScrollingButton</c> object at specified index.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.ScrollingButtons.Item(System.Int32)">
            <summary>
            Provides an indexed access to individual <c>ScrollingButton</c> stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.Scrolling">
            <summary>
            Represents properties and methods that describe scrolling behaviour of Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Scrolling.#ctor(Stimulsoft.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>Scrolling</c> class with specified owner.
            </summary>
            <param name="owner"><c>ISyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Scrolling.Finalize">
            <summary>
            Destroys the instance of the <c>Scrolling</c> class.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Scrolling.BeginUpdate">
            <summary>
            Prevents <c>Scrolling</c> updating until the <c>EndUpdate</c> method is called.
            </summary>
            <returns>Number of <c>Scrolling</c> updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Scrolling.EndUpdate">
            <summary>
            Re-enables <c>Scrolling</c> updating turned off by calling <c>BeginUpdate</c> method.
            </summary>
            <returns>Number of <c>Scrolling</c> updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Scrolling.Update">
            <summary>
            Updates the <c>Scrolling</c> size and position.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Scrolling.Assign(Stimulsoft.Editor.IScrolling)">
            <summary>
            Copies the contents of another <c>IScrolling</c> object.
            </summary>
            <param name="source">Specifies <c>IScrolling</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Scrolling.ResetDefaultHorzScrollSize">
            <summary>
            Resets the <c>DefaultHorzScrollSize</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Scrolling.ResetScrollBars">
            <summary>
            Resets the <c>ScrollBars</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Scrolling.ResetOptions">
            <summary>
            Resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Scrolling.ShouldSerializeOptions">
            <summary>
            Indicates whether the <c>Options</c> property should be persisted.
            </summary>
            <returns>True if <c>Options</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Scrolling.ShouldSerializeDefaultHorzScrollSize">
            <summary>
            Indicates whether the <c>DefaultHorzScrollSize</c> property should be persisted.
            </summary>
            <returns>True if <c>DefaultHorzScrollSize</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.Scrolling.Edit">
            <summary>
            Represents <c>ISyntaxEdit</c> that owns this <c>Scrolling</c> object.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Scrolling.ScrollBars">
            <summary>
            Gets or sets the type of scroll bars displayed in the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Scrolling.DefaultHorzScrollSize">
            <summary>
            Gets or sets a default size of horizontal scrollbar.
            </summary>
            <remarks>This property is applicable when control forces showing of the horizontal scroll bar.</remarks>
        </member>
        <member name="P:Stimulsoft.Editor.Scrolling.WindowOriginY">
            <summary>
            Gets or sets a value that represents first visible line within the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Scrolling.WindowOriginX">
            <summary>
            Gets or sets a index of the first visible character within the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Scrolling.Options">
            <summary>
            Gets or sets a <c>ScrollingOptions</c> that determine scrolling behaviour.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Scrolling.VScrollBar">
            <summary>
            Gets vertical scroll bar control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Scrolling.HScrollBar">
            <summary>
            Gets horizontal scroll bar control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Scrolling.HasHScrollBar">
            <summary>
            Indicates whether control has a horizontal scroll bar control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Scrolling.HasVScrollBar">
            <summary>
            Indicates whether control has a vertical scroll bar control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Scrolling.VertScrollbarVisible">
            <summary>
            When implemented by a class, indicates whether verticall scrollbar is visible
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Scrolling.HorzScrollbarVisible">
            <summary>
            When implemented by a class, indicates whether horizontal scrollbar is visible
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Scrolling.HorzButtons">
            <summary>
            Represents a collection of additional buttons displayed at the horizontal scroll bar area.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Scrolling.VertButtons">
            <summary>
            Represents a collection of additional buttons displayed at the vertical scroll bar area.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Scrolling.HorizontalButtons">
            <summary>
            Represents a collection of additional buttons displayed at the horizontal scroll bar area.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Scrolling.VerticalButtons">
            <summary>
            Represents a collection of additional buttons displayed at the vertical scroll bar area.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Scrolling.VertSplitButton">
            <summary>
            Represents a special button on the scroll area used to split Edit control vertically.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Scrolling.HorzSplitButton">
            <summary>
            Represents a special button on the scroll area used split Edit control horizontally.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Scrolling.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>Scrolling</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="E:Stimulsoft.Editor.Scrolling.VerticalScroll">
            <summary>
            Occurs when control scrolls its content in vertical direction. This can be caused by dragging vertical scroll thumb, or caret moving.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.Scrolling.HorizontalScroll">
            <summary>
            Occurs when control scrolls its content in horizonal direction. This can be caused by dragging horizonal scroll thumb, or caret moving.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.Scrolling.ScrollButtonClick">
            <summary>
            Occurs when some scrolling button is clicked.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.Selection">
            <summary>
            Represents class used to manage selected part of the Edit control's text content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.#ctor">
            <summary>
            Initializes a new instance of the <c>Selection</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.#ctor(Stimulsoft.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>Selection</c> class with specified owner.
            </summary>
            <param name="owner"><c>ISyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.Finalize">
            <summary>
            Destroys the instance of the <c>Selection</c> class.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.Assign(Stimulsoft.Editor.ISelection)">
            <summary>
            Copies the contents from another <c>ISelection</c> object.
            </summary>
            <param name="source">Specifies <c>ISelection</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.ChangeBlock(Stimulsoft.Editor.StringEvent)">
            <summary>
            Changes selected text by applying specified event to every line in the selected text.
            </summary>
            <param name="action">Specifies action to execute.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.ChangeBlock(Stimulsoft.Editor.StringEvent,System.Boolean,System.Boolean)">
            <summary>
            Changes selected text by applying specified event to every line in the selected text.
            </summary>
            <param name="action">Specifies action to execute.</param>
            <param name="changeIfEmpty">Indicates that action should be performed for current line if selection is empty.</param>
            <param name="extendFirstLine">Specifies that action should applied to whole lines in the selested region rather than to the selected portion of the line.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.GetSelectionForLine(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Sets left and right index of the first and last selected characters within specified line.
            </summary>
            <param name="index">Index of line within Edit control content.</param>
            <param name="left">Receives index of the first selected character.</param>
            <param name="right">Receives index of the last selected character.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.IsPosInSelection(System.Drawing.Point)">
            <summary>
            Indicates whether given position located within the selected region.
            </summary>
            <param name="position">Position to check.</param>
            <returns>True if position in selected region; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.IsPosInSelection(System.Int32,System.Int32)">
            <summary>
            Indicates whether given position located within the selected region.
            </summary>
            <param name="x">Horizontal coordinate of the position to check.</param>
            <param name="y">Vertical coordinate of the position to check.</param>
            <returns>True if position in selected region; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.Clear">
            <summary>
            Makes selection empty, without deleting its content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.Move(System.Drawing.Point,System.Boolean)">
            <summary>
            Moves or copies selected text to the specified position.
            </summary>
            <param name="position">Position to move or copy.</param>
            <param name="deleteOrigin">Indicates whether method should move or copy selected text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SetSelection(Stimulsoft.Editor.SelectionType,System.Drawing.Rectangle)">
            <summary>
            Sets new selection region with specified selection type.
            </summary>
            <param name="selType">New selection type.</param>
            <param name="selRect">New selected rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SetSelection(Stimulsoft.Editor.SelectionType,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Sets new selection region with specified selection type.
            </summary>
            <param name="selectionType">New selection type.</param>
            <param name="selectionStart">Left-top corner of the selected rectange.</param>
            <param name="selectionEnd">Right-bottom corner of the selected rectangle.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectCharLeft">
            <summary>
            Increases selected text to one character at the left side of the selection region.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectCharRight">
            <summary>
            Increases selected text to one character at the right side of the selection region.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectWordLeft">
            <summary>
            Increases selected text to the word located at the left side of the current position in the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectWordRight">
            <summary>
            Increases selected text to the word located at the right side of the current position in the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectLineUp">
            <summary>
            Increases selected text to the preceding line in the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectLineDown">
            <summary>
            Increases selected text to the following line in the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectPageUp">
            <summary>
            Increases selected text to the one page up in the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectPageDown">
            <summary>
            Increases selected text to the one page down in the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectScreenTop">
            <summary>
            Increases selected text to the begin of screen.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectScreenBottom">
            <summary>
            Increases selected text to the end of screen.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectLineBegin">
            <summary>
            Selects from current position to the beginning of current line in the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectLineEnd">
            <summary>
            Selects from current position to the end of current line in the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectFileBegin">
            <summary>
            Increases selected text to beginning of the control's content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectFileEnd">
            <summary>
            Increases selected text to end of the control's content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectLine">
            <summary>
            Selects entire line at the current position in the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectWord">
            <summary>
            Selects word at the current position in the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectCurrentWord">
            <summary>
            Tries to select word nearest to the current position in the control.
            </summary>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectNextWord">
            <summary>
            Select word next to the current word.
            </summary>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectAll">
            <summary>
            Selects all lines in the control's content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectCharLeft(Stimulsoft.Editor.SelectionType)">
            <summary>
            Increases selected text to one character at the left side of the selection region and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectCharRight(Stimulsoft.Editor.SelectionType)">
            <summary>
            Increases selected text to one character at the right side of the selection region and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectWordLeft(Stimulsoft.Editor.SelectionType)">
            <summary>
            Increases selected text to the word located at the left side of the current position in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectWordRight(Stimulsoft.Editor.SelectionType)">
            <summary>
            Increases selected text to the word located at the right side of the current position in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectLineUp(Stimulsoft.Editor.SelectionType)">
            <summary>
            Increases selected text to the preceding line in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectLineDown(Stimulsoft.Editor.SelectionType)">
            <summary>
             Increases selected text to the following line in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectPageUp(Stimulsoft.Editor.SelectionType)">
            <summary>
            Increases selected text to the one page up in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectPageDown(Stimulsoft.Editor.SelectionType)">
            <summary>
            Increases selected text to the one page down in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectScreenTop(Stimulsoft.Editor.SelectionType)">
            <summary>
            Increases selected text to the begin of the screen and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectScreenBottom(Stimulsoft.Editor.SelectionType)">
            <summary>
            Increases selected text to the end of the screen and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectLineBegin(Stimulsoft.Editor.SelectionType)">
            <summary>
            Selects from current position to the beginning of current line in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectLineEnd(Stimulsoft.Editor.SelectionType)">
            <summary>
            Selects from current position to the end of current line in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectFileBegin(Stimulsoft.Editor.SelectionType)">
            <summary>
            Increases selected text to beginning of the control's content and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectFileEnd(Stimulsoft.Editor.SelectionType)">
            <summary>
            Increases selected text to end of the control's content and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectToOpenBrace">
            <summary>
            Increases selected text to the prev open brace.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectToCloseBrace">
            <summary>
            Increases selected text to the next closing brace.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectToBrace">
            <summary>
            Increases selected text to the next open or closing brace.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.CommentSelection">
            <summary>
            Marks the selected text as a comment, using the correct comment syntax for the programming language.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.UncommentSelection">
            <summary>
            Removes the comment syntax from the selected text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SmartIndent">
            <summary>
            Positions the cursor to the line indentation level, obtained from parser supporting <c>QWhale.Syntax.SyntaxOptions.SmartIndent</c> option when user presses Enter.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SmartFormatBlock">
            <summary>
            Formats current syntax block using indentation obtained from Syntax Parser supporting <c>QWhale.Syntax.SyntaxOptions.SmartIndent</c>.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SmartFormat">
            <summary>
            Formats selected text using indentation obtained from Syntax Parser supporting <c>QWhale.Syntax.SyntaxOptions.SmartIndent</c>.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SmartFormat(System.Int32)">
            <summary>
            Formats given line using indentation obtained from Syntax Parser supporting <c>QWhale.Syntax.SyntaxOptions.SmartIndent</c>.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SmartFormatDocument">
            <summary>
            Formats entire document using indentation obtained from Syntax Parser supporting <c>QWhale.Syntax.SyntaxOptions.SmartIndent</c>.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.Tabify">
            <summary>
            Converts spaces to tabs in the current string within the selected area according to tab settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.UnTabify">
            <summary>
            Converts tabs to spaces in the current string within the selected area according to tab settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.Indent">
            <summary>
            Indents the selected text by one indentation level, inserting Tab or spaces to the beginning of the line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.UnIndent">
            <summary>
            Unindents the selected text by one indentation level, deleting Tab or spaces from the beginning of the line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.LowerCase">
            <summary>
            Converts all selected characters to the lower-case.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.UpperCase">
            <summary>
            Converts all selected characters to the upper-case.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.Capitalize">
            <summary>
            Changes first character of all words in selected text to upper-case and all another characters to lower-case.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.DeleteWhiteSpace">
            <summary>
            Removes all space and tab characters from selected text. If nothing is selected the method removes space and tab characters from the current line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.ToggleOutlining">
            <summary>
            Toggles expanded state for all <c>IOutlineRange</c> objects in outline collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.CollapseToDefinitions">
            <summary>
            Collapses and expandes some outline section to get a quick overall view of the Edit content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SwapAnchor">
            <summary>
            Change current position from beginning of selection rectangle to the end of selection rectangle or vice versa.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.CanCopy">
            <summary>
            Indicates whether selected text can be copied to clipboard.
            </summary>
            <returns>True if the selection is not empty; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.CanCut">
            <summary>
            Indicates whether selected text can be cut to the clipboard.
            </summary>
            <returns>True if the selection can be cut; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.CanPaste">
            <summary>
            Indicates whether control can paste some text from the clipboard.
            </summary>
            <returns>True if the Clipboard has some text or unicode text;</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.Copy">
            <summary>
            Copies <c>SelectedText</c> to the Clipboard.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.Cut">
            <summary>
            Cuts <c>SelectedText</c> to the Clipboard.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.Paste">
            <summary>
            Pastes content of the Clipboard to the Edit control, replacing selected text if needed.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.Delete">
            <summary>
            Deletes selected text from the control.
            </summary>
            <returns>True if successfull</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.BeginUpdate">
            <summary>
            Prevents the <c>Selection</c> updating until the <c>EndUpdate</c> method is called.
            <seealso cref="!:QWhale.Editor.Selection.EndUpdate"/>
            </summary>
            <returns>Number of update locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.EndUpdate">
            <summary>
            Re-enables selection updating turned off by calling <c>BeginUpdate</c> method.
            <seealso cref="!:QWhale.Editor.Selection.BeginUpdate"/>
            </summary>
            <returns>Number of update locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.CanDrag(System.Drawing.Point)">
            <summary>
            Indicates whether control can drag selected text.
            </summary>
            <param name="position">Specifies destination position of drag operation.</param>
            <returns>True if the control can drag selected text; otherwise false.</returns>
            <remarks>Control must not be in the read-only state to allow dragging selected text.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.DragTo(System.Drawing.Point,System.Boolean)">
            <summary>
            Moves or copies selected text to the specified position.
            </summary>
            <param name="position">Position to move or copy.</param>
            <param name="deleteOrigin">Indicates whether method should move or copy selected text.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectionToTextPoint(System.Drawing.Point)">
            <summary>
            Converts given selection coordinate to the text coordinate.
            </summary>
            <param name="position">The selection coordinate Point to convert.</param>
            <returns>Point that represents the converted position, in text coordinates.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.TextToSelectionPoint(System.Drawing.Point)">
            <summary>
            Converts given text coordinate to the selection coordinate.
            </summary>
            <param name="position">The text coordinate Point to convert.</param>
            <returns>Point that represents the converted position, in selection coordinates.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SetSelectedText(System.String,Stimulsoft.Editor.SelectionType)">
            <summary>
            Replaces <c>SelectedText</c> by specified text.
            </summary>
            <param name="text">New value of <c>SelectedText</c>.</param>
            <param name="selType">New type of selection.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectedCount">
            <summary>
            Returns amount of the lines being selected.
            </summary>
            <returns>Number of selected lines.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectedString(System.Int32)">
            <summary>
            Returns selected part of string at specified position.
            </summary>
            <param name="index">Specifies line index.</param>
            <returns>Selected part of specified string.</returns>
            <remarks>If selection is empty method returns null.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.SelectedData(System.Int32)">
            <summary>
            Returns selected part of color information at specified position.
            </summary>
            <param name="index">Specifies line index.</param>
            <returns>Selected part of specified string.</returns>
            <remarks>If selection is empty method returns null.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.DeleteLeft">
            <summary>
            Deletes one character left to the cursor.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.DeleteWordLeft">
            <summary>
            Deletes one word left to the cursor.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.DeleteRight">
            <summary>
            Deletes one character right to the cursor.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.DeleteWordRight">
            <summary>
            Deletes one word right to the cursor.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.NewLine">
            <summary>
            Inserts a line break at the current position of the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.NewLineAbove">
            <summary>
            Inserts a line break above the current position of the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.NewLineBelow">
            <summary>
            Inserts a line break below the current position of the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.ProcessEscape">
            <summary>
            Processes escape presure: method deselects selected text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.CharTransponse">
            <summary>
            Transposes character under the caret with the next character.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.WordTransponse">
            <summary>
            Transposes word under the caret with the next word.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.LineTransponse">
            <summary>
            Transposes line under the caret with the next line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.CutLine">
            <summary>
            Cuts current line to the clipboard if no text selected; otherwise cuts selected text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.DeleteLine">
            <summary>
            Deletes current line if no text selected; otherwise deletes selected text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.ProcessTab">
            <summary>
            Inserts new tab character or spaces if the selected text is empty; otherwise indents selected text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.ProcessShiftTab">
            <summary>
            Moves current position to the previous tab stop if the selected text is empty; otherwise unindents selected text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.ToggleOverWrite">
            <summary>
            Toggles the control's overwrite mode.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.InsertString(System.String)">
            <summary>
            Inserts given text to the control's content deleting selected text if needed.
            </summary>
            <param name="str">Text to insert.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.ResetBackColor">
            <summary>
            Resets the <c>BackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.ResetForeColor">
            <summary>
            Resets the <c>ForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.ResetInActiveBackColor">
            <summary>
            Resets the <c>InActiveBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.ResetInActiveForeColor">
            <summary>
            Resets the <c>InActiveForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.ResetBorderColor">
            <summary>
            Resets the <c>BorderColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.ResetOptions">
            <summary>
            Resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.ResetAllowedSelectionMode">
            <summary>
            Resets the <c>AllowedSelectionMode</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.ShouldSerializeBackColor">
            <summary>
            Indicates whether the <c>BackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>BackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.ShouldSerializeForeColor">
            <summary>
            Indicates whether the <c>FontColor</c> property should be persisted.
            </summary>
            <returns>True if <c>FontColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.ShouldSerializeInActiveBackColor">
            <summary>
            Indicates whether the <c>InActiveBackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>InActiveBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.ShouldSerializeInActiveForeColor">
            <summary>
            Indicates whether the <c>InActiveForeColor</c> property should be persisted.
            </summary>
            <returns>True if <c>InActiveForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.ShouldSerializeBorderColor">
            <summary>
            Indicates whether the <c>BorderColor</c> property should be persisted.
            </summary>
            <returns>True if <c>InActiveForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.ShouldSerializeOptions">
            <summary>
            Indicates whether the <c>Options</c> property should be persisted.
            </summary>
            <returns>True if <c>Options</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Selection.ShouldSerializeAllowedSelectionMode">
            <summary>
            Indicates whether the <c>AllowedSelectionMode</c> property should be persisted.
            </summary>
            <returns>True if <c>AllowedSelectionMode</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.Selection.IsEmpty">
            <summary>
            Indicates whether nothing is selected.
            </summary>
            <returns>True if empty; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.Selection.SelectionState">
            <summary>
            Gets or sets a value indicates state of the selected text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Selection.SelectionStart">
            <summary>
            Gets or sets the position of the first selected character while text considered as a single string.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Selection.SelectionLength">
            <summary>
            Gets or sets length of the <c>SelectedText</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Selection.SelectedColorData">
            <summary>
            Gets or sets strings that corresponds to selected part of the control's text content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Selection.SelectedText">
            <summary>
            Gets or sets strings that corresponds to selected part of the control's text content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Selection.SelectionRect">
            <summary>
            Gets or sets rectangular area indicating selected text of the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Selection.SelectionType">
            <summary>
            Gets or sets type of current selection.
            <seealso cref="!:QWhale.Editor.SelectionType"/>
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Selection.Options">
            <summary>
            Gets or sets options determining behaviour or the <c>Selection</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Selection.AllowedSelectionMode">
            <summary>
            Gets or sets type of selection allowed to Edit control content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Selection.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Selection.ForeColor">
            <summary>
            Gets or sets a foreground color of the <c>SelectedText</c> when owner control has input focus.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Selection.BackColor">
            <summary>
            Gets or sets a background color of the <c>SelectedText</c> when owner control has input focus.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Selection.InActiveForeColor">
            <summary>
            Gets or sets a foreground color of the <c>SelectedText</c> when owner control does not have input focus.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Selection.InActiveBackColor">
            <summary>
            Gets or sets a background color of the <c>SelectedText</c> when owner control does not have input focus.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Selection.BorderColor">
            <summary>
            Gets or sets a color of the selection border.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Selection.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>Selection</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="E:Stimulsoft.Editor.Selection.SelectionChanged">
            <summary>
            Occurs when selection bounds are changed.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.Spelling">
            <summary>
            Represents properties and methods allowing to visually highlight mispelled words in the control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Spelling.#ctor(Stimulsoft.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>Spelling</c> class with specified owner.
            </summary>
            <param name="owner"><c>ISyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Spelling.IsWordCorrect(System.String)">
            <summary>
            Checks whether spelling for the given word is correct.
            </summary>
            <param name="text">Specifies text to check-up.</param>
            <returns>True if correct; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Spelling.Assign(Stimulsoft.Editor.ISpellingEx)">
            <summary>
            Copies the contents from another <c>ISpellingEx</c> object.
            </summary>
            <param name="source">Specifies <c>ISpellingEx</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Spelling.ResetSpellColor">
            <summary>
            Resets the <c>SpellColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Spelling.ResetCheckSpelling">
            <summary>
            Resets the <c>CheckSpelling</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Spelling.ShouldSerializeSpellColor">
            <summary>
            Indicates whether the <c>SpellColor</c> property should be persisted.
            </summary>
            <returns>True if <c>SpellColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.Spelling.CheckSpelling">
            <summary>
            Gets or sets a value indicating whether the document can check spelling for its content.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.Spelling.WordSpell">
            <summary>
            Occurs when spelling of some word within the text needs checking.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Spelling.SpellColor">
            <summary>
            Gets or sets a value representing color to draw wavy underlines under mispelled words.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Spelling.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>Spelling</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.SyntaxEdit">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <c>SyntaxEdit</c> class with specified container.
            </summary>
            <param name="container">Specifies IContainer that contains this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.#ctor">
            <summary>
            Initializes a new instance of the <c>SyntaxEdit</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.Finalize">
            <summary>
            Destroys the instance of the <c>SyntaxEdit</c> class.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.CreateCaret">
            <summary>
            Creates a new shape for the system caret and gets ownership of the caret.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.DestroyCaret">
            <summary>
            Destroys the caret's current shape, frees the caret from the control, and removes the caret from the screen.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ShowCaret(System.Int32,System.Int32)">
            <summary>
            Moves the caret to the specified coordinates.
            </summary>
            <param name="x">Specifies the new x-coordinate of the caret.</param>
            <param name="y">Specifies the new y-coordinate of the caret.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.GetCaretSize(System.Drawing.Point)">
            <summary>
            Returns size of the caret's current shape at given position.
            </summary>
            <param name="position">Point at which caret size should be calculated.</param>
            <returns>Size of the caret.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.DisplayDragCaret">
            <summary>
            Displays dragging caret rather than regular caret.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.HideDragCaret">
            <summary>
            Hides dragging caret.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ResetHideCaret">
            <summary>
            Resets the <c>HideCaret</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.HideCaret">
            <summary>
            Gets or sets a value indicating whether the control should display caret when it has input focus.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.PaintSyntax(Stimulsoft.Editor.IPainter,System.Int32,System.Int32,System.Drawing.Point,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Paints a specified part of the control.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="startLine">Specifies the first line of content to paint.</param>
            <param name="endLine">Specifies the last line of content to paint.</param>
            <param name="position">The Point value that specifies start position to draw content from.</param>
            <param name="rect">Rectangular area of control to draw.</param>
            <param name="specialPaint">Reserved for internal use. Used for Print and Print preview.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.DrawLine(System.Int32,System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>
            Draws line given by its Index at the specified position.
            </summary>
            <param name="index">Index of line to draw.</param>
            <param name="position">Position to start drawing.</param>
            <param name="clipRect">Rectangular area of the control to draw line in.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.DrawLine(System.Int32,System.String,System.Int16[],System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, draws line given by its index at the specified position.
            </summary>
            <param name="index">Index of line to draw.</param>
            <param name="line">Specifies text to draw</param>
            <param name="colorData">Specifies array containing color data for given string</param>
            <param name="position">Position to start drawing.</param>
            <param name="clipRect">Rectangular area of the control to draw line in.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MeasureLine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Measures part of the string given at by its Index.
            </summary>
            <param name="index">Index of line to measure.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MeasureLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Measures part of the string given by its Index.
            </summary>
            <param name="index">Index of line to measure.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <param name="width">Maximum length of the string.</param>
            <param name="chars">Receive real number of measured chars.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MeasureLine(System.String,System.Int16[],System.Int32,System.Int32)">
            <summary>
            Measures part of given string.
            </summary>
            <param name="line">Text to measure.</param>
            <param name="colorData">Color data attached to the given string.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MeasureLine(System.String,System.Int16[],System.Int32,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Measures part of given string.
            </summary>
            <param name="line">Text to measure.</param>
            <param name="colorData">Color data attached to the given string.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <param name="width">Maximum length of the string.</param>
            <param name="chars">Receive real number of measured chars.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.OnCustomDraw(Stimulsoft.Editor.IPainter,System.Drawing.Rectangle,Stimulsoft.Editor.DrawStage,Stimulsoft.Editor.DrawState,Stimulsoft.Editor.DrawInfo)">
            <summary>
            Raises an <c>CustomDraw</c> event.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="rect">Rectangular area of control to draw.</param>
            <param name="stage">Specifies whether this method called before or after painting.</param>
            <param name="state">Specifies part of control to draw.</param>
            <param name="info">Full information about drawing text fragment.</param>
            <returns>True if user handles this event; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ResetDisableColorPaint">
            <summary>
            Resets the <c>DisableColorPaint</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ResetDisableSyntaxPaint">
            <summary>
            Resets the <c>DisableSyntaxPaint</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ResetSyntaxErrorsHints">
            <summary>
            Resets the <c>SyntaxErrorsHints</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ResetDrawColumnsIndent">
            <summary>
            Resets the <c>DrawColumnsIndent</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ResetColumnsIndentForeColor">
            <summary>
            Resets the <c>ColumnsIndentForeColor</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.DisableColorPaint">
            <summary>
            Gets or sets a value indicating whether control uses colors to paint its content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.DisableSyntaxPaint">
            <summary>
            Gets or sets a value indicating whether Edit control uses lexical colors/styles to paint its content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.SyntaxErrorsHints">
            <summary>
            Gets or sets a boolean value that indicates whether Edit control should display hint over each syntax error in it's content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.DrawColumnsIndent">
            <summary>
            Indicates whether edit control should draw columns indentation marks.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.ColumnsIndentForeColor">
            <summary>
            Specifies columns indentation color.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.Lexer">
            <summary>
            Gets or sets object that can make lexical analysis for the control's content.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.SyntaxEdit.CustomDraw">
            <summary>
            Occurs when control draws its content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.Notification(System.Object,System.EventArgs)">
            <summary>
            Updates control's content according to parameters of notification.
            </summary>
            <param name="sender">The source of the notification.</param>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.Navigate(System.Int32,System.Int32)">
            <summary>
            Moves current position by the given offset value.
            </summary>
            <param name="deltaX">Horizontal offset.</param>
            <param name="deltaY">Vertical offset.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MoveTo(System.Int32,System.Int32)">
            <summary>
            Moves the current position to the given position.
            </summary>
            <param name="x">Index of character in the line to move to.</param>
            <param name="y">Index of line to move to.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MoveToChar(System.Int32)">
            <summary>
            Moves the current position to the specified character in current line.
            </summary>
            <param name="x">Index of character in current line to move to.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MoveToLine(System.Int32)">
            <summary>
            Moves the current position to the specified line.
            </summary>
            <param name="y">Index of line to move to.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MoveTo(System.Drawing.Point)">
            <summary>
            Moves the current position to the given position.
            </summary>
            <param name="position">New location of the current position.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ValidatePosition(System.Drawing.Point@)">
            <summary>
            Validates given position within control's text content.
            </summary>
            <param name="position">Position to validate.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.StorePosition(System.Drawing.Point)">
            <summary>
            Stores given position to stored position list.
            </summary>
            <param name="pt">Position to store.</param>
            <returns>Index of stored position in list.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.RestorePosition(System.Int32)">
            <summary>
            Restores position from stored position list by given index.
            </summary>
            <param name="index">Index of position to restore.</param>
            <returns>Point value that represents stored position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MoveCharLeft">
            <summary>
            Moves the current position one character to the left.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MoveCharRight">
            <summary>
            Moves the current position one character to the right.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MoveWordLeft">
            <summary>
            Moves the current position one word to the left.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MoveWordRight">
            <summary>
            Moves the current position one word to the right.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MoveLineUp">
            <summary>
            Moves the current position to the previous line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MoveLineDown">
            <summary>
            Moves the current position to the next line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MoveLineBegin">
            <summary>
            Moves the current position to the first character of current line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MoveLineBeginCycled">
            <summary>
            Moves the current position to the first not whitespace character/first character of current line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MoveLineEndCycled">
            <summary>
            Moves the current position to the last not whitespace character/last character of current line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MoveLineEnd">
            <summary>
            Moves the current position to the last character of current line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MoveFileBegin">
            <summary>
            Moves the current position to the first character of the first line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MoveFileEnd">
            <summary>
            Moves the current position to the last character of the last line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ScrollLineDown">
            <summary>
            Scrolls text content one line down.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ScrollLineUp">
            <summary>
            Scrolls text content one line up.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MoveToOpenBrace">
            <summary>
            Moves the current position to the previous open brace in the text content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MoveToCloseBrace">
            <summary>
            Moves the current position to the next close brace in the text content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MoveToBrace">
            <summary>
            Moves the current position to the next open or close brace in the text content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MovePageUp">
            <summary>
            Moves current position to the previous page.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MovePageDown">
            <summary>
            Moves current position to the next page.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MoveScreenTop">
            <summary>
            Moves the current position to the top of the screen.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MoveScreenBottom">
            <summary>
            Moves the current position to the bottom of the screen.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ResetNavigateOptions">
            <summary>
            Resets the <c>NavigateOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ShouldSerializeNavigateOptions">
            <summary>
            Indicates whether the <c>NavigateOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>NavigateOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.Position">
            <summary>
            Gets or sets current position within the control's text content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.NavigateOptions">
            <summary>
            Gets or sets navigating options.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.UpdateWordWrap">
            <summary>
            Re-wraps all lines in the text.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.UpdateWordWrap(System.Int32,System.Int32)">
            <summary>
            Re-wraps lines in the text within specific scope.
            </summary>
            <param name="first">Specifies first line to wrap.</param>
            <param name="last">Specifies last line to wrap.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.GetWrapMargin">
            <summary>
            Returns position of the wrapping margin.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ResetWordWrap">
            <summary>
            Resets the <c>WordWrap</c> to the defalut value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ResetWrapAtMargin">
            <summary>
            Resets the <c>WrapAtMargin</c> to the defalut value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.WordWrap">
            <summary>
            Gets or sets a value indicating whether control automatically wraps words to the beginning of the next line when necessary.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.WrapAtMargin">
            <summary>
            Gets or sets a value indicating whether control automatically wraps words at margin position.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.WrapMargin">
            <summary>
            Gets position of the wrapping margin.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.SaveFile(System.String)">
            <summary>
            Saves text content to the specific file.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.SaveFile(System.String,System.Text.Encoding)">
            <summary>
            Saves text content to the specific file with specific encoding.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.SaveFile(System.String,Stimulsoft.Editor.ExportFormat)">
            <summary>
            Saves content to the given file in the specific format.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="format">Specifies output format.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.SaveFile(System.String,Stimulsoft.Editor.ExportFormat,System.Text.Encoding)">
            <summary>
            Saves content to the given file in the specific format with specific encoding.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="format">Specifies output format.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.LoadStream(System.IO.Stream)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.LoadStream(System.IO.Stream,Stimulsoft.Editor.ExportFormat)">
            <summary>
            Loads the contents of a file into string collection.
            </summary>
            <param name="stream">The stream object to read text.</param>
            <param name="format">Specifies format of the stream.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.LoadStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.LoadStream(System.IO.Stream,Stimulsoft.Editor.ExportFormat,System.Text.Encoding)">
            <summary>
            Loads the contents of a file into string collection.
            </summary>
            <param name="stream">The stream object to read text.</param>
            <param name="format">Specifies format of the stream.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.SaveStream(System.IO.Stream)">
            <summary>
            Saves content of the snippet to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.SaveStream(System.IO.Stream,Stimulsoft.Editor.ExportFormat)">
            <summary>
            Saves content to the specific stream in the specific format.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="format">Specifies format of the stream.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.SaveStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.SaveStream(System.IO.Stream,Stimulsoft.Editor.ExportFormat,System.Text.Encoding)">
            <summary>
            Saves content to the specific stream in the specific format and specific encoding.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="format">Specifies format of the stream.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.SaveStream(System.IO.TextWriter)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.SaveStream(System.IO.TextWriter,Stimulsoft.Editor.ExportFormat)">
            <summary>
            Saves the text content to the given stream in the specific format.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <param name="format">Specifies format of the stream.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.LineTerminator">
            <summary>
            Gets or sets a string value that terminates line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.LoadFile(System.String)">
            <summary>
            Loads the contents of the specified file.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.LoadFile(System.String,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified file with specified encoding.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.LoadFile(System.String,Stimulsoft.Editor.ExportFormat)">
            <summary>
            Loads to string collection text from given file in the specific format.
            </summary>
            <param name="fileName">Represents name of file from which text must be loaded.</param>
            <param name="format">Specifies format to load file content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.LoadFile(System.String,Stimulsoft.Editor.ExportFormat,System.Text.Encoding)">
            <summary>
            Loads text to to string collection from given file in the specific format with specific encoding.
            </summary>
            <param name="fileName">Represents name of file from which text must be loaded.</param>
            <param name="format">Specifies format to load file content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.LoadStream(System.IO.TextReader)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.LoadStream(System.IO.TextReader,Stimulsoft.Editor.ExportFormat)">
            <summary>
            Loads the contents of the given stream with specified format.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <param name="format">Specifies format to load the content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ResetIndentOptions">
            <summary>
            Resets the <c>IndentOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ResetMaxLength">
            <summary>
            Resets the <c>MaxLength</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ResetModified">
            <summary>
            Resets the <c>Modified</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ResetOverWrite">
            <summary>
            Resets the <c>OverWrite</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ResetSingleLineMode">
            <summary>
            Resets the <c>SingleLineMode</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ResetReadonly">
            <summary>
            Resets the <c>Readonly</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ShouldSerializeIndentOptions">
            <summary>
            Indicates whether the <c>IndentOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>IndentOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ShouldSerializeReadonly">
            <summary>
            Indicates whether the <c>Readonly</c> property should be persisted.
            </summary>
            <returns>True if <c>Readonly</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.Readonly">
            <summary>
            Gets or sets a value indicating whether the control's content is read-only.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.OverWrite">
            <summary>
            Gets or sets a value indicating whether the inserted text overwrites existing text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.Modified">
            <summary>
            Gets or sets a value indicating whether the control's text content is modified.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.SingleLineMode">
            <summary>
            Gets or sets a value indicating whether the control accepts only one line of the text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.IndentOptions">
            <summary>
            Gets or sets <c>QWhale.Editor.IndentOptions</c> for this class, allowing to customize behaior of Edit control when user presses Enter to insert new text line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.MaxLength">
            <summary>
            Specifies the maximum number of characters that can be entered into the edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ShowCodeCompletionBox(Stimulsoft.Editor.ICodeCompletionProvider)">
            <summary>
            Shows code completion popup window with given provider at the current position.
            </summary>
            <param name="provider">Represents data for code completion popup window.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ShowCodeCompletionBox(Stimulsoft.Editor.ICodeCompletionProvider,System.Drawing.Point)">
            <summary>
            Shows code completion popup window with given Provider at the specified position.
            </summary>
            <param name="provider">Represents data for code completion popup window.</param>
            <param name="pt">Position to show code completion popup window.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ShowCodeCompletionBox(Stimulsoft.Editor.ICodeCompletionProvider,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Shows code completion popup window with given Provider at the specified position.
            </summary>
            <param name="provider">Represents data for code completion popup window.</param>
            <param name="pt">Position to show code completion popup window.</param>
            <param name="startPoint">Specifies start position where hint can be displayed.</param>
            <param name="endPoint">Specifies end position where hint can be displayed</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ShowCodeCompletionHint(Stimulsoft.Editor.ICodeCompletionProvider)">
            <summary>
            Displays <c>ICodeCompletionHint</c> with given provider at the current position.
            </summary>
            <param name="provider">Represents data for code completion hint.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ShowCodeCompletionHint(Stimulsoft.Editor.ICodeCompletionProvider,System.Drawing.Point)">
            <summary>
            Displays <c>ICodeCompletionHint</c> with given provider at the specified position.
            </summary>
            <param name="provider">Represents data for code completion hint.</param>
            <param name="pt">Position to display the hint.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ShowCodeCompletionHint(Stimulsoft.Editor.ICodeCompletionProvider,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Boolean,System.Boolean,Stimulsoft.Editor.ILexer)">
            <summary>
            Displays <c>ICodeCompletionHint</c> with specified parameters.
            </summary>
            <param name="provider">Represents data for code completion hint.</param>
            <param name="pt">Position to display the hint.</param>
            <param name="startPoint">Specifies start position where hint can be displayed.</param>
            <param name="endPoint">Specifies end position where hint can be displayed</param>
            <param name="displayPOint">Specifies display position where hint can be displayed</param>
            <param name="keepActive">Indicates whether hint window remains visible until closed manually.</param>
            <param name="acceptOnTab">Indicates whether hint window should be closed when user presses Tab key.</param>
            <param name="lexer"><c>ILexer</c> to make lexical analysis of hint content.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.RemovePlainText(System.Int32)">
            <summary>
            Removes all plain (string constants or comments) parst of text from specified line.
            </summary>
            <param name="line">Index of line to process.</param>
            <returns>String without plain parts.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.IsValidText(System.Drawing.Point)">
            <summary>
            Indicates whether text at the specified position is valid (that is does not contain comments or stirng constants).
            </summary>
            <param name="position">Position to check.</param>
            <returns>True if text is not plain; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.CompleteWord">
            <summary>
            Displays a code completion window that displays members of the current class in the Editor's content in a form of the popup list box and locates single member, if possible.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ListMembers">
            <summary>
            Displays a code completion window that displays members of the current class in the Editor's content in a form of the popup list box.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ParameterInfo">
            <summary>
            Displays a code completion window containing information for the current method or parameter in the Editor's content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.CodeSnippets">
            <summary>
            Displays a code completion window with list of available code snippets.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.QuickInfo">
            <summary>
            Displays a code completion window with simple tooltip information.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ShouldSerializeCodeCompletionChars">
            <summary>
            Indicates whether the <c>CodeCompletionChars</c> property should be persisted.
            </summary>
            <returns>True if <c>CodeCompletionChars</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.CodeCompletionBox">
            <summary>
            Represents object that specifies a popup window that contains code completion information presented in the form of list.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.CodeCompletionHint">
            <summary>
            Represents object that specifies a popup window that contains code completion information presented in the form of the tooltip.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.CodeCompletionChars">
            <summary>
            Represents a collection of characters that initializes a code completion procedure when typing in the editor.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.SyntaxEdit.NeedCodeCompletion">
            <summary>
            Occurs when code completion window is to be displayed.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.StartMacroRecording">
            <summary>
            Starts recording the command sequence.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.StopMacroRecording">
            <summary>
            Stops recording the command sequence.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.PauseMacroRecording">
            <summary>
            Suspends recording the command sequence.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ResumeMacroRecording">
            <summary>
            Resumes recording the command sequence.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ToggleMacroRecording">
            <summary>
            Toggles recording the command sequence.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.PlayBackMacro">
            <summary>
            Repeats the stored command sequence.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.SaveMacros(System.IO.Stream)">
            <summary>
            Saves the macro records to the given stream in xml format.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.SaveMacros(System.IO.TextWriter)">
            <summary>
            Saves the macro records to the given stream in xml format.
            </summary>
            <param name="writer">The TextWriter object to write macros to stream.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.SaveMacros(System.String)">
            <summary>
            Saves the macro records to the given file in xml format.
            </summary>
            <param name="fileName">Name of file to save macros.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.LoadMacros(System.IO.Stream)">
            <summary>
            Loads the macro records fromt the given stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.LoadMacros(System.IO.TextReader)">
            <summary>
            Loads the macro records fromt the given stream.
            </summary>
            <param name="writer">The TextReader object to read macros from stream.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.LoadMacros(System.String)">
            <summary>
            Loads the macro records fromt the given file.
            </summary>
            <param name="fileName">Name of file to load macros.</param>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.MacroRecording">
            <summary>
            Gets or sets a boolean value indicating whether Edit control should record sequence of keyboard commands. 
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.MacroSuspendend">
            <summary>
            Gets or sets a boolean value indicating whether recording is suspendend. 
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.MacroRecords">
            <summary>
            Represents an array containing keyboard commands.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ShouldSerializeReadonlyForeColor">
            <summary>
            Indicates whether the <c>ReadonlyForeColor</c> property should be persisted.
            </summary>
            <returns>True if <c>ReadonlyForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ShouldSerializeReadonlyBackColor">
            <summary>
            Indicates whether the <c>ReadonlyBackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>ReadonlyBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ShouldSerializeDisabledForeColor">
            <summary>
            Indicates whether the <c>DisabledForeColor</c> property should be persisted.
            </summary>
            <returns>True if <c>DisabledForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ShouldSerializeDisabledBackColor">
            <summary>
            Indicates whether the <c>DisabledBackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>DisabledBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.ReadonlyForeColor">
            <summary>
            Gets or sets foreground color used in the readonly state.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.ReadonlyBackColor">
            <summary>
            Gets or sets background color used in the readonly state.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.DisabledForeColor">
            <summary>
            Gets or sets foreground color used in the disabled state.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.DisabledBackColor">
            <summary>
            Gets or sets background color used in the disabled state.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.CanSplitHorz">
            <summary>
            Indicates whether control can split its content horizontally.
            </summary>
            <returns>True if can split horizontally; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.CanSplitVert">
            <summary>
            Indicates whether control can split its content vertically.
            </summary>
            <returns>True if can split vertically; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.CanUnsplitHorz">
            <summary>
            Indicates whether control has horizontal split view.
            </summary>
            <returns>True if horizontal split view is visible; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.CanUnsplitVert">
            <summary>
            Indicates whether control has vertical split view.
            </summary>
            <returns>True if vertical split view is visible; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.SplitViewHorz">
            <summary>
            Splits control content horizontally.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.SplitViewVert">
            <summary>
            Splits control content vertically.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.UnsplitViewHorz">
            <summary>
            Removes horizontal split view.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.UnsplitViewVert">
            <summary>
            Removes vertical split view.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.VertSplitEdit">
            <summary>
            Represents an vertical split view control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.HorzSplitEdit">
            <summary>
            Represents horizontal split view control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.VertSplitter">
            <summary>
            Represents a vertical Splitter control allowing to split Edit content vertically.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.HorzSplitter">
            <summary>
            Represents a horizontal Splitter control allowing to split Edit content horizontally.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.SyntaxEdit.SplitHorz">
            <summary>
            Occurs when user splits Edit control horizontally.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.SyntaxEdit.SplitVert">
            <summary>
            Occurs when user splits Edit control vertically.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.SyntaxEdit.UnsplitHorz">
            <summary>
            Occurs when horizontal split view is removed.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.SyntaxEdit.UnsplitVert">
            <summary>
            Occurs when vertical split view is removed.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.HasAutoCorrection(System.String,System.String@)">
            <summary>
            Checks whether specified word has correction. 
            </summary>
            <param name="word">Word that should be corrected.</param>
            <param name="correctWord">Receives a corrected word.</param>
            <returns>True if word has correction; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.AutoCorrectDelimiters">
            <summary>
            Gets or sets an array of chars that used as word delimiters.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.AutoCorrection">
            <summary>
            Gets or sets a boolean value indicating whether to auto correct words being typed.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.SyntaxEdit.AutoCorrect">
            <summary>
            Occurs when control tries to auto correct word being typed.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ScreenToDisplayX(System.Int32,System.Int32)">
            <summary>
            Converts given screen coordinates to display coordinates (index of line and character).
            </summary>
            <param name="x">Horizontal screen coordinate to convert.</param>
            <param name="line">Vertical screen coordinate to convert.</param>
            <returns>Horizontal display coordinate (index of character).</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ScreenToDisplay(System.Int32,System.Int32)">
            <summary>
            Converts given screen coordinates to display coordinates (index of line and character).
            </summary>
            <param name="x">Horizontal screen coordinate to convert.</param>
            <param name="y">Vertical screen coordinate to convert.</param>
            <returns>The Point representing display coordinate.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ScreenToText(System.Drawing.Point)">
            <summary>
            Converts given screen coordinates to text coordinates (index of line and character).
            </summary>
            <param name="position">The screen coordinate Point to convert.</param>
            <returns>The Point representing text coordinate.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ScreenToText(System.Int32,System.Int32)">
            <summary>
            Converts given screen coordinates to text coordinates (index of line and character).
            </summary>
            <param name="x">Horizontal screen coordinate to convert.</param>
            <param name="y">Vertical screen coordinate to convert.</param>
            <returns>The Point representing text coordinate.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.TextToScreen(System.Drawing.Point)">
            <summary>
            Converts given text coordinates, index of line and character, to screen coordinates.
            </summary>
            <param name="position">The text coordinate Point to convert.</param>
            <returns>The Point representing screen coordinate</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.TextToScreen(System.Int32,System.Int32)">
            <summary>
            Converts given text coordinates, index of line and character, to screen coordinates.
            </summary>
            <param name="x">Horizontal text coordinate to convert.</param>
            <param name="y">Vertical text coordinate to convert.</param>
            <returns>The Point representing screen coordinate.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.DisplayToScreen(System.Int32,System.Int32)">
            <summary>
            Converts given display coordinates, index of line and character, to screen coordinates.
            </summary>
            <param name="x">Index of character in the line.</param>
            <param name="y">Index of line.</param>
            <returns>The Point representing screen coordinate</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.DisplayToScreen(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts given display coordinates, index of line and character, to screen coordinates.
            </summary>
            <param name="x">Index of character in the line.</param>
            <param name="y">Index of line.</param>
            <param name="average">Indicates whether method should convert coordinates using average character width or not.</param>
            <returns>The Point representing screen coordinate</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MakeVisible(System.Drawing.Point)">
            <summary>
            Scrolls the control's content, if necessary, to ensure a specified text position is in view.
            </summary>
            <param name="position">Position in the text to make visible.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MakeVisible(System.Drawing.Point,System.Boolean)">
            <summary>
            Scrolls the control's content, if necessary, to ensure a specified text position is in view.
            </summary>
            <param name="position">Position in the text to make visible.</param>
            <param name="centerLine">Specifies whether given line must be centered within control's client area.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ShowScrollHint(System.Int32)">
            <summary>
            Displays tooltip indicating destination line when scrolling.
            </summary>
            <param name="pos">Specifies vertical position (in display coordinates) to obtain hint info.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.HideScrollHint">
            <summary>
            Hides scroll hint window if necessary.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.CharsInWidth">
            <summary>
            Returns number of characters painted with current font that will fit into control's client area.
            </summary>
            <returns>Number of characters that can fit in.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.CharsInWidth(System.Int32)">
            <summary>
            Returns number of characters painted with current font that will fit into specified Width.
            </summary>
            <param name="width">Width to fit charachers.</param>
            <returns>Number of characters that can fit in.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.CharsInWidth(System.Int32,System.Boolean)">
            <summary>
            Returns number of characters painted with current font that will fit into specified Width.
            </summary>
            <param name="width">Width to fit charachers.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Number of characters that can fit in.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.LinesInHeight">
            <summary>
            Determines how many lines can fit into control's client area.
            </summary>
            <returns>Number of lines that can fit in.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.LinesInHeight(System.Int32)">
            <summary>
            Determines how many lines can fit into given Height.
            </summary>
            <param name="height">Height to fit lines.</param>
            <returns>Number of lines that can fit in.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.GetTextToSearchAtCursor">
            <summary>
            Returns word at the cursor position.
            </summary>
            <returns>Word at the cursor position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.GetHitTestAtTextPoint(System.Drawing.Point,Stimulsoft.Editor.HitTestInfo@)">
            <summary>
            Fills hitTestInfo parameter by information about a part of control at specified text coordinate.
            </summary>
            <param name="point">Specifies coordinate to check.</param>
            <param name="hitTestInfo">Retrieves information about part of control.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.GetHitTestAtTextPoint(System.Int32,System.Int32,Stimulsoft.Editor.HitTestInfo@)">
            <summary>
            Retrieves information about part of control at specified text coordinate.
            </summary>
            <param name="x">Specifies horizontal coordinate of text position to check.</param>
            <param name="y">Specifies vertical coordinate of text position to check.</param>
            <param name="hitTestInfo">Retrieves information about part of control.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.GetHitTest(System.Drawing.Point,Stimulsoft.Editor.HitTestInfo@)">
            <summary>
            Fills hitTestInfo parameter by information about a part of the control at specified coordinate.
            </summary>
            <param name="point">Specifies coordinate to check.</param>
            <param name="hitTestInfo">Retrieves information about part of control.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.GetHitTest(System.Int32,System.Int32,Stimulsoft.Editor.HitTestInfo@)">
            <summary>
            Fills hitTestInfo parameter by information about a part of the control at specified coordinate.
            </summary>
            <param name="x">Specifies horizontal coordinate of position to check.</param>
            <param name="y">Specifies vertical coordinate of position to check.</param>
            <param name="hitTestInfo">Retrieves information about part of control.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ResetBorderStyle">
            <summary>
            Resets the <c>BorderStyle</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ResetBorderColor">
            <summary>
            Resets the <c>BorderColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ResetAcceptTabs">
            <summary>
            Resets the <c>AcceptTabs</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ResetAcceptReturns">
            <summary>
            Resets the <c>AcceptReturns</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ShouldSerializeBorderColor">
            <summary>
            Indicates whether the <c>BorderColor</c> property should be persisted.
            </summary>
            <returns>True if <c>BorderColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.DisplayEditorSettingsDialog">
            <summary>
            Initializes and runs a dialog box allowing you to change Edit control settings.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.DisplayEditorSettingsDialog(Stimulsoft.Editor.EditorSettingsTab)">
            <summary>
            Initializes and runs a dialog box allowing you to change Edit control settings.
            </summary>
            <param name="hiddenTabs">specifies hidden tabs in the syntax settings dialog</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.DisplayGotoLineDialog">
            <summary>
            Initializes and runs a dialog prompting you for index of the line you need to locate.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.DisplaySearchDialog">
            <summary>
            Initializes and runs a dialog box allowing you to search for some text.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.DisplayReplaceDialog">
            <summary>
            Initializes and runs a dialog box allowing you to search for text and replace it.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.Source">
            <summary>
            Gets or sets an object that implements <c>ITextSource</c> interface containing an actual string data displayed by the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.Lines">
            <summary>
            Represents object that implements <c>ISyntaxStrings</c> interface containing collection of strings determining control's content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.Strings">
            <summary>
            Represents <c>Lines</c> property in the form of array of strings.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.DisplayLines">
            <summary>
            Represents the object that implements <c>IDisplayStrings</c> interface containing collection of lines to be drawn in the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.Selection">
            <summary>
            Represents an object that implements <c>ISelection</c> interface. This object represents various properties and methods to manipulate text selection, such as copy, paste and drag selected text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.Gutter">
            <summary>
            Represents object that implements <c>IGutter</c> interface containing methods and properties necessary to operate with gutter at the left size of the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.EditMargin">
            <summary>
            Represents an object that implements <c>IMargin</c> interface and specifies appearance of vertical line drawn over the text and used to mark some limit, for example, of the maximum string length allowed.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.Painter">
            <summary>
            Represents an object that implements <c>IPainter</c> interface used to draw control's text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.KeyList">
            <summary>
            Represents object that implements <c>IKeyList</c> containing list of keys with attached actions, which executed by key pressure.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.EventHandlers">
            <summary>
            Represents object that holds <c>EventHandlers</c> containing list of keys with attached actions.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.LineStyles">
            <summary>
            Represents an object that implements <c>ILineStylesEx</c> interface holding collection of <c>ILineStyle</c> objects each of them determines particular style of the line in the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.LinesStyles">
            <summary>
            Represents an object that implements <c>ILineStylesEx</c> interface holding collection of <c>ILineStyle</c> objects each of them determines particular style of the line in the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.Printing">
            <summary>
            Represents an object that implements <c>IPrinting</c> interface allowing to perform various printing actions such as print, preview document, and setup print options.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.Pages">
            <summary>
            Represents an object that implements <c>IEditPage</c> interface containing properties and methods representing collection of particular pages.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.WhiteSpace">
            <summary>
            Represents an object that implements <c>IWhiteSpace</c> interface. This object specifies appearance of white space characters, as well as End-of-line and End-of-file marks.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.LineSeparator">
            <summary>
            Represents an object that implements <c>ILineSeparator</c> interface containing methods and properties necessary to separate lines and highlight current line within the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.Braces">
            <summary>
            Represents an object that implements <c>IBraceMatchingEx</c> interface allowing to change appearance of matching braces within the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.HyperText">
            <summary>
            Represents object that implements <c>IHyperTextEx</c> interface allowing to customize appearance and behaviour of hypertext sections within the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.Outlining">
            <summary>
            Represents an object that implements <c>IOutlining</c> interface that specifies appearance and behaviour of outline sections within the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.Spelling">
            <summary>
            Represents object that implements <c>ISpellingEx</c> interface containing properties and methods to check control's content spelling and highlight mispelled words.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.Scrolling">
            <summary>
            Represents an object that implements <c>IScrolling</c> interface containing properties and methods that describe scrolling behaviour of the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.Scroll">
            <summary>
            Represents an object that implements <c>IScrolling</c> interface containing properties and methods that describe scrolling behaviour of the control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.AcceptTabs">
            <summary>
            Gets or set a boolean value that indicates whether TAB key should be accepted by Edit control as input key.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.AcceptReturns">
            <summary>
            Gets or set a boolean value that indicates whether Enter key should be accepted by Edit control as input key.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.BorderStyle">
            <summary>
            Gets or sets the border style for the Edit control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.BorderColor">
            <summary>
            Gets or sets the border color for the Edit control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.ClientRect">
            <summary>
            Gets the rectangle that represents the client area of the Edit control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.Transparent">
            <summary>
            Gets or sets a boolean value that indicates whether Edit control should draw its background.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.SyntaxSettings">
            <summary>
            Represents key-properties settings of this Edit control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.SearchDialog">
            <summary>
            Gets or sets a dialog box allowing to search for the text or replace it.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.GotoLineDialog">
            <summary>
            Gets or sets a dialog prompting for index of the line you need to locate.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.SyntaxEdit.SelectionChanged">
            <summary>
            Occurs when selection bounds are changed.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.SyntaxEdit.DrawHeader">
            <summary>
            Occurs when header or footer part of each page is drawing.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.SyntaxEdit.JumpToUrl">
            <summary>
            Occurs when user attempts to jump to url.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.SyntaxEdit.CheckHyperText">
            <summary>
            Occurs when a control needs checking whether some string represents hypertext.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.SyntaxEdit.GutterClick">
            <summary>
            Occurs when the gutter part of Edit control is clicked.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.SyntaxEdit.GutterDblClick">
            <summary>
            Occurs when the gutter part of Edit control is double-clicked.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.SyntaxEdit.DrawUserMargin">
            <summary>
            Occurs when user margin part of each line is drawing.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.SyntaxEdit.WordSpell">
            <summary>
            Occurs when spelling of some word within the text needs checking.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.SyntaxEdit.VerticalScroll">
            <summary>
            Occurs when control scrolls its content in vertical direction. This can be caused by dragging vertical scroll thumb, or caret moving.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.SyntaxEdit.HorizontalScroll">
            <summary>
            Occurs when control scrolls its content in horizonal direction. This can be caused by dragging horizonal scroll thumb, or caret moving.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.SyntaxEdit.ScrollButtonClick">
            <summary>
            Occurs when some scrolling button is clicked.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.SyntaxEdit.SourceStateChanged">
            <summary>
            Occurs when text Source's state is changed, for example when caret position moved, text edited, amount of lines changed, lexer changed, etc.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.SyntaxEdit.ModifiedChanged">
            <summary>
            Occurs when modified state is changed.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.SyntaxEdit.PaintBackground">
            <summary>
            Occurs when Edit control should paint its background in transparent mode.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.Find(System.String,Stimulsoft.Editor.SearchOptions,System.Text.RegularExpressions.Regex,System.Drawing.Point@,System.Int32@,System.Text.RegularExpressions.Match@)">
            <summary>
            Searches for given text within the control's text content.
            </summary>
            <param name="str">The text to locate in the collection.</param>
            <param name="options">Specifies parameters of search.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="position">Position in strings collection to start search.</param>
            <param name="len">Receives length of the found text.</param>
            <param name="match">Receives match if regular expression search successfull</param>
            <returns>True if search succeed; otherwise false.</returns>
            <remarks>If search succeed position parameter receive location of the found text.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.Find(System.String,Stimulsoft.Editor.SearchOptions,System.Text.RegularExpressions.Regex,System.Collections.IList)">
            <summary>
            Searches for all occurences of given text within the control's contents with specified options using specified regular expression.
            </summary>
            <param name="text">Text to find.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="searchResults">Represents list of ranges determining search results.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.Find(System.String)">
            <summary>
            Searches for given text within the control's contents.
            </summary>
            <param name="str">Text to find.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.Find(System.String,Stimulsoft.Editor.SearchOptions)">
            <summary>
            Searches for given text within the control's contents with specified options.
            </summary>
            <param name="str">Text to find.</param>
            <param name="options">Represents options to search text.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.Find(System.String,Stimulsoft.Editor.SearchOptions,System.Text.RegularExpressions.Regex)">
            <summary>
            Searches for given text within the control's contents with specified options using specified regular expression.
            </summary>
            <param name="str">Text to find.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.FindNext">
            <summary>
            Searches for the next occurence of the text specified by previous search.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.FindPrevious">
            <summary>
            Searches for the previous occurence of the text specified by previous search.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.FindNextSelected">
            <summary>
            Searches for the next occurence of the selected text.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.FindPreviousSelected">
            <summary>
            Searches for the previous occurence of the selected text.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.CanFindNext">
            <summary>
            Indicates whether search engine can find next occurence of the text specified by previous search or it is only first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search; otherwise true.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.CanFindPrevious">
            <summary>
            Indicates whether search engine can find previous occurence of the text specified to search or it is the first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search; otherwise true.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.CanFindNextSelected">
            <summary>
            Indicates whether search engine can find next occurence of the selected text or it is the first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search or no text selected; otherwise true.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.CanFindPreviousSelected">
            <summary>
            Indicates whether search engine can find previous occurence of the selected text or it is the first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search or no text selected; otherwise true.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.Replace(System.String,System.String)">
            <summary>
            Searches for the first occurrence of given text within the text content and if succeed replaces it by specified string.
            </summary>
            <param name="str">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.Replace(System.String,System.String,Stimulsoft.Editor.SearchOptions)">
            <summary>
            Searches for first occurrence given text within the text content with specified options and if succeed replaces it by specified string.
            </summary>
            <param name="str">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.Replace(System.String,System.String,Stimulsoft.Editor.SearchOptions,System.Text.RegularExpressions.Regex)">
            <summary>
            Searches for first occurrence given text within the text content with specified options using specified regular expression and if succeed replaces it by specified string.
            </summary>
            <param name="str">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ReplaceAll(System.String,System.String,System.Int32@)">
            <summary>
            Replaces all occurrences of given text within class text content by specified replaceWith string.
            </summary>
            <param name="str">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="count">Number of replaced occurrences.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ReplaceAll(System.String,System.String,Stimulsoft.Editor.SearchOptions,System.Int32@)">
            <summary>
            Replaces all occurrences of given text within text content by specified replaceWith string.
            </summary>
            <param name="str">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <param name="count">Number of replaced occurrences.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.NeedReplaceCurrent(System.Text.RegularExpressions.Match@)">
            <summary>
            Indicates whether search engine need to replace successfully found and selected text.
            </summary>
            <param name="match">Receives match if regular expression search successfull</param>
            <returns>True is some text is found; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.NeedReplaceCurrent">
            <summary>
            Indicates whether search engine need to replace successfully found and selected text.
            </summary>
            <returns>True is some text is found; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ReplaceCurrent(System.String,Stimulsoft.Editor.SearchOptions,System.Text.RegularExpressions.Match)">
            <summary>
            Replaces currently selected text.
            </summary>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Specifies parameters of search and replace.</param>
            <param name="match">Represents Match object if regular expression search successfull</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ReplaceAll(System.String,System.String,Stimulsoft.Editor.SearchOptions,System.Text.RegularExpressions.Regex,System.Int32@)">
            <summary>
            Replaces all occurrences of given text within class text content by specified replaceWith string.
            </summary>
            <param name="str">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="count">Number of replaced occurrences.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MarkAll(System.String,System.Boolean)">
            <summary>
            Marks all occurrences of specified string in the class text content by unnumbered bookmarks and moves to the last occurrence.
            </summary>
            <param name="str">Specifies text to mark.</param>
            <param name="clearPrevious">Indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.</param>
            <returns>Number of found occurrences.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MarkAll(System.String,Stimulsoft.Editor.SearchOptions,System.Boolean)">
            <summary>
            Marks all occurrences of specified string in the class text content by unnumbered bookmarks and moves to the last occurrence.
            </summary>
            <param name="str">Specifies text to mark.</param>
            <param name="options">Specifies parameters of search.</param>
            <param name="clearPrevious">Indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.</param>
            <returns>Number of found occurrences.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MarkAll(System.String,Stimulsoft.Editor.SearchOptions,System.Text.RegularExpressions.Regex,System.Boolean)">
            <summary>
            Marks all occurrences of specified string in the class text content by unnumbered bookmarks and moves to the last occurrence.
            </summary>
            <param name="str">Specifies text to mark.</param>
            <param name="options">Specifies parameters of search.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="clearPrevious">Indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.</param>
            <returns>Number of found occurrences.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.StartIncrementalSearch">
            <summary>
            Enters control to the incremental search state.
            <seealso cref="!:QWhale.Editor.SyntaxEdit.FinishIncrementalSearch"/>
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.StartIncrementalSearch(System.Boolean)">
            <summary>
            Enters control to the incremental search state.
            <seealso cref="!:QWhale.Editor.SyntaxEdit.FinishIncrementalSearch"/>
            </summary>
            <param name="backwardSearch">Indicates that search should be executed towards the beginning of text.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.FinishIncrementalSearch">
            <summary>
            Leaves control from the incremental search state.
            <seealso cref="!:QWhale.Editor.SyntaxEdit.StartIncrementalSearch"/>
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.IncrementalSearch(System.String,System.Boolean)">
            <summary>
            Finds given text incrementally.
            </summary>
            <param name="key">Additional value to seach text.</param>
            <param name="deleteLast">Specifies whether search text should be altered by adding Key string.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.GetTextAtCursor">
            <summary>
            Returns word at the cursor position.
            </summary>
            <returns>Word at the cursor position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.CanSearchSelection(System.String@)">
            <summary>
            When implemented by a class, returns whether search can be performed inside selection.
            </summary>
            <returns>True if selection is not empty; otherwise false</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ShowNotFound(System.String)">
            <summary>
            Displays "searched text not found" message box.
            </summary>
            <param name="caption">Specifies caption of the message dialog.</param>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.SearchPos">
            <summary>
            Gets or sets a value that represents position of the last found text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ShouldSerializeSearchOptions">
            <summary>
            Indicates whether the <c>SearchOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>SearchOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.SearchOptions">
            <summary>
            Gets or sets a value that defines search and replace options.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.SearchLen">
            <summary>
            Represents length of the last found text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.FirstSearch">
            <summary>
            Gets or sets a value indicating whether control launches text search at first.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.InIncrementalSearch">
            <summary>
            Indicates whether control is in incremental search state.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.IncrementalSearchString">
            <summary>
            Return text to search if class is in incremental search state; otherwise return empty string.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.MoveCaretOnDrag">
            <summary>
            When implemented by a class, moves caret to the position of drag cursor.
            </summary>
            <param name="position">Position in the text to make visible.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ProcessKeyPress(System.Char)">
            <summary>
            Processes key press
            </summary>
            <param name="keyChar">Tepresents key character to process.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.PreProcessMessage(System.Windows.Forms.Message@)">
            <summary>
            Preprocesses input messages within the message loop before they are dispatched.
            </summary>
            <param name="msg">A Message, passed by reference, that represents the message to process.</param>
            <returns>True if the message was processed by the Edit control; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxEdit.ShouldSerializeText">
            <summary>
            Indicates whether the <c>Text</c> property should be persisted.
            </summary>
            <returns>True if <c>Text</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.Text">
            <summary>
            Gets or sets the string collection as a single string with the individual lines delimited by carriage returns.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.AllowDrop">
            <summary>
            Gets or sets a value indicating whether the control can accept data that the user drags onto it.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.UseDefaultMenu">
            <summary>
            Indicates whether edit control should use bultin popup menu.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxEdit.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>SyntaxEdit</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.SyntaxPaint">
            <summary>
            Represents properties and methods, used to draw text and graphic primitives.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxPaint.#ctor(Stimulsoft.Editor.IPainter,System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <c>SyntaxPaint</c> class with specified parameters.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="control">Specifies control begin painted.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxPaint.GetFontStyle(System.Drawing.FontStyle,Stimulsoft.Editor.ColorFlags)">
            <summary>
            Retrieves font style corresponding to given state.
            </summary>
            <param name="fontStyle">Default style.</param>
            <param name="state">Additional color flags.</param>
            <returns>New value of font style.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxPaint.GetFontColor(System.Drawing.Color,Stimulsoft.Editor.ColorFlags)">
            <summary>
            Retrieves font color corrsponding to given state.
            </summary>
            <param name="color">Default color.</param>
            <param name="state">Additional color flags.</param>
            <returns>New value of font color.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxPaint.GetBackColor(System.Drawing.Color,Stimulsoft.Editor.ColorFlags)">
            <summary>
            Retrieves background color corrsponding to given state.
            </summary>
            <param name="color">Default color.</param>
            <param name="state">Additional color flags.</param>
            <returns>New value of background color.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxPaint.EqualStyles(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Indicates whehter given styles are equal.
            </summary>
            <param name="style1">First style to compare.</param>
            <param name="style2">Second style to compare.</param>
            <param name="useColors">Indicate whehter colors of the styles are assumed.</param>
            <returns>True if styles are equal; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxPaint.PaintSyntax(Stimulsoft.Editor.IPainter,System.Int32,System.Int32,System.Drawing.Point,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Perform syntax painting of the control on the graphic surface.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="startLine">Specifies the first line of content to paint.</param>
            <param name="endLine">Specifies the last line of content to paint.</param>
            <param name="position">The Point value that specifies start position to draw content from.</param>
            <param name="rect">Rectangular area of control to draw.</param>
            <param name="specialPaint">Reserved for internal use. Used for Print and Print preview.</param>		
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxPaint.DrawLine(System.Int32,System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>
            Draws line given by its index at the specified position.
            </summary>
            <param name="index">Index of line to draw.</param>
            <param name="position">Position to start drawing.</param>
            <param name="clipRect">Rectangular area of the control to draw line in.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxPaint.DrawLine(System.Int32,System.String,System.Int16[],System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>
            Draws line given by its index at the specified position.
            </summary>
            <param name="index">Index of line to draw.</param>
            <param name="line">Specifies text to draw</param>
            <param name="colorData">Specifies array containing color data for given string</param>
            <param name="position">Position to start drawing.</param>
            <param name="clipRect">Rectangular area of the control to draw line in.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxPaint.MeasureLine(System.String,System.Int16[],System.Int32,System.Int32,System.Int32,System.Int32@,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Measures part of given string.
            </summary>
            <param name="line">Text to measure.</param>
            <param name="colorData">Color data attached to the given string.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <param name="width">Maximum length of the string.</param>
            <param name="chars">Receive real number of measured chars.</param>
            <param name="measureChars">Specifies whether the method should measure how much characters fits to the given width.</param>
            <param name="addSpace">Specifies whether spaces are added to the end of string if needed.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxPaint.MeasureLine(System.String,System.Int16[],System.Int32,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Measures part of given string.
            </summary>
            <param name="line">Text to measure.</param>
            <param name="colorData">Color data attached to the given string.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <param name="width">Maximum length of the string.</param>
            <param name="chars">Receive real number of measured chars.</param>
            <param name="measureChars">Specifies whether the method should measure how much characters fits to the given width.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxPaint.MeasureLine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Measures part of the string given at by its index.
            </summary>
            <param name="index">Index of line to measure.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxPaint.MeasureLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Measures part of the string given by its index.
            </summary>
            <param name="index">Index of line to measure.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <param name="width">Maximum length of the string.</param>
            <param name="chars">Receive real number of measured chars.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxPaint.MeasureLine(System.String,System.Int16[],System.Int32,System.Int32)">
            <summary>
            Measures part of given string.
            </summary>
            <param name="line">Text to measure.</param>
            <param name="colorData">Color data attached to the given string.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxPaint.OnCustomDraw(Stimulsoft.Editor.IPainter,System.Drawing.Rectangle,Stimulsoft.Editor.DrawStage,Stimulsoft.Editor.DrawState,Stimulsoft.Editor.DrawInfo)">
            <summary>
            Raises an <c>CustomDraw</c> event.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="rect">Rectangular area of control to draw.</param>
            <param name="stage">Specifies whether this method called before or after painting.</param>
            <param name="state">Specifies part of control to draw.</param>
            <param name="info">Full information about drawing text fragment.</param>
            <returns>True if user handles this event; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxPaint.Lexer">
            <summary>
            Gets or sets object that can make lexical analysis for the control's content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxPaint.ResetDisableColorPaint">
            <summary>
            Resets the <c>DisableColorPaint</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxPaint.ResetDisableSyntaxPaint">
            <summary>
            Resets the <c>DisableSyntaxPaint</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxPaint.DisableColorPaint">
            <summary>
            Gets or sets a value indicating whether control uses colors to paint its content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxPaint.DisableSyntaxPaint">
            <summary>
            Gets or sets a value indicating whether Edit control uses lexical colors/styles to paint its content.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.SyntaxPaint.CustomDraw">
            <summary>
            Occurs when control draws its content.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.EditSyntaxPaint">
            <summary>
            Represents properties and methods, used to draw text and graphic primitives.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.EditSyntaxPaint.#ctor(Stimulsoft.Editor.IPainter,Stimulsoft.Editor.SyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>EditSyntaxPaint</c> class with specified parameters.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="owner">Specifies control being painted.</param>
        </member>
        <member name="M:Stimulsoft.Editor.EditSyntaxPaint.GetFontStyle(System.Drawing.FontStyle,Stimulsoft.Editor.ColorFlags)">
            <summary>
            Retrieves font style corresponding to given state.
            </summary>
            <param name="fontStyle">Default style.</param>
            <param name="state">Additional color flags.</param>
            <returns>New value of font style.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditSyntaxPaint.GetFontColor(System.Drawing.Color,Stimulsoft.Editor.ColorFlags)">
            <summary>
            Retrieves font color corrsponding to given state.
            </summary>
            <param name="color">Default color.</param>
            <param name="state">Additional color flags.</param>
            <returns>New value of font color.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditSyntaxPaint.GetBackColor(System.Drawing.Color,Stimulsoft.Editor.ColorFlags)">
            <summary>
            Retrieves background color corrsponding to given state.
            </summary>
            <param name="color">Default color.</param>
            <param name="state">Additional color flags.</param>
            <returns>New value of background color.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.EditSyntaxPaint.DrawLine(System.Int32,System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>
            Draws line given by its index at the specified position.
            </summary>
            <param name="index">Index of line to draw.</param>
            <param name="position">Position to start drawing.</param>
            <param name="clipRect">Rectangular area of the control to draw line in.</param>
        </member>
        <member name="M:Stimulsoft.Editor.EditSyntaxPaint.DrawLine(System.Int32,System.Drawing.Point,System.Drawing.Rectangle,System.Int32@)">
            <summary>
            Draws line given by its index at the specified position.
            </summary>
            <param name="index">Index of line to draw.</param>
            <param name="position">Position to start drawing.</param>
            <param name="clipRect">Rectangular area of the control to draw line in.</param>
            <param name="realLine">Real line index.</param>
        </member>
        <member name="M:Stimulsoft.Editor.EditSyntaxPaint.PaintSyntax(Stimulsoft.Editor.IPainter,System.Int32,System.Int32,System.Drawing.Point,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Paints a specified part of the control.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="startLine">Specifies first line of content to paint.</param>
            <param name="endLine">Specifies last line of content to paint.</param>
            <param name="position">The Point value that specifies start position to draw content from.</param>
            <param name="rect">Rectangular area of control to draw.</param>
            <param name="specialPaint">Reserved for internal use. Used for Print and Print preview.</param>
        </member>
        <member name="M:Stimulsoft.Editor.EditSyntaxPaint.PaintLineBookMarks(Stimulsoft.Editor.IPainter,System.Drawing.Rectangle)">
            <summary>
            Paints collection of line bookmark.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="rect">Rectangular area of control to draw line bookmarks.</param>
        </member>
        <member name="M:Stimulsoft.Editor.EditSyntaxPaint.PaintLineBookMark(Stimulsoft.Editor.IPainter,Stimulsoft.Editor.IBookMark,System.Drawing.Rectangle)">
            <summary>
            Paint specified line bookmark.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="bookMark"><c>IBookMark</c> to draw.</param>
            <param name="rect">Rectangular area of control to draw line bookmark.</param>
        </member>
        <member name="P:Stimulsoft.Editor.EditSyntaxPaint.Owner">
            <summary>
            Represents <c>SyntaxEdit</c> object that owns this <c>EditSyntaxPaint</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.EditSyntaxPaint.Lexer">
            <summary>
            Gets or sets object that can make lexical analysis for the control's content.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.StrItem">
            <summary>
            Represents string-like object with extended properties.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.StrItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>StrItem</c> class with specified string.
            </summary>
            <param name="s">Specifies string content of this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.StrItem.SetColorFlag(System.Int16[]@,System.Int32,System.Int32,Stimulsoft.Editor.ColorFlags,System.Boolean)">
            <summary>
            Sets color information to specified colorData.
            </summary>
            <param name="colorData">Retrieves color inforamtion.</param>
            <param name="start">Specifies the first character in colorData to set.</param>
            <param name="len">Specifies number of characters in colorData to set.</param>
            <param name="flag">Specifies color information to set.</param>
            <param name="setFlag">Indicates whether Color information from flag should be set or removed.</param>
        </member>
        <member name="M:Stimulsoft.Editor.StrItem.SetColorFlag(System.Int32,System.Int32,Stimulsoft.Editor.ColorFlags,System.Boolean)">
            <summary>
            Sets color information to <c>StrItem.ColorData</c>.
            </summary>
            <param name="start">Specifies the first character in <c>StrItem.ColorData</c> to set.</param>
            <param name="len">Specifies number of characters in <c>StrItem.ColorData</c> to set.</param>
            <param name="flag">Specifies color information to set.</param>
            <param name="setFlag">Indicates whether Color information from flag should be set or removed.</param>
        </member>
        <member name="M:Stimulsoft.Editor.StrItem.GetColorFlag(System.Int32,Stimulsoft.Editor.ColorFlags@)">
            <summary>
            Retrieves color information from <c>StrItem.ColorData</c>.
            </summary>
            <param name="pos">Specifies position in <c>StrItem.ColorData</c> to obtain color information.</param>
            <param name="flag">Receives color information.</param>
        </member>
        <member name="M:Stimulsoft.Editor.StrItem.Split(System.String)">
            <summary>
            Converts specified text to string array.
            </summary>
            <param name="text">String to convert.</param>
            <returns>String array representation of given text.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.StrItem.String">
            <summary>
            Gets or sets string content of the <c>StrItem</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.StrItem.ColorData">
            <summary>
            Gets or sets color information of the <c>StrItem</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.StrItem.State">
            <summary>
            Gets or sets current state of the <c>StrItem</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.StrItem.LexState">
            <summary>
            Gets or sets index of lexical state at item end.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.StrItem.PrevLexState">
            <summary>
            Gets or sets index of lexical state at item start.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.SyntaxStrings">
            <summary>
            Specifies collection of lines with extended possibilities.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.#ctor(Stimulsoft.Editor.TextSource)">
            <summary>
            Initializes a new instance of the <c>SyntaxStrings</c> class with specified parameters.
            </summary>
            <param name="source"><c>TextSource</c> that contains this collection of lines.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.#ctor">
            <summary>
            Initializes a new instance of the <c>SyntaxStrings</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.Finalize">
            <summary>
            Destroys the instance of the <c>SyntaxStrings</c> class.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.CreateStrItem(System.String)">
            <summary>
            Creates a new <c>IStrItem</c> object containing specified text.
            </summary>
            <param name="s">String placed into a new <c>IStrItem</c> object.</param>
            <returns>New <c>IStrItem</c> object.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.Add(System.String)">
            <summary>
            Adds a new item to the end of string collection.
            </summary>
            <param name="value">String to be added to the end of the collection.</param>
            <returns>Index of new added item.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.Clear">
            <summary>
            Removes all items from string collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.Contains(System.String)">
            <summary>
            Indicates whether string collection contains specified string.
            </summary>
            <param name="value">string to check.</param>
            <returns>True if contains; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.IndexOf(System.String)">
            <summary>
            Returns the index of the first occurrence of given string in the string collection.
            </summary>
            <param name="value">The string to locate in string collection.</param>
            <returns>The index of the first occurrence of string within the string collection, if found; otherwise -1.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.Insert(System.Int32,System.String)">
            <summary>
            Inserts value at the specified position.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <param name="value">Specifies string to insert.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.Remove(System.String)">
            <summary>
            Removes the first occurrence of given string from the string collection.
            </summary>
            <param name="value">String to remove.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.RemoveAt(System.Int32)">
            <summary>
            Removes string item at specified position.
            </summary>
            <param name="index">Specifies index of item in the string collection to remove.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.GetItem(System.Int32)">
            <summary>
            Returns the <c>IStrItem</c> object at the given position of the collection.
            </summary>
            <param name="index">Index of item in the collection.</param>
            <returns><c>IStrItem</c> object at specified position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.GetLength(System.Int32)">
            <summary>
            Returns length of the string that corresponds to specified item in the collection.
            </summary>
            <param name="index">Index of item in the collection.</param>
            <returns>If collection do not contain specified item method returns 0.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.Changed(System.Int32,System.Int32)">
            <summary>
            Notifies about string state changing.
            </summary>
            <param name="first">Index of the first string to update.</param>
            <param name="last">Index of the last string to update.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.Changed(System.Int32)">
            <summary>
            Notifies about string state changing.
            </summary>
            <param name="index">Index of string to update.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.ToArrayList">
            <summary>
            Converts string collection to the array list. 
            </summary>
            <returns>IList representation of the <c>SyntaxStrings</c> content.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.ToStringArray">
            <summary>
            Converts string collection to the array of strings.
            </summary>
            <returns>Array of strings that represents <c>SyntaxStrings</c> content.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.GetCharAt(System.Drawing.Point)">
            <summary>
            Returns character from specified position.
            </summary>
            <param name="position">Position of character where Y is index of item in string collection and X is index of character in this string.</param>
            <returns>Characted from specified position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.GetCharAt(System.Int32,System.Int32)">
            <summary>
            Returns character from specified position.
            </summary>
            <param name="x">Specifies position of character in string.</param>
            <param name="y">Specifies index of item in string collection.</param>
            <returns>Characted from specified position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.GetLexStyle(System.Drawing.Point)">
            <summary>
            Returns lexical style at specified position.
            </summary>
            <param name="position">Position of style where Y is index of item in string collection and X is index of character in this string.</param>
            <returns>Lexical style at specified position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.RemoveSpaces(System.String)">
            <summary>
            Removes trailings spaces from end of given string if <c>RemoveTrailingSpaces</c> if true.
            </summary>
            <param name="s">String to process.</param>
            <returns>String without trailing spaces.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.TextPointToAbsolutePosition(System.Drawing.Point)">
            <summary>
            Converts given Point value to the absolute position.
            </summary>
            <param name="position">Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</param>
            <returns>Absolute position of given point.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.AbsolutePositionToTextPoint(System.Int32)">
            <summary>
            Converts given absolute position to position as Point value.
            </summary>
            <param name="position">Specifies index of character if the text considered as a single string.</param>
            <returns>Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxStrings.Text">
            <summary>
            Gets or sets the strings in the <c>SyntaxStrings</c> as a single string with the individual strings delimited by carriage returns.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxStrings.RemoveTrailingSpaces">
            <summary>
            Gets or set a boolean value thet indicates whether <c>SyntaxStrings</c> should remove trailing spaces from the end of each its strings.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxStrings.Source">
            <summary>
            Gets the text source owning the <c>SyntaxStrings</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxStrings.Item(System.Int32)">
            <summary>
            Provides an indexed access to individual string stored in the collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <c>SyntaxStrings</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxStrings.IsFixedSize">
            <summary>
            Indicates whether the collection has a fixed size.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxStrings.IsReadonly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxStrings.Current">
            <summary>
            Represents current string in the collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.MoveNext">
            <summary>
            Moves to the next line in the string collection.
            </summary>
            <returns>True if succeed (current line is not last line); otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.Reset">
            <summary>
            Moves to the first line within the string collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxStrings.Count">
            <summary>
            Represents number of strings in the collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxStrings.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxStrings.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <c>SyntaxStrings</c> object.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire string collection to a another array, starting at the specified index of the target array.
            </summary>
            <param name="array">The Array that is the destination of the elements copied from string collection.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.TextPointToAbsolutePosition(Stimulsoft.Editor.IStringList,System.Drawing.Point,System.String)">
            <summary>
            Converts given Point value to the absolute position.
            </summary>
            <param name="list"><c>IStringList</c> collection to convert.</param>
            <param name="position">Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</param>
            <param name="lineTerminator">Specifies line terminator</param>
            <returns>Absolute position of given point.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.AbsolutePositionToTextPoint(Stimulsoft.Editor.IStringList,System.Int32,System.String)">
            <summary>
            Converts given absolute position to position as Point value.
            </summary>
            <param name="list"><c>IStringList</c> collection to convert.</param>
            <param name="position">Specifies index of character if the text considered as a single string.</param>
            <param name="lineTerminator">Specifies line terminator</param>
            <returns>Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.Find(Stimulsoft.Editor.IStringList,System.Collections.Hashtable,System.String,Stimulsoft.Editor.SearchOptions,System.Text.RegularExpressions.Regex,System.Drawing.Point@,System.Int32@,System.Text.RegularExpressions.Match@)">
            <summary>
            Searches for given text within specified string collection.
            </summary>
            <param name="list"><c>IStringList</c> collection to find from.</param>
            <param name="delimTable">Specifies collection of characters that is used as word delimiters.</param>
            <param name="str">The text to locate in the collection.</param>
            <param name="options">Specifies parameters of search.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="position">Position in strings collection to start search.</param>
            <param name="len">Receives length of the found text</param>
            <param name="match">Receives match if regular expression search successfull</param>
            <returns>True if search succeed; otherwise false.</returns>
            <remarks>If search succeed Position parameter receive location of the found text.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.Find(System.String,Stimulsoft.Editor.SearchOptions,System.Text.RegularExpressions.Regex,System.Drawing.Point@,System.Int32@,System.Text.RegularExpressions.Match@)">
            <summary>
            Searches for given text within the control's text content.
            </summary>
            <param name="str">The text to locate in the collection.</param>
            <param name="options">Specifies parameters of search.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="position">Position in strings collection to start search.</param>
            <param name="len">Receives length of the found text.</param>
            <param name="match">Receives match if regular expression search successfull</param>
            <returns>True if search succeed; otherwise false.</returns>
            <remarks>If search succeed Position parameter receive location of the found text.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.SaveFile(System.String)">
            <summary>
            Saves text content to the specific file.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.SaveFile(System.String,Stimulsoft.Editor.ExportFormat)">
            <summary>
            Saves text content to the specific file with specific encoding.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="format">Specifies output format.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.SaveFile(System.String,System.Text.Encoding)">
            <summary>
            Saves text content to the specific file with specific encoding.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.SaveFile(System.String,Stimulsoft.Editor.ExportFormat,System.Text.Encoding)">
            <summary>
            Saves text content to the specific file with specific encoding.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="format">Specifies output format.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.AfterSave">
            <summary>
            Performs additional actions after <c>SyntaxStrings</c> saves its content to the file.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.SaveStream(System.IO.TextWriter)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.SaveStream(System.IO.TextWriter,Stimulsoft.Editor.ExportFormat)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <param name="format">Specifies output format.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.SaveStream(System.IO.Stream)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.SaveStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.SaveStream(System.IO.Stream,Stimulsoft.Editor.ExportFormat)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="format">Specifies output format.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.SaveStream(System.IO.Stream,Stimulsoft.Editor.ExportFormat,System.Text.Encoding)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <param name="format">Specifies output format.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.ShouldSerializeLineTerminator">
            <summary>
            Indicates whether the <c>LineTerminator</c> property should be persisted.
            </summary>
            <returns>True if <c>LineTerminator</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxStrings.LineTerminator">
            <summary>
            Gets or sets a string value that terminates line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.LoadFile(System.String)">
            <summary>
            Loads the contents of the specified file.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.LoadFile(System.String,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified file with specified encoding.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.LoadStream(System.IO.TextReader)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.LoadStream(System.IO.Stream)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.LoadStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.GetIndentString(System.Int32,System.Int32)">
            <summary>
            Returns indentation string which consist of tabs and spaces.
            </summary>
            <param name="count">Specifies number of characters in the string.</param>
            <param name="p">Specifies start position of the string.</param>
            <returns>Indented string that containing tabs and spaces.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.GetTabStop(System.Int32)">
            <summary>
            Returns number of spaces to the next TabStop at the specified position.
            <seealso cref="!:QWhale.Editor.SyntaxStrings.GetPrevTabStop"/>
            </summary>
            <param name="pos">Position to check.</param>
            <returns>Number of spaces.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.GetPrevTabStop(System.Int32)">
            <summary>
            Returns number of spaces to the previous TabStop.
            <seealso cref="!:QWhale.Editor.SyntaxStrings.GetTabStop"/>
            </summary>
            <param name="pos">Position to check.</param>
            <returns>Number of spaces.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.GetTabString(System.String)">
            <summary>
            Converts all tab character to spaces depending on <c>TabStops</c> property.
            </summary>
            <param name="s">Text to convert.</param>
            <returns>Tabbed string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.TabPosToPos(System.String,System.Int32)">
            <summary>
            Returns specified position within given string as untabbed position.
            </summary>
            <param name="str">Specifies string to convert.</param>
            <param name="pos">Specifies index of character which position should be converted.</param>
            <returns>Untabbed position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.PosToTabPos(System.String,System.Int32)">
            <summary>
            Returns specified position within given string as tabbed position.
            </summary>
            <param name="str">Specifies string to check.</param>
            <param name="pos">Positon of the character in the string.</param>
            <returns>Tabbed position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.ResetTabStops">
            <summary>
            Resets the <c>TabStops</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.ResetUseSpaces">
            <summary>
            Resets the <c>UseSpaces</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxStrings.TabStops">
            <summary>
            Gets or sets the character columns that the cursor will move to each time you press Tab.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxStrings.UseSpaces">
            <summary>
            Gets or sets a value indicating whether indent or TAB operations insert space characters rather than TAB characters.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.Assign(Stimulsoft.Editor.ISyntaxStrings)">
            <summary>
            Copies the contents from another <c>ISyntaxStrings</c> object.
            </summary>
            <param name="source">Specifies <c>ISyntaxStrings</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.BeginUpdate">
            <summary>
            Prevents object state updating until calling <c>EndUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.EndUpdate">
            <summary>
            Re-enables object state updating, that was turn of by calling <c>BeginUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.AddNotifier(Stimulsoft.Editor.INotifier)">
            <summary>
            Adds new handler to respond for notification.
            </summary>
            <param name="sender">Specifies an object that can respond a notification.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.RemoveNotifier(Stimulsoft.Editor.INotifier)">
            <summary>
            Exclude specified handler from notification handlers list.
            </summary>
            <param name="sender">Specifies an object that can respond a notification.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.Notify">
            <summary>
            Notifies all notifiers about updating object state.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxStrings.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxStrings.FirstChanged">
            <summary>
            Represents number of the first changed line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxStrings.LastChanged">
            <summary>
            Represents number of the last changed line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.IsDelimiter(System.Collections.Hashtable,System.String,System.Int32)">
            <summary>
            Indicates whether the character at the specific position of given string is a delimiter character.
            </summary>
            <param name="delimTable">Specifies collection of characters that is used as delimiters.</param>
            <param name="str">The string in which character should be tested.</param>
            <param name="pos">The index of character in the given string.</param>
            <returns>True if specified character is delimiter; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.IsDelimiter(System.String,System.Int32)">
            <summary>
            Indicates whether the character at the specific position of given string is a delimiter character.
            </summary>
            <param name="str">The string in which character should be tested.</param>
            <param name="pos">The index of character in the given string.</param>
            <returns>True if specified character is delimiter; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.IsDelimiter(System.Int32,System.Int32)">
            <summary>
            Indicates whether the character at the specific position of the string collection is delimiter character.
            </summary>
            <param name="index">The index of line in which character should be tested.</param>
            <param name="pos">The index of character in the specific string.</param>
            <returns>True if specified character is delimiter; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.IsDelimiter(System.Char)">
            <summary>
            Indicates whether the specified character is delimiter character.
            </summary>
            <param name="ch">The char value that should be tested.</param>
            <returns>True if specified character is delimiter; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.GetWord(System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Returns word start and end, if there is word at the specified position.
            </summary>
            <param name="str">The given string.</param>
            <param name="pos">The index of character within the string.</param>
            <param name="left">Receives start position of the word.</param>
            <param name="right">Receives end position of the word.</param>
            <returns>True if any word found; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.GetWord(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Returns word start and end, if there is word at the specified position.
            </summary>
            <param name="index">The index of line in the text.</param>
            <param name="pos">The index of character in the within the string.</param>
            <param name="left">Receives start position of the word.</param>
            <param name="right">Receives end position of the word.</param>
            <returns>True if any word found; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.GetTextAt(System.Int32,System.Int32)">
            <summary>
            Returns word at the specific text position.
            </summary>
            <param name="pos">Specifies index of the line.</param>
            <param name="line">Specifies index of character in the text string.</param>
            <returns>Word found at the specified position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.GetTextAt(System.Drawing.Point)">
            <summary>
            Returns word at the specific text position.
            </summary>
            <param name="position">The Point value that specifies position in the text.</param>
            <returns>Word found at the specified position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxStrings.ResetDelimiters">
            <summary>
            Resets the <c>Delimiters</c> to the defalut value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxStrings.Delimiters">
            <summary>
            Gets or sets an array of characters used as delimiters between words in the text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxStrings.DelimiterString">
            <summary>
            Gets or sets <c>Delimiters</c> as a single string.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxStrings.DelimTable">
            <summary>
            Represents <c>Delimiters</c> as a key-and-value pairs collection where each key is a single delimiter character.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxStrings.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>SyntaxStrings</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.UndoData">
            <summary>
            Represents data for a single undo operation.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UndoData.Operation">
            <summary>
            Represents the type of the undo operation.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UndoData.Reason">
            <summary>
            Represents the reason of the undo operation.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UndoData.UpdateCount">
            <summary>
            Number of undo operations that can be executed as single block.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UndoData.UndoFlag">
            <summary>
            Reserwed for internal use.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UndoData.Data">
            <summary>
            Represents the object associated with this <c>UndoData</c>.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UndoData.Position">
            <summary>
            Represents the position of the undoable operation within the text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.UndoData.#ctor(Stimulsoft.Editor.UndoOperation,System.Object)">
            <summary>
            Initializes a new instance of the <c>UndoData</c> class with specified parameters.
            </summary>
            <param name="operation">Specifies type of the operation that can be undone.</param>
            <param name="data">The object stored within the <c>UndoData</c>.</param>
        </member>
        <member name="T:Stimulsoft.Editor.TextSource">
            <summary>
            Represents class that provides interface between edited text and Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <c>TextSource</c> class with specified container.
            </summary>
            <param name="container">Specifies IContainer that contains this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.#ctor">
            <summary>
            Initializes a new instance of the <c>TextSource</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.Finalize">
            <summary>
            Destroys the instance of the <c>TextSource</c> class.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.TextPointToAbsolutePosition(System.Drawing.Point)">
            <summary>
            Converts given Point value to the absolute position.
            </summary>
            <param name="position">Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</param>
            <returns>Absolute position of given point.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.AbsolutePositionToTextPoint(System.Int32)">
            <summary>
            Converts given absolute position to position as Point value.
            </summary>
            <param name="position">Specifies index of character if the text considered as a single string.</param>
            <returns>Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.GetCharIndexFromPosition(System.Drawing.Point)">
            <summary>
            Converts given Point value to the index of character.
            </summary>
            <param name="position">Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</param>
            <returns>Index of character if the text considered as a single string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.GetPositionFromCharIndex(System.Int32)">
            <summary>
            Converts given character index to position as Point value.
            </summary>
            <param name="charIndex">Specifies index of character if the text considered as a single string.</param>
            <returns>Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ParseString(System.Int32)">
            <summary>
            Perform lexical analysis of the specified string.
            </summary>
            <param name="index">Index of line to parse.</param>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.NeedParse">
            <summary>
            Indicates whether syntax parsing can be performed for the text, or some of formatting text elements, such as urls or braces, should be highlighted.
            </summary>
            <returns>True if need to perform syntax parsing; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ParseStrings(System.Int32,System.Int32)">
            <summary>
            Perform lexical analysis specified strings.
            </summary>
            <param name="fromIndex">Index of the first line to parse.</param>
            <param name="toIndex">Index of the last line to parse.</param>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.CreateStrItem(System.String)">
            <summary>
            Create a new <c>IStrItem</c> object containing specified text.
            </summary>
            <param name="s">String that <c>IStrItem</c> contain.</param>
            <returns>Created <c>IStrItem</c> object.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ParseToString(System.Int32)">
            <summary>
            Perform lexical analysis of specified strings.
            </summary>
            <param name="index">Index of the last string to parse.</param>
            <remarks>Method parses string collection from the last parsed string to the string specified by Index parameter.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.SetColorFlag(System.Drawing.Rectangle,Stimulsoft.Editor.ColorFlags,System.Boolean)">
            <summary>
            Sets color information to curent <c>IStrItem.ColorData</c>.
            </summary>
            <param name="rect">Specifies rectangular area in.</param>
            <param name="flag">Specifies color information to set.</param>
            <param name="setFlag">Indicates whether Color information should be set or removed.</param>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.SetColorFlag(System.Drawing.Point,System.Int32,Stimulsoft.Editor.ColorFlags,System.Boolean)">
            <summary>
            Sets color information to curent <c>IStrItem.ColorData</c>.
            </summary>
            <param name="pos">Specifies the first item in <c>IStrItem.ColorData</c> to set.</param>
            <param name="len">Specifies number of items in <c>IStrItem.ColorData</c> to set.</param>
            <param name="flag">Specifies color information to set.</param>
            <param name="setFlag">Indicates whether Color information should be set or removed.</param>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.FileName">
            <summary>
            Gets or sets name of file that holds text source content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.Edits">
            <summary>
            Represents a collection of <c>ISyntaxEdit</c> controls linked to the text source.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.Lines">
            <summary>
            Represents the object that implements <c>ISyntaxStrings</c> interface containing collection of strings determining text source content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.ActiveEdit">
            <summary>
            Gets or sets an object that represent currently active (focused) <c>ISyntaxEdit</c> control linked to the text source.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.Text">
            <summary>
            Gets or sets text source content as a single string with the individual strings delimited by carriage returns.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.LineStyles">
            <summary>
            Represents an object that implements <c>ILineStyles</c> interface hodling collection of line styles for this document.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.BookMarks">
            <summary>
            Represents an object that implements <c>IBookMarks</c> interface holding collection of <c>IBookMark</c> objects each determining particular bookmark within the text source.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.Lexer">
            <summary>
            Gets or sets object that can perform lexical analysis of the text source content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.ParserLine">
            <summary>
            Gets the line currently parsed by the attached Lexer, when text source performs syntax parsing of the text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ValidatePosition(System.Drawing.Point@)">
            <summary>
            Validates given position within control's text content.
            </summary>
            <param name="position">Position to validate.</param>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.StorePosition(System.Drawing.Point)">
            <summary>
            Stores given position to stored position list.
            </summary>
            <param name="pt">Position to store.</param>
            <returns>Index of stored position in list.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.RestorePosition(System.Int32)">
            <summary>
            Restores position from stored position list by given index.
            </summary>
            <param name="index">Index of position to restore.</param>
            <returns>Point value that represents stored position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.Navigate(System.Int32,System.Int32)">
            <summary>
            Moves current position by the given offset value.
            </summary>
            <param name="deltaX">Horizontal offset.</param>
            <param name="deltaY">Vertical offset.</param>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.MoveTo(System.Int32,System.Int32)">
            <summary>
            Moves the current position to the given position.
            </summary>
            <param name="x">Index of character in the line to move to.</param>
            <param name="y">Index of line to move to.</param>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.MoveToChar(System.Int32)">
            <summary>
            Moves the current position to the specified character in the current line.
            </summary>
            <param name="x">Index of character in the current line to move to.</param>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.MoveToLine(System.Int32)">
            <summary>
            Moves the current position to the specified line.
            </summary>
            <param name="y">Index of line to move to.</param>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.MoveTo(System.Drawing.Point)">
            <summary>
            Moves the current position to the given position.
            </summary>
            <param name="position">New location of the current position.</param>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ResetNavigateOptions">
            <summary>
            Resets the <c>NavigateOptions</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.Position">
            <summary>
            Gets or sets current position within the control's text content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.NavigateOptions">
            <summary>
            Gets or sets navigating options.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.IsLineReadonly(System.Int32)">
            <summary>
            Determines whether the given line is readonly.
            </summary>
            <param name="index">Line index.</param>
            <returns>True if the line at given index is readonly; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.SetLineReadonly(System.Int32,System.Boolean)">
            <summary>
            When implemented by a class, sets readonly state for the given line.
            </summary>
            <param name="index">Line index.</param>
            <param name="readOnly">Indicates readonly flag should be set or cleared.</param>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.Insert(System.String)">
            <summary>
            Inserts the given string at the specified location.
            </summary>
            <param name="str">The text to insert.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.InsertFromFile(System.String)">
            <summary>
            Inserts the file text content at the specified location.
            </summary>
            <param name="file">Name of file to load text from.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.DeleteRight(System.Int32)">
            <summary>
            Deletes a specified number of characters to the right of the active point.
            </summary>
            <param name="len">Specifies number of characters to delete.</param>
            <returns>True if method succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.DeleteLeft(System.Int32)">
            <summary>
            Deletes a specified number of characters to the left of the active point.
            </summary>
            <param name="len">Specifies number of characters to delete.</param>
            <returns>True if method succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.InsertBlock(System.String)">
            <summary>
            Inserts the given string at the specified location.
            </summary>
            <param name="text">String to insert.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.InsertBlock(System.String[])">
            <summary>
            Inserts the given string array at the specified location.
            </summary>
            <param name="strings">String array to insert.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.InsertBlock(System.String[],System.Boolean)">
            <summary>
            Inserts the given string array at the specified location.
            </summary>
            <param name="strings">String array to insert.</param>
            <param name="select">Specifies whether inserted block should be selected.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.InsertBlock(Stimulsoft.Editor.ISyntaxStrings)">
            <summary>
            Inserts the given string collection at the specified location.
            </summary>
            <param name="strings">Collection of strings to insert.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.DeleteBlock(System.Int32)">
            <summary>
            Deletes a specified block of characters.
            </summary>
            <param name="len">Specifies length of block (number of characters) to delete.</param>
            <returns>True if method succeed; otherwise false.</returns>
            <remarks>The method deletes block of characters starting from the current position.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.DeleteBlock(System.Drawing.Rectangle)">
            <summary>
            Deletes a specified block of characters.
            </summary>
            <param name="rect">Specifies coordinates of characters block to delete.</param>
            <returns>True if method succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.BreakLine">
            <summary>
            Breaks current line into two lines.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.UnBreakLine">
            <summary>
            Concatenates lines at current position.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.NewLine">
            <summary>
            Inserts a line break at the current position.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.NewLineAbove">
            <summary>
            Inserts a line break above the current position.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.NewLineBelow">
            <summary>
            Inserts a line break below the current position.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ResetIndentOptions">
            <summary>
            Resets the <c>IndentOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ResetMaxLength">
            <summary>
            Resets the <c>MaxLength</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ResetModified">
            <summary>
            Resets the <c>Modified</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ResetOverWrite">
            <summary>
            Resets the <c>OverWrite</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ResetReadonly">
            <summary>
            Resets the <c>Readonly</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ResetSingleLineMode">
            <summary>
            Resets the <c>SingleLineMode</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.Readonly">
            <summary>
            Gets or sets a value indicating whether the control's content is read-only.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.OverWrite">
            <summary>
            Gets or sets a value indicating whether the inserted text overwrites existing text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.Modified">
            <summary>
            Gets or sets a value indicating whether the control's text content is modified.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.SingleLineMode">
            <summary>
            Gets or sets a value indicating whether the control accepts only one line of the text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.IndentOptions">
            <summary>
            Gets or sets <c>QWhale.Editor.IndentOptions</c> for this class, allowing to customize behaior of Edit control when user presses Enter to insert new text line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.MaxLength">
            <summary>
            Specifies the maximum number of characters that can be entered into the edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.Notification(System.Object,System.EventArgs)">
            <summary>
            Updates control's content according to parameters of notification.
            </summary>
            <param name="sender">The source of the notification.</param>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.BeginUpdate(Stimulsoft.Editor.UpdateReason)">
            <summary>
            Prevents object state updating until calling <c>EndUpdate</c> method.
            </summary>
            <param name="reason">Reason of the source state updating.</param>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.BeginUpdate">
            <summary>
            Prevents object state updating until calling <c>EndUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.EndUpdate">
            <summary>
            Re-enables object state updating, that was turn of by calling <c>BeginUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.AddNotifier(Stimulsoft.Editor.INotifier)">
            <summary>
            Adds new handler to respond for notification.
            </summary>
            <param name="sender">Specifies an object that can respond a notification.</param>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.RemoveNotifier(Stimulsoft.Editor.INotifier)">
            <summary>
            Exclude specified handler from notification handlers list.
            </summary>
            <param name="sender">Specifies an object that can respond a notification.</param>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.Notify">
            <summary>
            Notifies all notifiers about changing source state.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.LinesChanged(System.Int32,System.Int32)">
            <summary>
            Specifies range of lines that was changed.
            </summary>
            <param name="first">First changed line.</param>
            <param name="last">Last changed line.</param>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.LinesChanged(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Specifies range of lines that was changed.
            </summary>
            <param name="first">First changed line.</param>
            <param name="last">Last changed line.</param>
            <param name="modified">Indicates that content of specified lines is modified.</param>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.State">
            <summary>
            Gets or sets last changes to the text stored in the text source.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.FirstChanged">
            <summary>
            Represents index of the first changed line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.LastChanged">
            <summary>
            Represents index of the last changed line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.Undo(Stimulsoft.Editor.UndoData)">
            <summary>
            Performs the single undo operation.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.Undo">
            <summary>
            Performs the last undo operation.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.Redo">
            <summary>
            Performs the last redo operation.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.CanUndo">
            <summary>
            Indicating whether the undo operation can be performed.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.CanRedo">
            <summary>
            Indicating whether the redo operation can be performed.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ClearUndo">
            <summary>
            Clears list of undo operations.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ClearRedo">
            <summary>
            Clears list of redo operations.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.DisableUndo">
            <summary>
            Disables recording of undo/redo operations.
            <seealso cref="!:QWhale.Editor.TextSource.EnableUndo"/>
            </summary>
            <returns>Number of undo/redo operations locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.EnableUndo">
            <summary>
            Re-enables recording of undo/redo operations, that was turn of by calling <c>DisableUndo</c> method.
            <seealso cref="!:QWhale.Editor.TextSource.DisableUndo"/>
            </summary>
            <returns>Number of undo/redo operations locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.BeginUndoUpdate">
            <summary>
            Allows to consider number of undo redo operations as single operation, until calling <c>EndUndoUpdate</c> method.
            </summary>
            <returns>Number of undo updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.EndUndoUpdate">
            <summary>
            Ends undo block, that was started by <c>BeginUndoUpdate</c> method.
            </summary>
            <returns>Number of undo updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ResetUndoLimit">
            <summary>
            Resets the <c>UndoLimit</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ResetUndoOptions">
            <summary>
            Resets the <c>UndoOptions</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.UndoOptions">
            <summary>
            Gets or sets options for undo and redo operations.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.UndoLimit">
            <summary>
            Gets or sets a value that limits number of undo operations.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.UndoUpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUndoUpdate</c> and <c>EndUndoUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.UndoList">
            <summary>
            Provides an indexed access to undo data.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.RedoList">
            <summary>
            Provides an indexed access to redo data.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.IsLineModified(System.Int32,System.Boolean@)">
            <summary>
            Indicates whether specified line already modified.
            </summary>
            <param name="index">Index of line to check.</param>
            <param name="saved">Receives boolean value that indicates whether line was not changed since last saving.</param>
            <returns>True is line modified; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.SaveFile(System.String)">
            <summary>
            Saves text content to the specific file.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.SaveFile(System.String,System.Text.Encoding)">
            <summary>
            Saves text content to the specific file with specific encoding.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.SaveStream(System.IO.TextWriter)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.SaveStream(System.IO.Stream)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.SaveStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.LineTerminator">
            <summary>
            Gets or sets a string value that terminates line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.LoadFile(System.String)">
            <summary>
            Loads the contents of the specified file.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.LoadFile(System.String,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified file with specified encoding.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.LoadStream(System.IO.TextReader)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.LoadStream(System.IO.Stream)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.LoadStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.IsHyperText(System.String)">
            <summary>
            Indicates whether given text represents hypertest.
            </summary>
            <param name="text">Text to test.</param>
            <returns>True if given text represents hypertext; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ResetHighlightUrls">
            <summary>
            Resets <c>HighlightUrls</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.HighlightUrls">
            <summary>
            Gets or sets a value indicating whether hypertext urls in the text should be highlighted.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.UrlTable">
            <summary>
            Represents a table of characters that is valid in url.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.TextSource.CheckHyperText">
            <summary>
            Occurs when a control needs checking whether some string represents hypertext.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.IsWordCorrect(System.String)">
            <summary>
            Checks whether spelling for the given word is correct.
            </summary>
            <param name="text">Specifies text to check-up.</param>
            <returns>True if correct; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.IsWordCorrect(System.String,System.Int32)">
            <summary>
            Checks whether spelling for the given word is correct.
            </summary>
            <param name="text">Specifies text to check-up.</param>
            <param name="colorStyle">Specifies lexical style for misspelled word.</param>
            <returns>True if correct; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ResetCheckSpelling">
            <summary>
            Resets the <c>CheckSpelling</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.CheckSpelling">
            <summary>
            Gets or sets a value indicating whether the document can check spelling for its content.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.TextSource.WordSpell">
            <summary>
            Occurs when spelling of some word within the text needs checking.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.FindClosingBrace(System.Drawing.Point@)">
            <summary>
            Locates closing brace.
            </summary>
            <param name="position">Retrieves position of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.FindClosingBrace(System.Int32@,System.Int32@)">
            <summary>
            Locates closing brace.
            </summary>
            <param name="x">Retrieves X-coordinate of the found brace.</param>
            <param name="y">Retrieves Y-coordinate of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.FindOpenBrace(System.Drawing.Point@)">
            <summary>
            Locates open brace.
            </summary>
            <param name="position">Retrieves position of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.FindOpenBrace(System.Int32@,System.Int32@)">
            <summary>
            Locates open brace.
            </summary>
            <param name="x">Retrieves X-coordinate of the found brace.</param>
            <param name="y">Retrieves Y-coordinate of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.TempHighlightBraces(System.Drawing.Rectangle[])">
            <summary>
            Temporary highlights all text within the area specified by rects.
            <seealso cref="!:QWhale.Editor.TextSource.TempUnhighlightBraces"/>
            </summary>
            <param name="rectangles">Specifies the area to highlight the text.</param>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.TempUnhighlightBraces">
            <summary>
            Cancels text highlighting turned on using <c>TempHighlightBraces</c>
            <seealso cref="!:QWhale.Editor.TextSource.TempHighlightBraces"/>
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ResetOpenBraces">
            <summary>
            Resets the <c>OpenBraces</c> to its default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ResetClosingBraces">
            <summary>
            Resets the <c>ClosingBraces</c> to its default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ResetBracesOptions">
            <summary>
            Resets the <c>BracesOptions</c> to its default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ShouldSerializeOpenBraces">
            <summary>
            Indicates whether the <c>OpenBraces</c> property should be persisted.
            </summary>
            <returns>True if <c>OpenBraces</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ShouldSerializeClosingBraces">
            <summary>
            Indicates whether the <c>ClosingBraces</c> property should be persisted.
            </summary>
            <returns>True if <c>ClosingBraces</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.OpenBraces">
            <summary>
            Gets or sets an array of characters each one representing an open brace.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.ClosingBraces">
            <summary>
            Gets or sets an array of characters each one representing a closing brace.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.BracesOptions">
            <summary>
            Gets or sets options specifying appearance and behaviour of matching braces within Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ProcessAutoComplete(System.String@)">
             <summary>
             Inserts end-of-block code fragment if needed.
             </summary>
             <param name="code">code fragment to be inserted</param>
            <returns>true if end-of-block is inserted; otherwise false</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ShouldSerializeFileName">
            <summary>
            Indicates whether the <c>FileName</c> property should be persisted.
            </summary>
            <returns>True if <c>FileName</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ShouldSerializeText">
            <summary>
            Indicates whether the <c>Text</c> property should be persisted.
            </summary>
            <returns>True if <c>Text</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ShouldSerializeLexer">
            <summary>
            Indicates whether the <c>Lexer</c> property should be persisted.
            </summary>
            <returns>True if <c>Lexer</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ShouldSerializeNavigateOptions">
            <summary>
            Indicates whether the <c>NavigateOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>NavigateOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ShouldSerializeUndoOptions">
            <summary>
            Indicates whether the <c>UndoOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>UndoOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.ShouldSerializeIndentOptions">
            <summary>
            Indicates whether the <c>IndentOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>IndentOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.FormatText">
            <summary>
            Tries to format and outline <c>TextSource</c> text using attached <c>Lexer</c>.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.NeedFormatText">
            <summary>
            Indicates whether <c>TextSource</c> can to format its content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.NeedOutlineText">
            <summary>
            Indicates whether <c>TextSource</c> can outline its content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.NeedReparseText">
            <summary>
            Indicates whether <c>TextSource</c> can perform syntax analysis of its content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.NeedAutoComplete">
            <summary>
            Indicates whether <c>TextSource</c> should try to autocomplete statements.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.NeedReparseTextOnLineChange">
            <summary>
            Indicates whether <c>TextSource</c> should repace text when changing the current line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.NeedCodeCompletion">
            <summary>
            Indicates whether <c>TextSource</c> can provide code completion operation for its content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.NeedSyntaxErrors">
            <summary>
            Indicates whether <c>TextSource</c> can proceed syntax errors in its content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.TextSource.NeedQuickInfoTips">
            <summary>
            Indicates whether <c>TextSource</c> can obtain short description for syntax tokens within its content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.Strings">
            <summary>
            Gets or sets text source content in the form of string array.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.TextSource.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>TextSource</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.WhiteSpace">
            <summary>
            Represents properties of "invisible" characters, such as spaces and tabs, in the control's text content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.WhiteSpace.#ctor">
            <summary>
            Initializes a new instance of the <c>WhiteSpace</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.WhiteSpace.#ctor(Stimulsoft.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>WhiteSpace</c> class with specified owner.
            </summary>
            <param name="owner"><c>ISyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.WhiteSpace.ShouldSerializeSymbolColor">
            <summary>
            Indicates whether the <c>SymbolColor</c> property should be persisted.
            </summary>
            <returns>True if <c>SymbolColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.WhiteSpace.ShouldSerializeTabSymbol">
            <summary>
            Indicates whether the <c>TabSymbol</c> property should be persisted.
            </summary>
            <returns>True if <c>TabSymbol</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.WhiteSpace.ShouldSerializeSpaceSymbol">
            <summary>
            Indicates whether the <c>SpaceSymbol</c> property should be persisted.
            </summary>
            <returns>True if <c>SpaceSymbol</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.WhiteSpace.ShouldSerializeEolSymbol">
            <summary>
            Indicates whether the <c>EolSymbol</c> property should be persisted.
            </summary>
            <returns>True if <c>EolSymbol</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.WhiteSpace.ShouldSerializeEofSymbol">
            <summary>
            Indicates whether the <c>EofSymbol</c> property should be persisted.
            </summary>
            <returns>True if <c>EofSymbol</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.WhiteSpace.ShouldSerializeWordWrapSymbol">
            <summary>
            Indicates whether the <c>WordWrapSymbol</c> property should be persisted.
            </summary>
            <returns>True if <c>WordWrapSymbol</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.WhiteSpace.Assign(Stimulsoft.Editor.IWhiteSpace)">
            <summary>
            Copies the contents from another <c>IWhiteSpace</c> object.
            </summary>
            <param name="source">Specifies <c>IWhiteSpace</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.WhiteSpace.ResetTabSymbol">
            <summary>
            Resets the <c>TabSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.WhiteSpace.ResetSpaceSymbol">
            <summary>
            Resets the <c>SpaceSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.WhiteSpace.ResetEolSymbol">
            <summary>
            Resets the <c>EolSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.WhiteSpace.ResetEofSymbol">
            <summary>
            Resets the <c>EofSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.WhiteSpace.ResetWordWrapSymbol">
            <summary>
            Resets the <c>WordWrapSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.WhiteSpace.ResetSymbolColor">
            <summary>
            Resets the <c>SymbolColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.WhiteSpace.ResetVisible">
            <summary>
            Resets the <c>Visible</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.WhiteSpace.Visible">
            <summary>
            Gets or sets a value indicating whether white space symbols are visible in the contol's text content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.WhiteSpace.TabSymbol">
            <summary>
            Gets or sets character that introduces special symbol to paint instead of the tab character.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.WhiteSpace.SpaceSymbol">
            <summary>
            Gets or sets character that introduces special symbol to paint instead of the space character.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.WhiteSpace.EolSymbol">
            <summary>
            Gets or sets character that specifies end of line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.WhiteSpace.EofSymbol">
            <summary>
            Gets or sets character that specifies end of file.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.WhiteSpace.WordWrapSymbol">
            <summary>
            Gets or sets character that specifies wrapped line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.WhiteSpace.SymbolColor">
            <summary>
            Gets or sets color used to paint special symbols.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.WhiteSpace.SpaceString">
            <summary>
            Represents one character string that introduces special symbol to paint instead of the space character.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.WhiteSpace.TabString">
            <summary>
            Represents one character string that introduces special symbol to paint instead of the tab character.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.WhiteSpace.EolString">
            <summary>
            Represents one character string that specifies end of line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.WhiteSpace.EofString">
            <summary>
            Represents one character string that specifies end of file.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.WhiteSpace.WordWrapString">
            <summary>
            Represents one character string that specifies wrapped file.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.WhiteSpace.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>WhiteSpace</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.XmlTextSourceInfo">
            <summary>
            Contains information about <c>TextSource</c> object's settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlTextSourceInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlTextSourceInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlTextSourceInfo.#ctor(Stimulsoft.Editor.TextSource)">
            <summary>
            Initializes a new instance of the <c>XmlTextSourceInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>TextSource</c> object to store settings.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XmlTextSourceInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlTextSourceInfo.FixupReferences(Stimulsoft.Editor.TextSource)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="P:Stimulsoft.Editor.XmlTextSourceInfo.BracesOptions">
            <summary>
            Stores <c>TextSource.BracesOptions</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlTextSourceInfo.MaxLength">
            <summary>
            Stores <c>TextSource.MaxLength</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlTextSourceInfo.FileName">
            <summary>
            Stores <c>TextSource.FileName</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlTextSourceInfo.Position">
            <summary>
            Stores <c>TextSource.Position</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlTextSourceInfo.BookMarks">
            <summary>
            Stores <c>TextSource.BookMarks</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlTextSourceInfo.LineStyles">
            <summary>
            Stores <c>TextSource.LineStyles</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlTextSourceInfo.OpenBraces">
            <summary>
            Stores <c>TextSource.OpenBraces</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlTextSourceInfo.ClosingBraces">
            <summary>
            Stores <c>TextSource.ClosingBraces</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlTextSourceInfo.NavigateOptions">
            <summary>
            Stores <c>TextSource.NavigateOptions</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlTextSourceInfo.ReadOnly">
            <summary>
            Stores <c>TextSource.ReadOnly</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlTextSourceInfo.OverWrite">
            <summary>
            Stores <c>TextSource.OverWrite</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlTextSourceInfo.IndentOptions">
            <summary>
            Stores <c>TextSource.IndentOptions</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlTextSourceInfo.UndoOptions">
            <summary>
            Stores <c>TextSource.UndoOptions</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlTextSourceInfo.UndoLimit">
            <summary>
            Stores <c>TextSource.UndoLimit</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlTextSourceInfo.HighlightUrls">
            <summary>
            Stores <c>TextSource.HighlightUrls</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlTextSourceInfo.CheckSpelling">
            <summary>
            Stores <c>TextSource.CheckSpelling</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlTextSourceInfo.Lexer">
            <summary>
            Stores <c>TextSource.Lexer</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlTextSourceInfo.SyntaxStrings">
            <summary>
            Stores <c>TextSource.Lines</c> property.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlDisplayStringsInfo">
            <summary>
            Contains information about <c>DisplayStrings</c> object's settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlDisplayStringsInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlDisplayStringsInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlDisplayStringsInfo.#ctor(Stimulsoft.Editor.DisplayStrings)">
            <summary>
            Initializes a new instance of the <c>XmlDisplayStringsInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>DisplayStrings</c> object to store settings </param>
        </member>
        <member name="M:Stimulsoft.Editor.XmlDisplayStringsInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlDisplayStringsInfo.FixupReferences(Stimulsoft.Editor.DisplayStrings)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="P:Stimulsoft.Editor.XmlDisplayStringsInfo.WordWrap">
            <summary>
            Stores <c>DisplayStrings.WordWrap</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlDisplayStringsInfo.WrapAtMargin">
            <summary>
            Stores <c>DisplayStrings.WrapAtMargin</c> property.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlSyntaxStringsInfo">
            <summary>
            Contains information about <c>SyntaxStrings</c> object's settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlSyntaxStringsInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlSyntaxStringsInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlSyntaxStringsInfo.#ctor(Stimulsoft.Editor.SyntaxStrings)">
            <summary>
            Initializes a new instance of the <c>XmlSyntaxStringsInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>SyntaxStrings</c> object to store settings.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XmlSyntaxStringsInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlSyntaxStringsInfo.FixupReferences(Stimulsoft.Editor.SyntaxStrings)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxStringsInfo.TabStops">
            <summary>
            Stores <c>SyntaxStrings.TabStops</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxStringsInfo.UseSpaces">
            <summary>
            Stores <c>SyntaxStrings.UseSpaces</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxStringsInfo.Delimiters">
            <summary>
            Stores <c>SyntaxStrings.DelimiterString</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxStringsInfo.Lines">
            <summary>
            Stores string collection from <c>SyntaxStrings</c> object.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxStringsInfo.LineTerminator">
            <summary>
            Stores <c>SyntaxStrings.LineTerminator</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxStringsInfo.RemoveTrailingSpaces">
            <summary>
            Stores <c>SyntaxStrings.RemoveTrailingSpaces</c> property.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlSelectionInfo">
            <summary>
            Contains information about <c>Selection</c> object's settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlSelectionInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlSelectionInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlSelectionInfo.#ctor(Stimulsoft.Editor.Selection)">
            <summary>
            Initializes a new instance of the <c>XmlSelectionInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>Selection</c> object to store settings.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XmlSelectionInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlSelectionInfo.FixupReferences(Stimulsoft.Editor.Selection)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSelectionInfo.SelectionRect">
            <summary>
            Stores <c>Selection.SelectionRect</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSelectionInfo.SelectionType">
            <summary>
            Stores <c>Selection.SelectionType</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSelectionInfo.Options">
            <summary>
            Stores <c>Selection.Options</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSelectionInfo.ForeColor">
            <summary>
            Stores <c>Selection.ForeColor</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSelectionInfo.BackColor">
            <summary>
            Stores <c>Selection.BackColor</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSelectionInfo.InActiveForeColor">
            <summary>
            Stores <c>Selection.InActiveForeColor</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSelectionInfo.InActiveBackColor">
            <summary>
            Stores <c>Selection.InActiveBackColor</c> property.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlGutterInfo">
            <summary>
            Contains information about <c>Gutter</c> object's settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlGutterInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlGutterInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlGutterInfo.#ctor(Stimulsoft.Editor.Gutter)">
            <summary>
            Initializes a new instance of the <c>XmlGutterInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>Gutter</c> object to store settings.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XmlGutterInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlGutterInfo.FixupReferences(Stimulsoft.Editor.Gutter)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="P:Stimulsoft.Editor.XmlGutterInfo.Width">
            <summary>
            Stores <c>Gutter.Width</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlGutterInfo.BackColor">
            <summary>
            Stores color of the <c>Gutter.Brush</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlGutterInfo.PenColor">
            <summary>
            Stores color of the <c>Gutter.Pen</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlGutterInfo.PenWidth">
            <summary>
            Stores width of the <c>Gutter.Pen</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlGutterInfo.Visible">
            <summary>
            Stores <c>Gutter.Visible</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlGutterInfo.LineNumbersStart">
            <summary>
            Stores <c>Gutter.LineNumbersStart</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlGutterInfo.LineNumbersLeftIndent">
            <summary>
            Stores <c>Gutter.LineNumbersLeftIndent</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlGutterInfo.LineNumbersRightIndent">
            <summary>
            Stores <c>Gutter.LineNumbersRightIndent</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlGutterInfo.LineNumbersForeColor">
            <summary>
            Stores <c>Gutter.LineNumbersForeColor</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlGutterInfo.LineNumbersBackColor">
            <summary>
            Stores <c>Gutter.LineNumbersBackColor</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlGutterInfo.LineNumbersAlignment">
            <summary>
            Stores <c>Gutter.LineNumbersAlignment</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlGutterInfo.Options">
            <summary>
            Stores <c>Gutter.Options</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlGutterInfo.BookMarkImageIndex">
            <summary>
            Stores <c>Gutter.BookMarkImageIndex</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlGutterInfo.WrapImageIndex">
            <summary>
            Stores <c>Gutter.WrapImageIndex</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlGutterInfo.DrawLineBookmarks">
            <summary>
            Stores <c>Gutter.DrawLineBookmarks</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlGutterInfo.ShowBookmarkHints">
            <summary>
            Stores <c>Gutter.ShowBookmarkHints</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlGutterInfo.LineModificatorChangedColor">
            <summary>
            Stores <c>Gutter.LineModificatorChangedColor</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlGutterInfo.LineModificatorSavedColor">
            <summary>
            Stores <c>Gutter.LineModificatorSavedColor</c> property.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlLineSeparatorInfo">
            <summary>
            Contains information about <c>LineSeparator</c> object's settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlLineSeparatorInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlLineSeparatorInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlLineSeparatorInfo.#ctor(Stimulsoft.Editor.LineSeparator)">
            <summary>
            Initializes a new instance of the <c>XmlLineSeparatorInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>LineSeparator</c> object to store settings.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XmlLineSeparatorInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlLineSeparatorInfo.FixupReferences(Stimulsoft.Editor.LineSeparator)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="P:Stimulsoft.Editor.XmlLineSeparatorInfo.Options">
            <summary>
            Stores <c>LineSeparator.Options</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlLineSeparatorInfo.HighlightBackColor">
            <summary>
            Stores <c>LineSeparator.HighlightBackColor</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlLineSeparatorInfo.HighlightForeColor">
            <summary>
            Stores <c>LineSeparator.HighlightForeColor</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlLineSeparatorInfo.LineColor">
            <summary>
            Stores <c>LineSeparator.LineColor</c> property.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlLineStylesInfo">
            <summary>
            Contains information about <c>LineStylesEx</c> object's settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlLineStylesInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlLineStylesInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlLineStylesInfo.#ctor(Stimulsoft.Editor.LineStylesEx)">
            <summary>
            Initializes a new instance of the <c>XmlLineStylesInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>LineStylesEx</c> object to store settings.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XmlLineStylesInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlLineStylesInfo.FixupReferences(Stimulsoft.Editor.LineStylesEx)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="P:Stimulsoft.Editor.XmlLineStylesInfo.Styles">
            <summary>
            Stores <c>LineStyle</c> collection from <c>LineStylesEx</c> object.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlPrintingInfo">
            <summary>
            Contains information about <c>Printing</c> object's settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlPrintingInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlPrintingInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlPrintingInfo.#ctor(Stimulsoft.Editor.Printing)">
            <summary>
            Initializes a new instance of the <c>XmlPrintingInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>Printing</c> object to store settings.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XmlPrintingInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlPrintingInfo.FixupReferences(Stimulsoft.Editor.Printing)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="P:Stimulsoft.Editor.XmlPrintingInfo.Footer">
            <summary>
            Stores <c>Printing.Footer</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlPrintingInfo.Header">
            <summary>
            Stores <c>Printing.Header</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlPrintingInfo.Options">
            <summary>
            Stores <c>Printing.Options</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlPrintingInfo.AllowedOptions">
            <summary>
            Stores <c>Printing.AllowedOptions</c> property.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlWhiteSpaceInfo">
            <summary>
            Contains information about <c>WhiteSpace</c> object's settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlWhiteSpaceInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlWhiteSpaceInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlWhiteSpaceInfo.#ctor(Stimulsoft.Editor.WhiteSpace)">
            <summary>
            Initializes a new instance of the <c>XmlWhiteSpaceInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>WhiteSpace</c> object to store settings.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XmlWhiteSpaceInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlWhiteSpaceInfo.FixupReferences(Stimulsoft.Editor.WhiteSpace)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="P:Stimulsoft.Editor.XmlWhiteSpaceInfo.Visible">
            <summary>
            Stores <c>WhiteSpace.Visible</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlWhiteSpaceInfo.TabSymbol">
            <summary>
            Stores <c>WhiteSpace.TabSymbol</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlWhiteSpaceInfo.SpaceSymbol">
            <summary>
            Stores <c>WhiteSpace.SpaceSymbol</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlWhiteSpaceInfo.EolSymbol">
            <summary>
            Stores <c>WhiteSpace.EolSymbol</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlWhiteSpaceInfo.EofSymbol">
            <summary>
            Stores <c>WhiteSpace.EofSymbol</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlWhiteSpaceInfo.WordWrapSymbol">
            <summary>
            Stores <c>WhiteSpace.WordWrapSymbol</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlWhiteSpaceInfo.SymbolColor">
            <summary>
            Stores <c>WhiteSpace.SymbolColor</c> property.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlEditPagesInfo">
            <summary>
            Contains information about <c>EditPages</c> object's settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlEditPagesInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlEditPagesInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlEditPagesInfo.#ctor(Stimulsoft.Editor.EditPages)">
            <summary>
            Initializes a new instance of the <c>XmlEditPagesInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>EditPages</c> object to store settings.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XmlEditPagesInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlEditPagesInfo.FixupReferences(Stimulsoft.Editor.EditPages)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="P:Stimulsoft.Editor.XmlEditPagesInfo.BackColor">
            <summary>
            Stores <c>EditPages.BackColor</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlEditPagesInfo.BorderColor">
            <summary>
            Stores <c>EditPages.BorderColor</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlEditPagesInfo.DisplayWhiteSpace">
            <summary>
            Stores <c>EditPages.DisplayWhiteSpace</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlEditPagesInfo.PageType">
            <summary>
            Stores <c>EditPages.PageType</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlEditPagesInfo.RulerOptions">
            <summary>
            Stores <c>EditPages.RulerOptions</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlEditPagesInfo.Rulers">
            <summary>
            Stores <c>EditPages.Rulers</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlEditPagesInfo.RulerUnits">
            <summary>
            Stores <c>EditPages.RulerUnits</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlEditPagesInfo.DefaultPage">
            <summary>
            Stores <c>EditPages.DefaultPage</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlEditPagesInfo.ApplyRulerToAllPages">
            <summary>
            Stores <c>EditPages.ApplyRulerToAllPages</c> property.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlEditPageInfo">
            <summary>
            Contains information about <c>EditPage</c> object's settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlEditPageInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlEditPageInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlEditPageInfo.#ctor(Stimulsoft.Editor.EditPage)">
            <summary>
            Initializes a new instance of the <c>XmlEditPageInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>EditPage</c> object to store settings.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XmlEditPageInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlEditPageInfo.FixupReferences(Stimulsoft.Editor.EditPage)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="P:Stimulsoft.Editor.XmlEditPageInfo.Footer">
            <summary>
            Stores <c>EditPage.Footer</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlEditPageInfo.Header">
            <summary>
            Stores <c>EditPage.Header</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlEditPageInfo.HorzOffset">
            <summary>
            Stores <c>EditPage.HorzOffset</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlEditPageInfo.VertOffset">
            <summary>
            Stores <c>EditPage.VertOffset</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlEditPageInfo.Margins">
            <summary>
            Stores <c>EditPage.Margins</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlEditPageInfo.PageSize">
            <summary>
            Stores <c>EditPage.PageSize</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlEditPageInfo.PageKind">
            <summary>
            Stores <c>EditPage.PageKind</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlEditPageInfo.Landscape">
            <summary>
            Stores <c>EditPage.Landscape</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlEditPageInfo.PaintNumber">
            <summary>
            Stores <c>EditPage.PaintNumber</c> property.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlPageHeaderInfo">
            <summary>
            Contains inforamtion aboud <c>PageHeader</c> object's settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlPageHeaderInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlPageHeaderInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlPageHeaderInfo.#ctor(Stimulsoft.Editor.PageHeader)">
            <summary>
            Initializes a new instance of the <c>XmlPageHeaderInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>PageHeader</c> object to store settings.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XmlPageHeaderInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlPageHeaderInfo.FixupReferences(Stimulsoft.Editor.PageHeader)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="P:Stimulsoft.Editor.XmlPageHeaderInfo.LeftText">
            <summary>
            Stores <c>PageHeader.LeftText</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlPageHeaderInfo.RightText">
            <summary>
            Stores <c>PageHeader.RightText</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlPageHeaderInfo.Offset">
            <summary>
            Stores <c>PageHeader.Offset</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlPageHeaderInfo.Visible">
            <summary>
            Stores <c>PageHeader.Visible</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlPageHeaderInfo.ReverseOnEvenPages">
            <summary>
            Stores <c>PageHeader.ReverseOnEvenPages</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlPageHeaderInfo.Font">
            <summary>
            Stores <c>PageHeader.Font</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlPageHeaderInfo.FontName">
            <summary>
            Stores name of the <c>PageHeader.Font</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlPageHeaderInfo.FontSize">
            <summary>
            Stores size of the <c>PageHeader.Font</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlPageHeaderInfo.FontStyle">
            <summary>
            Stores style of the <c>PageHeader.Font</c> property.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlMarginInfo">
            <summary>
            Contains information about <c>Margin</c> object's settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlMarginInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlMarginInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlMarginInfo.#ctor(Stimulsoft.Editor.Margin)">
            <summary>
            Initializes a new instance of the <c>XmlMarginInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>Margin</c> object to store settings.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XmlMarginInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlMarginInfo.FixupReferences(Stimulsoft.Editor.Margin)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="P:Stimulsoft.Editor.XmlMarginInfo.AllowDrag">
            <summary>
            Stores <c>Margin.AllowDrag</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlMarginInfo.ShowHints">
            <summary>
            Stores <c>Margin.ShowHints</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlMarginInfo.ColumnPenColor">
            <summary>
            Stores color of the <c>Margin.ColumnPen</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlMarginInfo.ColumnsVisible">
            <summary>
            Stores <c>Margin.ColumnsVisible</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlMarginInfo.ColumnPositions">
            <summary>
            Stores <c>Margin.ColumnPositions</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlMarginInfo.Position">
            <summary>
            Stores <c>Margin.Position</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlMarginInfo.PenColor">
            <summary>
            Stores color of the <c>Margin.Pen</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlMarginInfo.PenWidth">
            <summary>
            Stores width of the <c>Margin.Pen</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlMarginInfo.Visible">
            <summary>
            Stores <c>Margin.Visible</c> property.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlScrollingInfo">
            <summary>
            Contains information about <c>Scrolling</c> object's settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlScrollingInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlScrollingInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlScrollingInfo.#ctor(Stimulsoft.Editor.Scrolling)">
            <summary>
            Initializes a new instance of the <c>XmlScrollingInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>Scrolling</c> object to store settings.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XmlScrollingInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlScrollingInfo.FixupReferences(Stimulsoft.Editor.Scrolling)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="P:Stimulsoft.Editor.XmlScrollingInfo.WindowOriginX">
            <summary>
            Stores <c>Scrolling.WindowOriginX</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlScrollingInfo.WindowOriginY">
            <summary>
            Stores <c>Scrolling.WindowOriginY</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlScrollingInfo.ScrollBars">
            <summary>
            Stores <c>Scrolling.ScrollBars</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlScrollingInfo.DefaultHorzScrollSize">
            <summary>
            Stores <c>Scrolling.DefaultHorzScrollSize</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlScrollingInfo.Options">
            <summary>
            Stores <c>Scrolling.Options</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlScrollingInfo.HorzButtons">
            <summary>
            Stores <c>Scrolling.HorizontalButtons</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlScrollingInfo.VertButtons">
            <summary>
            Stores <c>Scrolling.VerticalButtons</c> property.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlOutliningInfo">
            <summary>
            Contains information about <c>Outlining</c> object's settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlOutliningInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlOutliningInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlOutliningInfo.#ctor(Stimulsoft.Editor.Outlining)">
            <summary>
            Initializes a new instance of the <c>XmlOutliningInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>Outlining</c> object to store settings.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XmlOutliningInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlOutliningInfo.FixupReferences(Stimulsoft.Editor.Outlining)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="P:Stimulsoft.Editor.XmlOutliningInfo.AllowOutlining">
            <summary>
            Stores <c>Outlining.AllowOutlining</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlOutliningInfo.OutlineOptions">
            <summary>
            Stores <c>Outlining.OutlineOptions</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlOutliningInfo.OutlineColor">
            <summary>
            Stores <c>Outlining.OutlineColor</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlOutliningInfo.Ranges">
            <summary>
            Stores <c>Outlining.Ranges</c> property.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlHyperTextExInfo">
            <summary>
            Contains information about <c>HyperTextEx</c> object's settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlHyperTextExInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlHyperTextExInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlHyperTextExInfo.#ctor(Stimulsoft.Editor.HyperTextEx)">
            <summary>
            Initializes a new instance of the <c>XmlHyperTextExInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>HyperTextEx</c> object to store settings.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XmlHyperTextExInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlHyperTextExInfo.FixupReferences(Stimulsoft.Editor.HyperTextEx)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="P:Stimulsoft.Editor.XmlHyperTextExInfo.UrlStyle">
            <summary>
            Stores <c>HyperTextEx.UrlStyle</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlHyperTextExInfo.UrlColor">
            <summary>
            Stores <c>HyperTextEx.UrlColor</c> property.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlSpellingInfo">
            <summary>
            Contains information about <c>Spelling</c> object's settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlSpellingInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlSpellingInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlSpellingInfo.#ctor(Stimulsoft.Editor.Spelling)">
            <summary>
            Initializes a new instance of the <c>XmlSpellingInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>Spelling</c> object to store settings.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XmlSpellingInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlSpellingInfo.FixupReferences(Stimulsoft.Editor.Spelling)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSpellingInfo.SpellColor">
            <summary>
            Stores <c>Spelling.SpellColor</c> property.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlSyntaxEditInfo">
            <summary>
            Contains information about <c>SyntaxEdit</c> object's settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlSyntaxEditInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlSyntaxEditInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlSyntaxEditInfo.#ctor(Stimulsoft.Editor.SyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>XmlSyntaxEditInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>SyntaxEdit</c> object to store settings.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XmlSyntaxEditInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlSyntaxEditInfo.FixupReferences(Stimulsoft.Editor.SyntaxEdit)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.SearchOptions">
            <summary>
            Stores <c>SyntaxEdit.SearchOptions</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.CodeCompletionChars">
            <summary>
            Stores <c>SyntaxEdit.CodeCompletionChars</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.AutoCorrection">
            <summary>
            Stores <c>SyntaxEdit.AutoCorrection</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.ReadonlyBackColor">
            <summary>
            Stores <c>SyntaxEdit.ReadonlyBackColor</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.DisabledForeColor">
            <summary>
            Stores <c>SyntaxEdit.DisabledForeColor</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.DisabledBackColor">
            <summary>
            Stores <c>SyntaxEdit.DisabledBackColor</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.Pages">
            <summary>
            Stores <c>SyntaxEdit.Pages</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.Transparent">
            <summary>
            Stores <c>SyntaxEdit.Transparent</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.HideCaret">
            <summary>
            Stores <c>SyntaxEdit.HideCaret</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.DisableColorPaint">
            <summary>
            Stores <c>SyntaxEdit.DisableColorPaint</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.DisableSyntaxPaint">
            <summary>
            Stores <c>SyntaxEdit.DisableSyntaxPaint</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.AcceptTabs">
            <summary>
            Stores <c>SyntaxEdit.AcceptTabs</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.AcceptReturns">
            <summary>
            Stores <c>SyntaxEdit.AcceptReturns</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.DisplayStrings">
            <summary>
            Stores <c>SyntaxEdit.DisplayLines</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.Selection">
            <summary>
            Stores <c>SyntaxEdit.Selection</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.Gutter">
            <summary>
            Stores <c>SyntaxEdit.Gutter</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.Margin">
            <summary>
            Stores <c>SyntaxEdit.Margin</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.LineStyles">
            <summary>
            Stores <c>SyntaxEdit.LineStyles</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.LineSeparator">
            <summary>
            Stores <c>SyntaxEdit.LineSeparator</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.Printing">
            <summary>
            Stores <c>SyntaxEdit.Printing</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.WhiteSpace">
            <summary>
            Stores <c>SyntaxEdit.WhiteSpace</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.TextSource">
            <summary>
            Stores <c>SyntaxEdit.Source</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.Scrolling">
            <summary>
            Stores <c>SyntaxEdit.Scrolling</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.Outlining">
            <summary>
            Stores <c>SyntaxEdit.Outlining</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.HyperText">
            <summary>
            Stores <c>SyntaxEdit.HyperText</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.Spelling">
            <summary>
            Stores <c>SyntaxEdit.Spelling</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.Braces">
            <summary>
            Stores <c>SyntaxEdit.Braces</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.DrawColumnsIndent">
            <summary>
            Stores <c>SyntaxEdit.DrawColumnsIndent</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.UseDefaultMenu">
            <summary>
            Stores <c>SyntaxEdit.UseDefaultMenu</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.ContextMenuStrip">
            <summary>
            Stores <c>SyntaxEdit.ContextMenu</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.BorderStyle">
            <summary>
            Stores <c>SyntaxEdit.BorderStyle</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxEditInfo.ColumnsIndentForeColor">
            <summary>
            Stores color of the <c>SyntaxEdit.ColumnsIndentForeColor</c> property.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlSyntaxSettingsInfo">
            <summary>
            Contains information about <c>SyntaxSettings</c> object's settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlSyntaxSettingsInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlSyntaxSettingsInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlSyntaxSettingsInfo.#ctor(Stimulsoft.Editor.SyntaxSettings)">
            <summary>
            Initializes a new instance of the <c>XmlSyntaxSettingsInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>SyntaxSettings</c> object to store settings.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XmlSyntaxSettingsInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlSyntaxSettingsInfo.FixupReferences(Stimulsoft.Editor.SyntaxSettings)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxSettingsInfo.Font">
            <summary>
            Stores <c>SyntaxSettings.Font</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxSettingsInfo.FontName">
            <summary>
            Stores name of the <c>SyntaxSettings.Font</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxSettingsInfo.FontSize">
            <summary>
            Stores size of the <c>SyntaxSettings.Font</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxSettingsInfo.FontStyle">
            <summary>
            Stores style of the <c>SyntaxSettings.Font</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxSettingsInfo.NavOptions">
            <summary>
            Stores <c>SyntaxSettings.NavigateOptions</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxSettingsInfo.ScrollBars">
            <summary>
            Stores <c>SyntaxSettings.ScrollBars</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxSettingsInfo.SelOptions">
            <summary>
            Stores <c>SyntaxSettings.SelectionOptions</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxSettingsInfo.GutterOptions">
            <summary>
            Stores <c>SyntaxSettings.GutterOptions</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxSettingsInfo.OutlineOptions">
            <summary>
            Stores <c>SyntaxSettings.OutlineOptions</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxSettingsInfo.ShowGutter">
            <summary>
            Stores <c>SyntaxSettings.ShowGutter</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxSettingsInfo.ShowMargin">
            <summary>
            Stores <c>SyntaxSettings.ShowMargin</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxSettingsInfo.HighlightUrls">
            <summary>
            Stores <c>SyntaxSettings.HighlightUrls</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxSettingsInfo.AllowOutlining">
            <summary>
            Stores <c>SyntaxSettings.AllowOutlining</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxSettingsInfo.UseSpaces">
            <summary>
            Stores <c>SyntaxSettings.UseSpaces</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxSettingsInfo.WordWrap">
            <summary>
            Stores <c>SyntaxSettings.WordWrap</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxSettingsInfo.GutterWidth">
            <summary>
            Stores <c>SyntaxSettings.GutterWidth</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxSettingsInfo.MarginPos">
            <summary>
            Stores <c>SyntaxSettings.MarginPos</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxSettingsInfo.TabStops">
            <summary>
            Stores <c>SyntaxSettings.TabStops</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxSettingsInfo.LexStyles">
            <summary>
            Stores <c>SyntaxSettings.LexStyles</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxSettingsInfo.ColorThemes">
            <summary>
            Stores <c>SyntaxSettings.ColorThemes</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxSettingsInfo.ActiveThemeIndex">
            <summary>
            Stores <c>SyntaxSettings.GutterWidth</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxSettingsInfo.EventNames">
            <summary>
            Stores <c>EventHandlers</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSyntaxSettingsInfo.EventData">
            <summary>
            Stores <c>EventHandlers</c> property.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlSearchSettingsInfo">
            <summary>
            Contains information about <c>SearchSettings</c> object's settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlSearchSettingsInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlSearchSettingsInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlSearchSettingsInfo.#ctor(Stimulsoft.Editor.SearchSettings)">
            <summary>
            Initializes a new instance of the <c>XmlSearchSettingsInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>SearchSettings</c> object to store settings.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XmlSearchSettingsInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlSearchSettingsInfo.FixupReferences(Stimulsoft.Editor.SearchSettings)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSearchSettingsInfo.SearchList">
            <summary>
            Stores <c>SearchSettings.SearchList</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSearchSettingsInfo.ReplaceList">
            <summary>
            Stores <c>SearchSettings.ReplaceList</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlSearchSettingsInfo.SearchOptions">
            <summary>
            Stores <c>SearchSettings.SearchOptions</c> property.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlBracesInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlBracesInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlBracesInfo.#ctor(Stimulsoft.Editor.Braces)">
            <summary>
            Initializes a new instance of the <c>XmlBracesInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>Gutter</c> object to store settings.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XmlBracesInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlBracesInfo.FixupReferences(Stimulsoft.Editor.Braces)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="P:Stimulsoft.Editor.XmlBracesInfo.OpenBraces">
            <summary>
            Stores <c>Braces.OpenBraces</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlBracesInfo.ClosingBraces">
            <summary>
            Stores <c>Braces.ClosingBraces</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlBracesInfo.BracesOptions">
            <summary>
            Stores <c>Braces.BracesOptions</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlBracesInfo.ForeColor">
            <summary>
            Stores <c>Braces.ForeColor</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlBracesInfo.BackColor">
            <summary>
            Stores <c>Braces.BackColor</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlBracesInfo.Style">
            <summary>
            Stores style of the <c>Braces.Style</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlBracesInfo.UseRoundRect">
            <summary>
            Stores style of the <c>Braces.UseRoundRect</c> property.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.CsParser">
            <summary>
            Represents class that and perform syntax and lexical analysis of specified C# code text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CsParser.CreateRepository">
            <summary>
            Creates <c>ICodeCompletionRepository</c> to perform code completion functionality for this parser.
            </summary>
            <returns><c>ICodeCompletionRepository</c> that is created.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CsParser.GetSingleLineComment">
            <summary>
            Gets the string that represents start symbol of single line comment.
            </summary>
            <returns>Single line comment string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CsParser.GetCompletionType(Stimulsoft.Editor.CodeCompletionArgs)">
            <summary>
            Obtains type of code completion window from specifies <c>CodeCompletionArgs</c> parameter.
            </summary>
            <param name="e">Contains data of code completion window.</param>
            <returns><c>CodeCompletionType</c> data of window to popup.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CsParser.ResetCodeCompletionChars">
            <summary>
            Resets the <c>CodeCompletionChars</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CsParser.ResetCodeCompletionStopChars">
            <summary>
            Resets the <c>CodeCompletionStopChars</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CsParser.ResetAutoIndentChars">
            <summary>
            Resets the <c>AutoIndentChars</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CsParser.ResetSmartFormatChars">
            <summary>
            Resets the <c>SmartFormatChars</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CsParser.ShouldSerializeCodeCompletionChars">
            <summary>
            Indicates whether the <c>CodeCompletionChars</c> property should be persisted.
            </summary>
            <returns>True if <c>CodeCompletionChars</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CsParser.ShouldSerializeCodeCompletionStopChars">
            <summary>
            Indicates whether the <c>CodeCompletionStopChars</c> property should be persisted.
            </summary>
            <returns>True if <c>CodeCompletionStopChars</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CsParser.ShouldSerializeSmartFormatChars">
            <summary>
            Indicates whether the <c>SmartFormatChars</c> property should be persisted.
            </summary>
            <returns>True if <c>SmartFormatChars</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CsParser.ShouldSerializeAutoIndentChars">
            <summary>
            Indicates whether the <c>AutoIndentChars</c> property should be persisted.
            </summary>
            <returns>True if <c>AutoIndentChars</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.CsLexerToken">
            <summary>
            Represents lexical tokens for C# parser.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.NetNamespace">
            <summary>
            Represents a .NET namespace.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.NetNamespace.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>NetNamespace</c> with specified parameters.
            </summary>
            <param name="nspace">Specifies namespace name.</param>
            <param name="system">Specifies namespace System property.</param>
            <param name="alias">Specifies namespace alias.</param>
        </member>
        <member name="M:Stimulsoft.Editor.NetNamespace.GetName">
            <summary>
            Gets name or alias of the namespace.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.NetNamespace.Namespace">
            <summary>
            Gets or sets name of the namespace.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.NetNamespace.Alias">
            <summary>
            Gets or sets alias of the namespace.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.NetNamespace.System">
            <summary>
            Reserwed for internal use.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.NETRepository">
            <summary>
            Represents properties and methods to perform code completion functionality intended to use for .NET family of languages. 
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.#ctor(System.Boolean,Stimulsoft.Editor.ISyntaxTree)">
            <summary>
            Initializes a new instance of the <c>NETRepository</c> class with specified parameters.
            </summary>
            <param name="caseSensitive">Specifies CaseSensitive property of this new instance.</param>
            <param name="syntaxTree">Specifies SyntaxTree property of this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.IsBlockNode(Stimulsoft.Editor.ISyntaxNode)">
            <summary>
            Indicates whether specified node is a block node (contains block statement).
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> to check-up.</param>
            <returns>True if specified node is block node; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.IsMethodNode(Stimulsoft.Editor.ISyntaxNode)">
            <summary>
            Indicates whether specified node is a method node (contains declaration of some method, constructon, destructor and so on).
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> to check-up.</param>
            <returns>True if specified node is method node; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.IsDeclarationNode(Stimulsoft.Editor.ISyntaxNode)">
            <summary>
            Indicates whether specified node is a declaration node (contains declaration of some syntax structure, such as class, namespace and so on).
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> to check-up.</param>
            <returns>True if specified node is declaration node; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.IsXmlCommentNode(Stimulsoft.Editor.ISyntaxNode)">
            <summary>
            Indicates whether specified node is a xml comment node (contains xml comment).
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> to check-up.</param>
            <returns>True if specified node is xml comment node; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.IsInvocationNode(Stimulsoft.Editor.ISyntaxNode)">
            <summary>
            Indicates whether specified node is a invocation node (contains call of some method or function).
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> to check-up.</param>
            <returns>True if specified node is invocation node; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.GetInvocationNode(System.String,Stimulsoft.Editor.ISyntaxNode,System.Drawing.Point,System.Int32@,System.Int32@)">
            <summary>
            Retrieves invocation node at specified position.
            </summary>
            <param name="node">Specifies node that contains invocation node.</param>
            <param name="position">Specifies position to check-up.</param>
            <param name="paramIndex">Retrieves index of current parameter in the parameter list of invocation node.</param>
            <param name="paramCount">Retrieves number of the parameters of invocation node.</param>
            <returns><c>ISyntaxNode</c> node representing method invocation.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.GetXmlCommentNode(Stimulsoft.Editor.ISyntaxNode)">
            <summary>
            Retrieves xml comment node nearest to the specified node.
            </summary>
            <param name="node">Specifies node to check-up.</param>
            <returns><c>ISyntaxNode</c> node representing xml comment.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.GetDeclarationNode(Stimulsoft.Editor.ISyntaxNode)">
            <summary>
            Retrieves declaration node nearest to the specified node.
            </summary>
            <param name="node">Specifies node to check-up.</param>
            <returns><c>ISyntaxNode</c> node representing some declaration.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.GetMethodNode(Stimulsoft.Editor.ISyntaxNode)">
            <summary>
            Retrieves method node nearest to the specified node.
            </summary>
            <param name="node">Specifies node to check-up.</param>
            <returns><c>ISyntaxNode</c> node representing some method.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.GetBlockOrMethodNode(Stimulsoft.Editor.ISyntaxNode)">
            <summary>
            Retrieves block or method node nearest to specified node.
            </summary>
            <param name="node">Specifies node to check-up.</param>
            <returns><c>ISyntaxNode</c> node representing block or method.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.GetBlockNode(Stimulsoft.Editor.ISyntaxNode)">
            <summary>
            Retrieves block node nearest to specified node.
            </summary>
            <param name="node">Specifies node to check-up.</param>
            <returns><c>ISyntaxNode</c> node representing block statement.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.GetDescription(Stimulsoft.Editor.IListMembers,Stimulsoft.Editor.ISyntaxNode,System.Object,System.String,System.Boolean)">
            <summary>
            Obtains description of some language element.
            </summary>
            <param name="members">Specifies ListMembers interface used to get language-specific description.</param>
            <param name="node">Specifies <c>ISyntaxNode</c> that representing language element to describe.</param>
            <param name="member">Specifies language element to describe.</param>
            <param name="name">Specifies name of described language element.</param>
            <param name="fullDescription">Specifies whether description should include name and type of the found element.</param>
            <returns>String that describes specified language element.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.GetNodeType(System.String,Stimulsoft.Editor.ISyntaxNode,System.Drawing.Point)">
            <summary>
            Obtains information type of the <c>SyntaxNode</c>
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> representing a current language element.</param>
            <param name="text">Specifies source text.</param>
            <param name="position">Specifies starting position to search</param>
            <returns>Object represening type of found member.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.GetMemberType(System.String,Stimulsoft.Editor.ISyntaxNode,System.String@,System.Drawing.Point@,System.Drawing.Point@,Stimulsoft.Editor.StaticScope@)">
            <summary>
            Obtains information about some language element to perform code completion related operations.
            </summary>
            <param name="text">Specifies source text.</param>
            <param name="node">Specifies <c>ISyntaxNode</c> representing current language element.</param>
            <param name="name">Retrieves name of found language element.</param>
            <param name="position">Specifies position of found language element in the code text and updates it if needed.</param>
            <param name="scope">Retrieves information about search constraints for the language element.</param>
            <returns>Object representing information about language element to complete.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.GetSpecialMemberType(System.String,Stimulsoft.Editor.ISyntaxNode,System.String@,System.Drawing.Point@,System.Drawing.Point@,Stimulsoft.Editor.StaticScope@)">
            <summary>
            Obtains information about a member of some language element in special cases.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> representing a current language element.</param>
            <param name="position">Specifies position of language element.</param>
            <param name="member">Specifies language element.</param>
            <param name="name">Specifies name of the member to locate.</param>
            <param name="scope">Retrieves information about search constraints for this language element.</param>
            <returns>Object represening information about found member.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.GetMemberType(Stimulsoft.Editor.ISyntaxNode,System.Drawing.Point,System.Object,System.String,Stimulsoft.Editor.StaticScope@)">
            <summary>
            Obtains information about a member of some language element.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> representing a current language element.</param>
            <param name="position">Specifies position of language element.</param>
            <param name="member">Specifies language element.</param>
            <param name="name">Specifies name of the member to locate.</param>
            <param name="scope">Retrieves information about search constraints for this language element.</param>
            <returns>Object represening information about found member.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.GetRegisteredObject(System.String)">
            <summary>
            Retrieves registered object by its name.
            </summary>
            <param name="name">Specifies name of the object.</param>
            <returns>Registered object found by its name.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.GetMethodType(System.String,Stimulsoft.Editor.ISyntaxNode,System.String@,System.Drawing.Point@,System.Drawing.Point@,System.Int32@,System.Int32@,Stimulsoft.Editor.StaticScope@)">
            <summary>
            Obtains information about some method of specified language element.
            </summary>
            <param name="text">Specifies source text.</param>
            <param name="node">Specifies <c>ISyntaxNode</c> represening current language element.</param>
            <param name="name">Retrieves name of found method.</param>
            <param name="position">Retrieves start positon of the method in the code text.</param>
            <param name="endPos">Retrieves end position of the method in the code text.</param>
            <param name="paramIndex">Retrieves index of current parameter in the code text.</param>
            <param name="paramCount">Retrieves number of the parameters.</param>
            <param name="scope">Retrieves information about search constraints for the language element.</param>
            <returns>Object representing information about found method.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.FillMember(Stimulsoft.Editor.IListMembers,System.Object,System.String,Stimulsoft.Editor.StaticScope)">
            <summary>
            Obtains information about individual member of specified language element.
            </summary>
            <param name="members">Specifies provider to fill with available members.</param>
            <param name="member">Specifies language element.</param>
            <param name="name">Specifies name of member to retrieve.</param>
            <param name="scope">Specifies search constraints.</param>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.FillMember(Stimulsoft.Editor.IListMembers,System.Object,System.String,System.Int32,Stimulsoft.Editor.StaticScope)">
            <summary>
            Obtains information about individual member of specified language element.
            </summary>
            <param name="members">Specifies provider to fill with available members.</param>
            <param name="member">Specifies language element.</param>
            <param name="name">Specifies name of member to retrieve.</param>
            <param name="paramIndex">Specifies index of current member parameter.</param>
            <param name="scope">Specifies search constraints.</param>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.FindReferences(Stimulsoft.Editor.ISyntaxNode,Stimulsoft.Editor.ISyntaxNodes)">
            <summary>
            Locates all references to the node in the text.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> to find references.</param>
            <param name="references">Retrieves references to node.</param>
            <returns>Number of found references.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.GetCodeSnippets(System.String)">
            <summary>
            Returns code snippets for the given language.
            </summary>
            <param name="language">Represents a language</param>
            <returns>ICodeCompletionProvider instance for a given language.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.RegisterNamespace(System.String)">
            <summary>
            Adds specified namespace to the namespace list.
            </summary>
            <param name="nspace">Specifies name of namespace to add.</param>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.UnregisterNamespace(System.String)">
            <summary>
            Removes specified namespace from the namespace list.
            </summary>
            <param name="nspace">Specifies name of namespace to remove.</param>
            <returns>True if succeed (namespace is present in the namespace list); otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.RegisterObject(System.String,System.Object)">
            <summary>
            Adds specified object for code completion to the object list.
            </summary>
            <param name="name">Specifies name of the object.</param>
            <param name="obj">Specifies object to register.</param>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.UnregisterObject(System.String)">
            <summary>
            Removes specified object from the object list.
            </summary>
            <param name="name">Specifies name of object to remove.</param>
            <returns>True if succeed (object is present in the object list); otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.ClearNamespaces">
            <summary>
            Clears namespace list.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.NETRepository.ClearObjects">
            <summary>
            Clears object list.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.NETRepository.Namespaces">
            <summary>
            Represents namespace list.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.NETRepository.Objects">
            <summary>
            Represents object list in a form of key-value pairs.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.NetTypes">
            <summary>
            Contains collection of build-in types. Reserwed for internal use.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ReflectionRepository">
            <summary>
            Represents properties and methods to perform code completion functionality using reflection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ReflectionRepository.#ctor(System.Boolean,Stimulsoft.Editor.ISyntaxTree)">
            <summary>
            Initializes a new instance of the <c>ReflectionRepository</c> class with specified parameters.
            </summary>
            <param name="caseSensitive">Specifies CaseSensitive property of this new instance.</param>
            <param name="syntaxTree">Specifies SyntaxTree property of this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ReflectionRepository.GetMemberType(Stimulsoft.Editor.ISyntaxNode,System.Drawing.Point,System.Object,System.String,Stimulsoft.Editor.StaticScope@)">
            <summary>
            Obtains information about a member of some language element.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> representing a current language element.</param>
            <param name="position">Specifies position of language element.</param>
            <param name="member">Specifies language element.</param>
            <param name="name">Specifies name of the member to locate.</param>
            <param name="scope">Retrieves information about search constraints for this language element.</param>
            <returns>Object represening information about found member.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ReflectionRepository.FillMember(Stimulsoft.Editor.IListMembers,System.Object,System.String,Stimulsoft.Editor.StaticScope)">
            <summary>
            Obtains information about individual member of specified language element.
            </summary>
            <param name="members">Specifies provider to fill with available members.</param>
            <param name="member">Specifies language element.</param>
            <param name="name">Specifies name of member to retrieve.</param>
            <param name="scope">Specifies search constraints.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ReflectionRepository.GetDescription(Stimulsoft.Editor.IListMembers,Stimulsoft.Editor.ISyntaxNode,System.Object,System.String,System.Boolean)">
            <summary>
            Obtains description of some language element.
            </summary>
            <param name="members">Specifies ListMembers interface used to get language-specific description.</param>
            <param name="node">Specifies <c>ISyntaxNode</c> that representing language element to describe.</param>
            <param name="member">Specifies language element to describe.</param>
            <param name="name">Specifies name of described language element.</param>
            <param name="fullDescription">Specifies whether description should include name and type of the found element.</param>
            <returns>String that describes specified language element.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ReflectionRepository.GetRegisteredType(System.String)">
            <summary>
            Retrieves registered type by its name.
            </summary>
            <param name="name">Specifies name of the type.</param>
            <returns>Registered type found by its name.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ReflectionRepository.GetTypeByName(System.String)">
            <summary>
            Retrieves type by its name.
            </summary>
            <param name="type">Specifies name of type.</param>
            <returns>the found type.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ReflectionRepository.RegisterType(System.String,System.Type)">
            <summary>
            Adds specified type for code completion to the type list.
            </summary>
            <param name="name">Specifies name of the type.</param>
            <param name="type">Specifies type to register.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ReflectionRepository.RegisterType(System.String,System.Type,System.Boolean)">
            <summary>
            Adds specified type for code completion to the type list.
            </summary>
            <param name="name">Specifies name of the type.</param>
            <param name="type">Specifies type to register.</param>
            <param name="global">Specifies whether the type is global.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ReflectionRepository.UnregisterType(System.String)">
            <summary>
            Removes specified type from the type list.
            </summary>
            <param name="name">Specifies name of type to remove.</param>
            <returns>True if succeed (type is present in the type list); otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ReflectionRepository.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Adds specified assembly for code completion to the assembly list.
            </summary>
            <param name="assembly">Specifies registered assembly.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ReflectionRepository.UnregisterAssembly(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Removes specified assembly from the assembly list.
            </summary>
            <param name="assembly">Specifies  assembly to remove.</param>
            <param name="removeReferences">Indicates whether all types from the specified assembly should be unregistered.</param>
            <returns>True if succeed (assembly is present in the assembly list); otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ReflectionRepository.RegisterAssembly(System.String)">
            <summary>
            Adds specified assembly for code completion to the assembly list.
            </summary>
            <param name="name">Specifies name of the assembly.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ReflectionRepository.UnregisterAssembly(System.String,System.Boolean)">
            <summary>
            Removes specified assembly from the assembly list.
            </summary>
            <param name="name">Specifies name of assembly to remove.</param>
            <param name="removeReferences">Indicates whether all types from the specified assembly should be unregistered.</param>
            <returns>True if succeed (assembly is present in the assembly list); otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ReflectionRepository.RegisterAllAssemblies">
            <summary>
            Registers all assemlies from the current application domain.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ReflectionRepository.RegisterDefaultAssemblies">
            <summary>
            Registers some most frequently used assemblies.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ReflectionRepository.ClearAssemblies">
            <summary>
            Clears assembly list.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ReflectionRepository.ClearTypes">
            <summary>
            Clears type list.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ReflectionRepository.RestrictTypeMembers(System.Type)">
            <summary>
            Disables type members from being shown in code completion windows.
            </summary>
            <param name="type">Specifies type which members will be disabled</param>
        </member>
        <member name="M:Stimulsoft.Editor.ReflectionRepository.AllowTypeMembers(System.Type)">
            <summary>
            Re-enables type members from being shown in code completion windows.
            </summary>
            <param name="type">Specifies type which members will be re-enabled</param>
        </member>
        <member name="P:Stimulsoft.Editor.ReflectionRepository.Types">
            <summary>
            Represents type list in a form of key-value pairs.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ReflectionRepository.Assemblies">
            <summary>
            Represents assembly list.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.NetSyntaxParser">
            <summary>
            Represents properties and methods to perform syntax analysis of the text intended to use for NET. family of languages.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.#ctor">
            <summary>
            Initializes a new instance of the <c>NetSyntaxParser</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.CreateRepository">
            <summary>
            Initializes a new instance of the <c>ReflectionRepository</c> class with default settings.
            </summary>
            <returns><c>ICodeCompletionRepository</c> that represents this new instance.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.GetCompletionType(Stimulsoft.Editor.CodeCompletionArgs)">
            <summary>
            Obtains type of code completion window from specifies <c>CodeCompletionArgs</c> parameter.
            </summary>
            <param name="e">Contains data of code completion window.</param>
            <returns><c>CodeCompletionType</c> data of window to popup.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.RegisterNamespace(System.String)">
            <summary>
            Adds specified namespace to the repository's namespace list.
            </summary>
            <param name="nspace">Specifies name of namespace to add.</param>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.UnregisterNamespace(System.String)">
            <summary>
            Removes specified namespace from the repository's namespace list.
            </summary>
            <param name="nspace">Specifies name of namespace to remove.</param>
            <returns>True if succeed (namespace is present in the namespace list); otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.RegisterObject(System.String,System.Object)">
            <summary>
            Adds specified object for code completion to the repository's object list.
            </summary>
            <param name="name">Specifies name of the object.</param>
            <param name="obj">Specifies object to register.</param>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.UnregisterObject(System.String)">
            <summary>
            Removes specified object from the repository's object list.
            </summary>
            <param name="name">Specifies name of object to remove.</param>
            <returns>True if succeed (object is present in the object list); otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.RegisterType(System.String,System.Type)">
            <summary>
            Adds specified type for code completion to the repository's type list.
            </summary>
            <param name="name">Specifies name of the type.</param>
            <param name="type">Specifies type to register.</param>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.RegisterType(System.String,System.Type,System.Boolean)">
            <summary>
            Adds specified type for code completion to the repository's type list.
            </summary>
            <param name="name">Specifies name of the type.</param>
            <param name="type">Specifies type to register.</param>
            <param name="global">Specifies whether the type is global</param>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.UnregisterType(System.String)">
            <summary>
            Removes specified type from the repository's type list.
            </summary>
            <param name="name">Specifies name of type to remove.</param>
            <returns>True if succeed (type is present in the type list); otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Adds specified assembly for code completion to the repository's assembly list.
            </summary>
            <param name="assembly">Specifies registered assembly.</param>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.RegisterAssembly(System.String)">
            <summary>
            Adds specified assembly for code completion to the repository's assembly list.
            </summary>
            <param name="name">Specifies name of the assembly.</param>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.UnregisterAssembly(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Removes specified assembly from the repository's assembly list.
            </summary>
            <param name="assembly">Specifies  assembly to remove.</param>
            <param name="removeReferences">Indicates whether all types from the specified assembly should be unregistered.</param>
            <returns>True if succeed (assembly is present in the assembly list); otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.UnregisterAssembly(System.String,System.Boolean)">
            <summary>
            Removes specified assembly from the repository's assembly list.
            </summary>
            <param name="name">Specifies name of assembly to remove.</param>
            <param name="removeReferences">Indicates whether all types from the specified assembly should be unregistered.</param>
            <returns>True if succeed (assembly is present in the assembly list); otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.RegisterAllAssemblies">
            <summary>
            Registers all assemlies from the current application domain.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.RegisterDefaultAssemblies">
            <summary>
            Registers some most frequently used assemblies.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.GetBlock(System.Drawing.Point,System.Drawing.Point@)">
            <summary>
            Obtains block node at specified position.
            </summary>
            <param name="position">Position to check-up.</param>
            <param name="blockPt">Retrieves position of block node.</param>
            <returns><c>ISyntaxNode</c> node representing block statement.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.IsDeclaration(Stimulsoft.Editor.ISyntaxNode)">
            <summary>
            Indicates whether specified node is a declaration node (contains declaration of some syntax structure, such as class, namespace and so on).
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> to check-up.</param>
            <returns>True if specified node is declaration node; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.IsContentDivider(System.Int32)">
            <summary>
            Gets boolean value indicating whether text content is divided at given line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.SaveState">
            <summary>
            Saves current <c>Parser</c> state and position.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.RestoreState(System.Boolean)">
            <summary>
            Restores <c>Parser</c> state and position stored by <c>SaveState</c> method.
            </summary>
            <param name="restore">Indicates whether <c>Parser</c> should restore it's state to previous position or simply delete information about previously stored state.</param>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.Reset">
            <summary>
            Resets <c>NetSyntaxParser</c> to the start position.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.ReparseText">
            <summary>
            Reparses entire text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.ReparseBlock(System.Drawing.Point)">
            <summary>
            Reparsers syntax block at specified position.
            </summary>
            <param name="position">Specifies position to find syntax block.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.ResetOptions">
            <summary>
            Resets <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.ResetCodeCompletionChars">
            <summary>
            Resets <c>CodeCompletionChars</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.ResetCodeCompletionStopChars">
            <summary>
            Resets <c>CodeCompletionStopChars</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.ResetAutoIndentChars">
            <summary>
            Resets <c>AutoIndentChars</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.ShouldSerializeCodeCompletionChars">
            <summary>
            Indicates whether the <c>CodeCompletionChars</c> property should be persisted.
            </summary>
            <returns>True if <c>CodeCompletionChars</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.ShouldSerializeCodeCompletionStopChars">
            <summary>
            Indicates whether the <c>CodeCompletionStopChars</c> property should be persisted.
            </summary>
            <returns>True if <c>CodeCompletionStopChars</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.NetSyntaxParser.ShouldSerializeAutoIndentChars">
            <summary>
            Indicates whether the <c>AutoIndentChars</c> property should be persisted.
            </summary>
            <returns>True if <c>AutoIndentChars</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.NetSyntaxParser.CaseSensitive">
            <summary>
            Gets or sets a boolean value that indicates whether <c>NetSyntaxParser</c> should perform case-sensitive analysis of its content.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.CsListMember">
            <summary>
            Implements properties and methods for a particular list member in the data collection of the code completion popups used to describe C# language code.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CsListMember.#ctor">
            <summary>
            Initializes a new instance of the <c>CsListMember</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CsListMember.#ctor(Stimulsoft.Editor.IListMembers)">
            <summary>
            Initializes a new instance of the <c>CsListMember</c> class with specified owner.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CsListMember.GetOwnDescription">
            <summary>
            Return member's description.
            </summary>
            <returns>String value that describes the member.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CsListMember.GetParamText(System.Boolean)">
            <summary>
            Converts <c>Parameters</c> property to a single string.
            </summary>
            <param name="useFormatting">Specifies whether to use html formatting tags</param>
            <returns>Returns <c>Parameters</c> in the form of comma separated text, framed by parens.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.VbListMember">
            <summary>
            Implements properties and methods for a particular list member in the data collection of the code completion popups used to describe Visual Basic language code.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.VbListMember.#ctor">
            <summary>
            Initializes a new instance of the <c>VbListMember</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.VbListMember.#ctor(Stimulsoft.Editor.IListMembers)">
            <summary>
            Initializes a new instance of the <c>VbListMember</c> class with specified owner.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.VbListMember.UpdateParamText">
            <summary>
            Updates Parameter text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.VbListMember.GetOwnDescription">
            <summary>
            Return member's description.
            </summary>
            <returns>String value that describes the member.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.VbListMember.GetParamText(System.Boolean)">
            <summary>
            Converts <c>Parameters</c> property to a single string.
            </summary>
            <returns>Returns <c>Parameters</c> in the form of comma separated text, framed by parens.</returns>
            <param name="useFormatting">Specifies whether to use html formatting tags</param>
        </member>
        <member name="T:Stimulsoft.Editor.JsListMember">
            <summary>
            Implements properties and methods for a particular list member in the data collection of the code completion popups used to describe C# language code.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.JsListMember.#ctor">
            <summary>
            Initializes a new instance of the <c>JsListMember</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.JsListMember.#ctor(Stimulsoft.Editor.IListMembers)">
            <summary>
            Initializes a new instance of the <c>JsListMember</c> class with specified owner.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.JsListMember.UpdateParamText">
            <summary>
            Updates Parameter text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.JsListMember.GetOwnDescription">
            <summary>
            Return member's description.
            </summary>
            <returns>String value that describes the member.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.JsListMember.GetParamText(System.Boolean)">
            <summary>
            Converts <c>Parameters</c> property to a single string.
            </summary>
            <param name="useFormatting">Specifies whether to use html formatting tags</param>
            <returns>Returns <c>Parameters</c> in the form of comma separated text, framed by parens.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.CsListMembers">
            <summary>
            Represents data collection related to popup list box controls used to describe C# language code.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CsListMembers.CreateListMember">
            <summary>
            Initializes a new instance of the <c>CsListMember</c> class with default settings.
            </summary>
            <returns><c>IListMember</c> that represents this new instance.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.VbListMembers">
            <summary>
            Represents data collection related to popup list box controls used to describe Visual Basic language code.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.VbListMembers.CreateListMember">
            <summary>
            Initializes a new instance of the <c>VbListMember</c> class with default settings.
            </summary>
            <returns><c>IListMember</c> that represents this new instance.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.JsListMembers">
            <summary>
            Represents data collection related to popup list box controls used to describe JScript language code.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.JsListMembers.CreateListMember">
            <summary>
            Initializes a new instance of the <c>CsListMember</c> class with default settings.
            </summary>
            <returns><c>IListMember</c> that represents this new instance.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.CsParameterInfo">
            <summary>
            Represents Parameter Info data related to popup window and popup hint controls used to describe C# language code.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CsParameterInfo.CreateListMember">
            <summary>
            Initializes a new instance of the <c>CsListMember</c> class with default settings.
            </summary>
            <returns><c>IListMember</c> that represents this new instance.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.VbParameterInfo">
            <summary>
            Represents Parameter Info data related to popup window and popup hint controls used to describe Visual Basic language code.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.VbParameterInfo.CreateListMember">
            <summary>
            Initializes a new instance of the <c>VbListMember</c> class with default settings.
            </summary>
            <returns><c>IListMember</c> that represents this new instance.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.JsParameterInfo">
            <summary>
            Represents Parameter Info data related to popup window and popup hint controls used to describe JScript language code.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.JsParameterInfo.CreateListMember">
            <summary>
            Initializes a new instance of the <c>CsListMember</c> class with default settings.
            </summary>
            <returns><c>IListMember</c> that represents this new instance.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.SqlParser">
            <summary>
            Represents class that and perform syntax and lexical analysis of specified Sql code text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SqlParser.#ctor">
            <summary>
            Initializes a new instance of the <c>SqlParser</c> class with default settings.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SqlParser.CaseSensitive">
            <summary>
            Gets or sets a boolean value that indicates whether <c>SqlParser</c> should perform case-sensitive analysis of its content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SqlParser.ResetOptions">
            <summary>
            Resets <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SqlParser.ReparseText">
            <summary>
            Reparses entire text.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.SqlLexerToken">
            <summary>
            Represents lexical tokens for Sql parser.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.SqlNodeType">
            <summary>
            Defines types of syntax nodes used to create a hierarchical tree view that examines code text as a collection of syntax members.
            Intendent to use with Sql language.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.NetNodeType">
            <summary>
            Defines types of syntax nodes used to create a hierarchical tree view that examines code text as a collection of syntax members.
            Intendent to use with collection of .NET languages, like C#, J#, and VB.NET
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Unit">
            <summary>
            Specifies that syntax node corresponds to entire unit.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.UsingList">
            <summary>
            Specifies that syntax node corresponds to the list of external namespaces.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Using">
            <summary>
            Specifies that syntax node corresponds to external namespace.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.UsingAlias">
            <summary>
            Specifies that syntax node corresponds to user-defined symbol representing a namespace.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Alias">
            <summary>
            Specifies that syntax node corresponds to external alias directive.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.AliasList">
            <summary>
            Specifies that syntax node corresponds to the list of external alias directives.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Namespace">
            <summary>
            Specifies that syntax node corresponds to namespace.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Class">
            <summary>
            Specifies that syntax node corresponds to class.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Struct">
            <summary>
            Specifies that syntax node corresponds to structure.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Interface">
            <summary>
            Specifies that syntax node corresponds to interface.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Enum">
            <summary>
            Specifies that syntax node corresponds to enumeration.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Module">
            <summary>
            Specifies that syntax node corresponds to module.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Field">
            <summary>
            Specifies that syntax node corresponds to field.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Constant">
            <summary>
            Specifies that syntax node corresponds to constant.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.LocalVariable">
            <summary>
            Specifies that syntax node corresponds to local variable.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.FixedVariable">
            <summary>
            Specifies that syntax node corresponds to fixed variable.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Method">
            <summary>
            Specifies that syntax node corresponds to method.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Constructor">
            <summary>
            Specifies that syntax node corresponds to constructor.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Destructor">
            <summary>
            Specifies that syntax node corresponds to destructor.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Delegate">
            <summary>
            Specifies that syntax node corresponds to delegate.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Property">
            <summary>
            Specifies that syntax node corresponds to property.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Event">
            <summary>
            Specifies that syntax node corresponds to event.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Operator">
            <summary>
            Specifies that syntax node corresponds to operator.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.OperatorType">
            <summary>
            Specifies that syntax node corresponds to operator type.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Indexer">
            <summary>
            Specifies that syntax node corresponds to indexer.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Parameter">
            <summary>
            Specifies that syntax node corresponds to parameter.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ParameterList">
            <summary>
            Specifies that syntax node corresponds to list of parameters.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Argument">
            <summary>
            Specifies that syntax node corresponds to method argument.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ArgumentList">
            <summary>
            Specifies that syntax node corresponds to list of arguments.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Attribute">
            <summary>
            Specifies that syntax node corresponds to attribute.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.AttributeList">
            <summary>
            Specifies that syntax node corresponds to list of attributes.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.AttributeTarget">
            <summary>
            Specifies that syntax node corresponds to target of attribute.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Name">
            <summary>
            Specifies that syntax node corresponds to name (identifier).
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Type">
            <summary>
            Specifies that syntax node corresponds to type.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.PropertyAccessor">
            <summary>
            Specifies that syntax node corresponds to accessor of property.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.EventAccessor">
            <summary>
            Specifies that syntax node corresponds to accessor of event.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Modifier">
            <summary>
            Specifies that syntax node corresponds to access modifier.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ArrayModifier">
            <summary>
            Specifies that syntax node corresponds to array modifier.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Region">
            <summary>
            Specifies that syntax node corresponds to region.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ParameterModifier">
            <summary>
            Specifies that syntax node corresponds to parameter modifier.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.OptionalParameter">
            <summary>
            Specifies that syntax node corresponds to default parameter.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ArraySpecifier">
            <summary>
            Specifies that syntax attribute corresponds to array specifier.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.LocalConst">
            <summary>
            Specifies that syntax node corresponds to local constant.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Statement">
            <summary>
            Specifies that syntax node corresponds to language statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.TypeList">
            <summary>
            Specifies that syntax node corresponds to list of types.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.HandlesList">
            <summary>
            Specifies that syntax node corresponds to list of handles (procedure that handles some event).
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ImplementsList">
            <summary>
            Specifies that syntax node corresponds to list of implements (interface implemented in the class).
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ThrowsList">
            <summary>
            Specifies that syntax node corresponds to list of exception that can be handled by a method.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Comment">
            <summary>
            Specifies that syntax node corresponds to comment.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.TypeParameter">
            <summary>
            Specifies that syntax node corresponds to generic type.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.TypeParameterList">
            <summary>
            Specifies that syntax node corresponds to list of generic type.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.TypeParameterConstraint">
            <summary>
            Specifies that syntax node corresponds to parameter constraint.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.TypeParameterConstraintsClauseList">
            <summary>
            Specifies that syntax node corresponds to list of parameter constraints.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.TypeParameterConstraintsClause">
            <summary>
            Specifies that syntax node corresponds to parameter constraint clause.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.XmlComment">
            <summary>
            Specifies that syntax node corresponds to xml comment.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.XmlUnit">
            <summary>
            Specifies that syntax node corresponds to xml unit.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.XmlTag">
            <summary>
            Specifies that syntax node corresponds to xml tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.XmlParameter">
            <summary>
            Specifies that syntax node corresponds to xml parameter.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.XmlParameterList">
            <summary>
            Specifies that syntax node corresponds to list of xml parameters.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.XmlBody">
            <summary>
            Specifies that syntax node corresponds to xml body.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.LocalConstantDeclarationStatement">
            <summary>
            Specifies that syntax node corresponds to declaration of local constant.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.FixedDeclarationStatement">
            <summary>
            Specifies that syntax node corresponds to declaration of fixed variable.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.IfStatement">
            <summary>
            Specifies that syntax node corresponds to "if" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ElseStatement">
            <summary>
            Specifies that syntax node corresponds to "else" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.SwitchStatement">
            <summary>
            Specifies that syntax node corresponds to "switch" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.SwitchSectionStatement">
            <summary>
            Specifies that syntax node corresponds to "switch" section statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.SwitchLabelStatement">
            <summary>
            Specifies that syntax node corresponds to "switch" label statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.WhileStatement">
            <summary>
            Specifies that syntax node corresponds to "while" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.DoStatement">
            <summary>
            Specifies that syntax node corresponds to "do" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.DoWhileStatement">
            <summary>
            Specifies that syntax node corresponds to "do while" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ForStatement">
            <summary>
            Specifies that syntax node corresponds to "for" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ForConditionStatement">
            <summary>
            Specifies that syntax node corresponds to "for" condition statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ForInitializerStatement">
            <summary>
            Specifies that syntax node corresponds to "for" initializer statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ForIteratorStatement">
            <summary>
            Specifies that syntax node corresponds to "for" iterator statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ForEachStatement">
            <summary>
            Specifies that syntax node corresponds to "for each" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ForEachInitializerStatement">
            <summary>
            Specifies that syntax node corresponds to "for each" initializer statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ForVarControlStatement">
            <summary>
            Specifies that syntax node corresponds to "for" var control statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ForVarControlRestStatement">
            <summary>
            Specifies that syntax node corresponds to "for" var control rest statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.VariableDeclaratorsRestStatement">
            <summary>
            Specifies that syntax node corresponds to variable declarators rest statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Annotation">
            <summary>
            Specifies that syntax node corresponds to "Annotation".
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ElementValuePair">
            <summary>
            Specifies that syntax node corresponds to "Element Value Pair".
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.AssertStatement">
            <summary>
            Specifies that syntax node corresponds to "assert" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.SynchronizedStatement">
            <summary>
            Specifies that syntax node corresponds to "synchronized" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.VariableModifier">
            <summary>
            Specifies that syntax node corresponds to variable modifier.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.VariableModifierList">
            <summary>
            Specifies that syntax node corresponds to list of variable modifiers.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.VariableDeclaratorsRest">
            <summary>
            Specifies that syntax node corresponds to list of variable declarator rest.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.BreakStatement">
            <summary>
            Specifies that syntax node corresponds to "break" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ContinueStatement">
            <summary>
            Specifies that syntax node corresponds to "continue" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.GotoStatement">
            <summary>
            Specifies that syntax node corresponds to "goto" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ReturnStatement">
            <summary>
            Specifies that syntax node corresponds to "return" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ThrowStatement">
            <summary>
            Specifies that syntax node corresponds to "throw" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.TryStatement">
            <summary>
            Specifies that syntax node corresponds to "try" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.CatchStatement">
            <summary>
            Specifies that syntax node corresponds to "catch" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.FinallyStatement">
            <summary>
            Specifies that syntax node corresponds to "finally" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.CheckedStatement">
            <summary>
            Specifies that syntax node corresponds to "checked" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.UncheckedStatement">
            <summary>
            Specifies that syntax node corresponds to "unchecked" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.UnsafeStatement">
            <summary>
            Specifies that syntax node corresponds to "unsafe" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.LockStatement">
            <summary>
            Specifies that syntax node corresponds to "lock" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.UsingStatement">
            <summary>
            Specifies that syntax node corresponds to "using" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.FixedStatement">
            <summary>
            Specifies that syntax node corresponds to "fixed" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.LabeledStatement">
            <summary>
            Specifies that syntax node corresponds to "labeled" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.BlockStatement">
            <summary>
            Specifies that syntax node corresponds to "block" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ExpressionStatement">
            <summary>
            Specifies that syntax node corresponds to expression statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.YieldStatement">
            <summary>
            Specifies that syntax node corresponds to "yield" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.AddHandlerStatement">
            <summary>
            Specifies that syntax node corresponds to "add handler" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.CallStatement">
            <summary>
            Specifies that syntax node corresponds to "call" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.CaseStatement">
            <summary>
            Specifies that syntax node corresponds to "case" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.CaseElseStatement">
            <summary>
            Specifies that syntax node corresponds to "case else" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ElseIfStatement">
            <summary>
            Specifies that syntax node corresponds to "else if" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.EndStatement">
            <summary>
            Specifies that syntax node corresponds to "end" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.EraseStatement">
            <summary>
            Specifies that syntax node corresponds to "erase" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ErrorStatement">
            <summary>
            Specifies that syntax node corresponds to "error" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ExitStatement">
            <summary>
            Specifies that syntax node corresponds to "exit" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.MidAssignmentStatement">
            <summary>
            Specifies that syntax node corresponds to "mid assignment" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.OnErrorStatement">
            <summary>
            Specifies that syntax node corresponds to "on error" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.RaiseEventStatement">
            <summary>
            Specifies that syntax node corresponds to "raise event" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.RedimStatement">
            <summary>
            Specifies that syntax node corresponds to "redim" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.RemoveHandlerStatement">
            <summary>
            Specifies that syntax node corresponds to "remove handler" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ResumeStatement">
            <summary>
            Specifies that syntax node corresponds to "resume" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.SelectStatement">
            <summary>
            Specifies that syntax node corresponds to "select" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.StopStatement">
            <summary>
            Specifies that syntax node corresponds to "stop" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.SyncLockStatement">
            <summary>
            Specifies that syntax node corresponds to "synclock" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.WithStatement">
            <summary>
            Specifies that syntax node corresponds to "with" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.WithStatementMember">
            <summary>
            Specifies that syntax node corresponds to with member.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.EmptyStatement">
            <summary>
            Specifies that syntax node corresponds to "empty" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ExpressionList">
            <summary>
            Specifies that syntax node corresponds to expression list.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Expression">
            <summary>
            Specifies that syntax node corresponds to expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ConditionalExpression">
            <summary>
            Specifies that syntax node corresponds to "conditional" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.AssignmentExpression">
            <summary>
            Specifies that syntax node corresponds to "assignment" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ConditionalOrExpression">
            <summary>
            Specifies that syntax node corresponds to "conditional or" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ConditionalAndExpression">
            <summary>
            Specifies that syntax node corresponds to "conditional and" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.InclusiveOrExpression">
            <summary>
            Specifies that syntax node corresponds to "inclusive or" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ExclusiveOrExpression">
            <summary>
            Specifies that syntax node corresponds to "exclusive or" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.AndExpression">
            <summary>
            Specifies that syntax node corresponds to "and" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.NotExpression">
            <summary>
            Specifies that syntax node corresponds to "not" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.EqualityExpression">
            <summary>
            Specifies that syntax node corresponds to "equality" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.RelationalExpression">
            <summary>
            Specifies that syntax node corresponds to "relation" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.AsIsExpression">
            <summary>
            Specifies that syntax node corresponds to "as is" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ShiftExpression">
            <summary>
            Specifies that syntax node corresponds to "shift" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.AdditiveExpression">
            <summary>
            Specifies that syntax node corresponds to "additive" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.MultiplicativeExpression">
            <summary>
            Specifies that syntax node corresponds to "multiplicative" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.PrefixedUnaryExpression">
            <summary>
            Specifies that syntax node corresponds to "prefixed unary" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.UnaryExpression">
            <summary>
            Specifies that syntax node corresponds to "unary" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.CastExpression">
            <summary>
            Specifies that syntax node corresponds to "cast" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.CastInvocationExpression">
            <summary>
            Specifies that syntax node corresponds to "cast invocation" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.CastInvocationTargetExpression">
            <summary>
            Specifies that syntax node corresponds to "cast invocation target" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.CastTargetExpression">
            <summary>
            Specifies that syntax node corresponds to "cast target" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.PrimaryExpression">
            <summary>
            Specifies that syntax node corresponds to "primary" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ArrayCreationExpression">
            <summary>
            Specifies that syntax node corresponds to "array creation" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ObjectCreationExpression">
            <summary>
            Specifies that syntax node corresponds to "object creation" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ArrayInitializerExpression">
            <summary>
            Specifies that syntax node corresponds to "array initializer" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.BaseAccessExpression">
            <summary>
            Specifies that syntax node corresponds to "base access" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ThisAccessExpression">
            <summary>
            Specifies that syntax node corresponds to "this access" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.MemberAccessExpression">
            <summary>
            Specifies that syntax node corresponds to "member access" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.PointerMemberAccessExpression">
            <summary>
            Specifies that syntax node corresponds to "pointer member access" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ElementAccessExpression">
            <summary>
            Specifies that syntax node corresponds to "element access" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.InvocationExpression">
            <summary>
            Specifies that syntax node corresponds to "invocation" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.CheckedExpression">
            <summary>
            Specifies that syntax node corresponds to "checked" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.UncheckedExpression">
            <summary>
            Specifies that syntax node corresponds to "unchecked" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.TypeofExpression">
            <summary>
            Specifies that syntax node corresponds to "typeof" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.SizeofExpression">
            <summary>
            Specifies that syntax node corresponds to "sizeof" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ParenthesizedExpression">
            <summary>
            Specifies that syntax node corresponds to "parenthesized" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.PostIncrementExpression">
            <summary>
            Specifies that syntax node corresponds to "post increment" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.PostDecrementExpression">
            <summary>
            Specifies that syntax node corresponds to "post decrement" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.DefaultExpression">
            <summary>
            Specifies that syntax node corresponds to "default" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.GenericExpression">
            <summary>
            Specifies that syntax node corresponds to "generic" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.AnonymousMethodExpression">
            <summary>
            Specifies that syntax node corresponds to "anonymous method" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.NullCoalescingExpression">
            <summary>
            Specifies that syntax node corresponds to "null coalescing" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.AddressofExpression">
            <summary>
            Specifies that syntax node corresponds to "addressof" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.GetTypeExpression">
            <summary>
            Specifies that syntax node corresponds to "gettype" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.OptionStatement">
            <summary>
            Specifies that syntax node corresponds to Option statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.EqualityOrAssignmentExpression">
            <summary>
            Specifies that syntax node corresponds to equality or assignment expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Extern">
            <summary>
            Specifies that syntax node corresponds extern
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.EnumBody">
            <summary>
            Specifies that syntax node corresponds to enum body.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.TypeDeclaration">
            <summary>
            Specifies that syntax node corresponds to type declaration
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.DeleteExpression">
            <summary>
            Specifies that syntax node corresponds to "delete" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.InstanceOfExpression">
            <summary>
            Specifies that syntax node corresponds to "instanceof" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.PrototypeExpression">
            <summary>
            Specifies that syntax node corresponds to "function prototype" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.TypeExpression">
            <summary>
            Specifies that syntax node corresponds to "type definition" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.RegularExpression">
            <summary>
            Specifies that syntax node corresponds to "regular" expression.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Execute">
            <summary>
            Specifies that syntax node corresponds to "Execute" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ExecuteGlobal">
            <summary>
            Specifies that syntax node corresponds to "ExecuteGlobal" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.Randomize">
            <summary>
            Specifies that syntax node corresponds to "Randomize" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.SetStatement">
            <summary>
            Specifies that syntax node corresponds to "Set" statement.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.NetNodeType.ImpExpression">
            <summary>
            Specifies that syntax node corresponds to "Imp" expression.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlCommentType">
            <summary>
            Definex types of xml comment elements.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlCommentType.C">
            <summary>
            Specifies "code" tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlCommentType.Para">
            <summary>
            Specifies "paragraf" tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlCommentType.See">
            <summary>
            Specifies "see" (link to another code element in the text) tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlCommentType.Code">
            <summary>
            Specifies "code" tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlCommentType.Param">
            <summary>
            Specifies "parameter" tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlCommentType.Seealso">
            <summary>
            Specifies "see also" (link to another element in the See Also section) tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlCommentType.Example">
            <summary>
            Specifies example tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlCommentType.Paramref">
            <summary>
            Specifies "parameter reference" tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlCommentType.Summary">
            <summary>
            Specifies "summary" tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlCommentType.Exception">
            <summary>
            Specifies "exception" tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlCommentType.Permission">
            <summary>
            Specifies "permission" tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlCommentType.Value">
            <summary>
            Specifies "value" tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlCommentType.Include">
            <summary>
            Specifies "include" tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlCommentType.Remarks">
            <summary>
            Specifies "remarks" tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlCommentType.List">
            <summary>
            Specifies "list" tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlCommentType.Returns">
            <summary>
            Specifies "returns" tag.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.INetNamespace">
            <summary>
            Represents a .NET namespace.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.INetNamespace.GetName">
            <summary>
            When implemented by a class, gets name or alias of the namespace.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.INetNamespace.Namespace">
            <summary>
            When implemented by a class, gets or sets name of the namespace.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.INetNamespace.Alias">
            <summary>
            When implemented by a class, gets or sets alias of the namespace.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.INetNamespace.System">
            <summary>
            Reserwed for internal use.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IReflectionRepository">
            <summary>
            Represents properties and methods to perform code completion functionality using reflection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IReflectionRepository.RegisterNamespace(System.String)">
            <summary>
            When implemented by a class, adds specified namespace to the namespace list.
            </summary>
            <param name="nspace">Specifies name of namespace to add.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IReflectionRepository.UnregisterNamespace(System.String)">
            <summary>
            When implemented by a class, removes specified namespace from the namespace list.
            </summary>
            <param name="nspace">Specifies name of namespace to remove.</param>
            <returns>True if succeed (namespace is present in the namespace list); otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IReflectionRepository.RegisterObject(System.String,System.Object)">
            <summary>
            When implemented by a class, adds specified object for code completion to the object list.
            </summary>
            <param name="name">Specifies name of the object.</param>
            <param name="obj">Specifies object to register.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IReflectionRepository.UnregisterObject(System.String)">
            <summary>
            When implemented by a class, removes specified object from the object list.
            </summary>
            <param name="name">Specifies name of object to remove.</param>
            <returns>True if succeed (object is present in the object list); otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IReflectionRepository.RegisterType(System.String,System.Type)">
            <summary>
            When implemented by a class, adds specified type for code completion to the type list.
            </summary>
            <param name="name">Specifies name of the type.</param>
            <param name="type">Specifies type to register.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IReflectionRepository.RegisterType(System.String,System.Type,System.Boolean)">
            <summary>
            When implemented by a class, adds specified type for code completion to the type list.
            </summary>
            <param name="name">Specifies name of the type.</param>
            <param name="type">Specifies type to register.</param>
            <param name="global">Specifies whether the type is global</param>
        </member>
        <member name="M:Stimulsoft.Editor.IReflectionRepository.UnregisterType(System.String)">
            <summary>
            When implemented by a class, removes specified type from the type list.
            </summary>
            <param name="name">Specifies name of type to remove.</param>
            <returns>True if succeed (type is present in the type list); otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IReflectionRepository.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            When implemented by a class, adds specified assembly for code completion to the assembly list.
            </summary>
            <param name="assembly">Specifies registered assembly.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IReflectionRepository.RegisterAssembly(System.String)">
            <summary>
            When implemented by a class, adds specified assembly for code completion to the assembly list.
            </summary>
            <param name="name">Specifies name of the assembly.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IReflectionRepository.UnregisterAssembly(System.Reflection.Assembly,System.Boolean)">
            <summary>
            When implemented by a class, removes specified assembly from the assembly list.
            </summary>
            <param name="assembly">Specifies  assembly to remove.</param>
            <param name="removeReferences">Indicates whether all types from the specified assembly should be unregistered.</param>
            <returns>True if succeed (assembly is present in the assembly list); otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IReflectionRepository.UnregisterAssembly(System.String,System.Boolean)">
            <summary>
            When implemented by a class, removes specified assembly from the assembly list.
            </summary>
            <param name="name">Specifies name of assembly to remove.</param>
            <param name="removeReferences">Indicates whether all types from the specified assembly should be unregistered.</param>
            <returns>True if succeed (assembly is present in the assembly list); otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IReflectionRepository.RegisterAllAssemblies">
            <summary>
            When implemented by a class, registers all assemlies from the current application domain.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IReflectionRepository.RegisterDefaultAssemblies">
            <summary>
            When implemented by a class, registers some most frequently used assemblies.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IReflectionRepository.RestrictTypeMembers(System.Type)">
            <summary>
            When implemented by a class, disables type members from being shown in code completion windows.
            </summary>
            <param name="type">Specifies type which members will be disabled</param>
        </member>
        <member name="M:Stimulsoft.Editor.IReflectionRepository.AllowTypeMembers(System.Type)">
            <summary>
            When implemented by a class, re-enables type members from being shown in code completion windows.
            </summary>
            <param name="type">Specifies type which members will be re-enabled</param>
        </member>
        <member name="M:Stimulsoft.Editor.IReflectionRepository.ClearNamespaces">
            <summary>
            When implemented by a class, clears namespace list.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IReflectionRepository.ClearObjects">
            <summary>
            When implemented by a class, clears object list.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IReflectionRepository.ClearAssemblies">
            <summary>
            When implemented by a class, clears assembly list.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IReflectionRepository.ClearTypes">
            <summary>
            When implemented by a class, clears type list.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IReflectionRepository.Types">
            <summary>
            When implemented by a class, represents type list in a form of key-value pairs.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IReflectionRepository.Objects">
            <summary>
            When implemented by a class, represents object list in a form of key-value pairs.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IReflectionRepository.Assemblies">
            <summary>
            When implemented by a class, represents assembly list.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IReflectionRepository.Namespaces">
            <summary>
            When implemented by a class, represents namespace list.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.VbParser">
            <summary>
            Represents class that and perform syntax and lexical analysis of specified Visual Basic.NET code text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.VbParser.#ctor">
            <summary>
            Initializes a new instance of the <c>VbParser</c> class with default settings.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.VbParser.CaseSensitive">
            <summary>
            Gets or sets a boolean value that indicates whether <c>VbParser</c> should perform case-sensitive analysis of its content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.VbParser.ResetOptions">
            <summary>
            Resets <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.VbParser.GetSingleLineComment">
            <summary>
            Gets the string that represents start symbol of single line comment.
            </summary>
            <returns>Single line comment string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.VbParser.GetCompletionType(Stimulsoft.Editor.CodeCompletionArgs)">
            <summary>
            Obtains type of code completion window from specifies <c>CodeCompletionArgs</c> parameter.
            </summary>
            <param name="e">Contains data of code completion window.</param>
            <returns><c>CodeCompletionType</c> data of window to popup.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.VbParser.ProcessAutoComplete(System.Drawing.Point,System.String@)">
            <summary>
            Checks whether end-of-block code needs inserting.
            </summary>
            <param name="position">Specifies current position in text.</param>
            <param name="code">output prameter to return code fragment to be insered</param>
            <returns>true if autocompletion of end-of-block needed; otherwise false</returns>
        </member>
        <member name="M:Stimulsoft.Editor.VbParser.SmartFormatLine(System.Int32,System.String,System.Int16[])">
            <summary>
            Formats line according to the parser rules.
            </summary>
            <param name="index">Specifies index of line to format.</param>
            <param name="text">specifies string representation of the line</param>
            <param name="colorData">specifies data containing color information for the given string</param>
            <returns>formatted line.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.VbParser.ResetCodeCompletionChars">
            <summary>
            Resets the <c>CodeCompletionChars</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.VbParser.ShouldSerializeCodeCompletionChars">
            <summary>
            Indicates whether the <c>CodeCompletionChars</c> property should be persisted.
            </summary>
            <returns>True if <c>CodeCompletionChars</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.VbParser.CreateRepository">
            <summary>
            Creates <c>ICodeCompletionRepository</c> to perform code completion functionality for this parser.
            </summary>
            <returns><c>ICodeCompletionRepository</c> that is created.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.VbLexerToken">
            <summary>
            Represents lexical tokens for Vb parser.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.LanguageParser">
            <summary>
            Represents parser that performs lexical analysis for predefined set of languages.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LanguageParser.#ctor">
            <summary>
            Initializes a new instance of the <c>LanguageParser</c> class with default settings.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LanguageParser.Language">
            <summary>
            Specifies language to analize.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LanguageParser.ShouldSerializeXmlScheme">
            <summary>
            Indicates whether the XmlScheme property should be persisted.
            </summary>
            <returns>True if <c>XmlScheme</c> represents cutom language; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.LanguageParser.XmlScheme">
            <summary>
            Gets or sets an xml representation of <c>Scheme</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LanguageParser.Scheme">
            <summary>
            Gets or sets list of rules for lexical analysis.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.Languages">
            <summary>
            Defines set of languages to which performed lexical analysis.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.CodeCompletionProvider">
            <summary>
            Represents properties and methods to provide data related to Code Completion popup listbox and popup hint controls.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionProvider.OnClosePopup(System.Object,Stimulsoft.Editor.ClosingEventArgs)">
            <summary>
            Raises <c>ClosePopup</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>ClosingEventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionProvider.OnShowPopup(System.Object,Stimulsoft.Editor.ShowingEventArgs)">
            <summary>
            Raises <c>ShowPopup</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>ShowingEventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionProvider.GetText(System.Int32)">
            <summary>
            Returns string representing default column.
            </summary>
            <param name="index">Index of item within collection.</param>
            <returns>Text representing default column.</returns>
            <remarks>In this class method always return empty string. Descendant classes can override this method.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionProvider.GetName(System.Int32)">
            <summary>
            Returns string reperesenting name of the item.
            </summary>
            <param name="index">Index of item within collection.</param>
            <returns>String representing name of specified item.</returns>
            <remarks>In this class method always return empty string. Descendant classes can override this method.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionProvider.IndexOfName(System.String,System.Boolean)">
            <summary>
            Returns index of the item within collection by it's name.
            </summary>
            <param name="name">Specifies Name property of item to locate.</param>
            <param name="caseSensitive">Indicates whether search should be case sensitive.</param>
            <returns>Index of found item.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionProvider.GetImageIndex(System.Int32)">
            <summary>
            Returns number of image that is displayed for item given by index.
            </summary>
            <param name="index">Index of item within collection.</param>
            <returns>Index of image corresponding to given item.</returns>
            <remarks>In this class method always return -1. Descendant classes can override this method.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionProvider.GetDescription(System.Int32)">
            <summary>
            Returns a content of the column, named 'Description', of the specified item from the collection.
            </summary>
            <param name="index">Index of the item within the collection.</param>
            <returns>String content of specified column.</returns>
            <remarks>In this class method always return empty string. Descendant classes can override this method.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionProvider.GetColumnText(System.Int32,System.Int32)">
            <summary>
            Returns text from given item in the specified column.
            </summary>
            <param name="index">Specifies index of the item.</param>
            <param name="column">Specifies index of the column.</param>
            <returns>Text representing specified item.</returns>
            <remarks>In this class method always return empty string. Descendant classes can override this method.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionProvider.ColumnVisible(System.Int32)">
            <summary>
            Indicates whether specified column is visible.
            </summary>
            <param name="column">Specifies index of the column.</param>
            <returns>True if visible; otherwise false.</returns>
            <remarks>In this class method always return false. Descendant classes can override this method.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionProvider.GetParent">
            <summary>
            Returns code completion provider owning this <c>ICodeCompletionProvider</c> instance.
            </summary>
            <returns>Parent of the <c>ICodeCompletionProvider</c>.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionProvider.SaveFile(System.String)">
            <summary>
            Saves content of the snippet to the specific file.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionProvider.SaveStream(System.IO.TextWriter)">
            <summary>
            Saves content of the snippet to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionProvider.SaveStream(System.IO.Stream)">
            <summary>
            Saves content of the snippet to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionProvider.LoadFile(System.String)">
            <summary>
            Loads the contents of the specified file into the snippet.
            </summary>
            <param name="fileName">Name of file to load.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionProvider.LoadStream(System.IO.TextReader)">
            <summary>
            Loads the contents of the specified stream into the snippet.
            </summary>
            <param name="reader">The TextReader object to read.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionProvider.LoadStream(System.IO.Stream)">
            <summary>
            Loads the contents of the given stream into the snippet.
            </summary>
            <param name="Stream">The Stream object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionProvider.Descriptions">
            <summary>
            Provides an indexed access to the description of each column.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionProvider.ImageIndexes">
            <summary>
            Provides an indexed access to the image index of each column.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionProvider.Strings">
            <summary>
            Provides an indexed access to the text of default column.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionProvider.ColumnCount">
            <summary>
            Returns number of the columns.
            </summary>
            <remarks>In this class property value equals to 0. Descendant classes can override this method.</remarks>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionProvider.SelIndex">
            <summary>
            Represents the index specifying the currently selected item of the popup control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionProvider.Images">
            <summary>
            Gets or sets the ImageList for code completion items.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionProvider.UseIndent">
            <summary>
            Gets or sets a value indicating whether the multi-line text should be indented when inserting to the edit control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionProvider.UseHtmlFormatting">
            <summary>
            Gets or sets a boolean value indicating whether html formatting tags may appear in the text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionProvider.ShowDescriptions">
            <summary>
            Gets or sets a boolean value that indicates whether provider should display Description part in a form of tooltip near the popup control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionProvider.EditField">
            <summary>
            Gets or sets a value indicating editable field of the code completion provider.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionProvider.EditPath">
            <summary>
            Gets or sets a value indicating path to the nested code completion provider.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionProvider.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>CodeCompletionProvider</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="E:Stimulsoft.Editor.CodeCompletionProvider.ClosePopup">
            <summary>
            Occurs when popup control is closed.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.CodeCompletionProvider.ShowPopup">
            <summary>
            Occurs when popup control is displayed.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.CodeSnippetsProvider">
            <summary>
            Represents collection containing list of code snippets.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetsProvider.#ctor(Stimulsoft.Editor.ICodeSnippetMember)">
            <summary>
            Initializes a new instance of the <c>CodeSnippets</c> class with specified parent.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetsProvider.GetParent">
            <summary>
            Returns code completion provider owning this <c>ICodeCompletionProvider</c> instance.
            </summary>
            <returns>Parent of the <c>ICodeCompletionProvider</c>.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetsProvider.OnClosePopup(System.Object,Stimulsoft.Editor.ClosingEventArgs)">
            <summary>
            Checks for nested members and raises <c>ClosePopup</c> event if they are not found.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>ClosingEventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetsProvider.GetDescription(System.Int32)">
            <summary>
            Returns a content of the column, named 'Description', of the specified item from the collection.
            </summary>
            <param name="index">Index of the item within the collection.</param>
            <returns>String content of specified column.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetsProvider.GetName(System.Int32)">
            <summary>
            Returns value <c>ICodeSnippetHeader.Title</c> of the code snippet specified by index.
            </summary>
            <param name="index">Specifies index of the snippet.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetsProvider.GetText(System.Int32)">
            <summary>
            Returns value of <c>ICodeSnippetCode.Code</c> of the code snippet specified by index.
            </summary>
            <param name="index">Specifies index of the snippet.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetsProvider.GetImageIndex(System.Int32)">
            <summary>
            Returns <c>ICodeSnippet.ImageIndex</c> from the snippet specified by index.
            </summary>
            <param name="index">Specifies index of the snippet.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetsProvider.GetColumnText(System.Int32,System.Int32)">
            <summary>
            Returns text from specified column and snippet.
            </summary>
            <param name="index">Specifies index of the snippet.</param>
            <param name="column">Specifies index of the snippet.</param>
            <returns>Text representing specified snippet.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetsProvider.ColumnVisible(System.Int32)">
            <summary>
            Indicates whether specified column is visible.
            </summary>
            <param name="column">Specifies index of the column.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetsProvider.FindByShortcut(System.String,System.Boolean)">
            <summary>
            Gets a code snippet by its shortcut.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetsProvider.ColumnCount">
            <summary>
            Returns number of the columns. In this class <c>ColumnCount</c> always return 1.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetsProvider.EditPath">
            <summary>
            Gets or sets a value indicating path to the nested code completion provider.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetsProvider.Images">
            <summary>
            Gets or sets the ImageList for code completion items.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.CodeSnippet">
            <summary>
            Represents particular code snippet in the snippets collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippet.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippets</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippet.#ctor(Stimulsoft.Editor.ICodeSnippets)">
            <summary>
            Initializes a new instance of the <c>CodeSnippet</c> class with specified parent.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippet.Parent">
            <summary>
            Gets or sets a parent of the <c>CodeSnippet</c>.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippet.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value"></param>
            <returns>A signed number indicating the relative values of this instance and value.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippet.Header">
            <summary>
            Gets a header associated with the snippet.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippet.SnippetHeader">
            <summary>
            Gets or sets the <c>Header</c> property in the form of the CodeSnippetHeader.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippet.Declarations">
            <summary>
            Specifies the literals and objects that make up the parts of a code snippet that you can edit.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippet.SnippetDeclarations">
            <summary>
            Gets or sets the <c>Declarations</c> property in the form of the CodeSnippetDeclaration array.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippet.Imports">
            <summary>
            Contains the imported namespaces for the code snippet
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippet.SnippetImports">
            <summary>
            Gets or sets the <c>Imports</c> property in the form of the CodeSnippetImport array.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippet.References">
            <summary>
            Contains information about assembly references for the code snippet
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippet.SnippetReferences">
            <summary>
            Gets or sets the <c>References</c> property in the form of the CodeSnippetReference array.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippet.Code">
            <summary>
            Gets or sets a string value that specifies code of the snippet. The code completion control, that holds a snippet collection inserts code when user accepts the input.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippet.SnippetCode">
            <summary>
            Gets or sets the <c>Code</c> property in the form of the CodeSnippetCode.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippet.Description">
            <summary>
            Gets string value representing descripton of the <c>CodeSnippet</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippet.ImageIndex">
            <summary>
            Gets or sets the index of the image displayed for the snippet.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippet.CustomData">
            <summary>
            Gets or sets an object that can hold a user defined data attached to the snippet.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.CodeSnippets">
            <summary>
            Represents collection containing list of code snippets.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippets.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippets</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippets.#ctor(Stimulsoft.Editor.ICodeSnippetMember)">
            <summary>
            Initializes a new instance of the <c>CodeSnippets</c> class with specified parent.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippets.AddSnippet">
            <summary>
            Adds a new item to the <c>ICodeSnippets</c> collection.
            </summary>
            <returns><c>ICodeSnippet</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippets.InsertSnippet(System.Int32)">
            <summary>
            Inserts a new item to the specified position within the <c>ICodeSnippets</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippet</c> that is inserted.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippets.GetParent">
            <summary>
            Returns code completion provider owning this <c>ICodeCompletionProvider</c> instance.
            </summary>
            <returns>Parent of the <c>ICodeCompletionProvider</c>.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippets.GetDescription(System.Int32)">
            <summary>
            Returns a content of the column, named 'Description', of the specified item from the collection.
            </summary>
            <param name="index">Index of the item within the collection.</param>
            <returns>String content of specified column.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippets.GetName(System.Int32)">
            <summary>
            Returns value <c>ICodeSnippetHeader.Title</c> of the code snippet specified by index.
            </summary>
            <param name="index">Specifies index of the snippet.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippets.GetText(System.Int32)">
            <summary>
            Returns value of <c>ICodeSnippetCode.Code</c> of the code snippet specified by index.
            </summary>
            <param name="index">Specifies index of the snippet.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippets.GetImageIndex(System.Int32)">
            <summary>
            Returns <c>ICodeSnippet.ImageIndex</c> from the snippet specified by index.
            </summary>
            <param name="index">Specifies index of the snippet.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippets.GetColumnText(System.Int32,System.Int32)">
            <summary>
            Returns text from specified column and snippet.
            </summary>
            <param name="index">Specifies index of the snippet.</param>
            <param name="column">Specifies index of the snippet.</param>
            <returns>Text representing specified snippet.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippets.ColumnVisible(System.Int32)">
            <summary>
            Indicates whether specified column is visible.
            </summary>
            <param name="column">Specifies index of the column.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippets.FindByShortcut(System.String,System.Boolean)">
            <summary>
            Gets a code snippet by its shortcut.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippets.ColumnCount">
            <summary>
            Returns number of the columns. In this class <c>ColumnCount</c> always return 1.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippets.Item(System.Int32)">
            <summary>
            Provides an indexed access to <c>ICodeSnippet</c> objects stored in the collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippets.EditPath">
            <summary>
            Gets or sets a value indicating path to the nested code completion provider.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippets.Images">
            <summary>
            Gets or sets the ImageList for code completion items.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippets.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>CodeSnippets</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.CodeSnippetMember">
            <summary>
            Represents properties and methods for a particular code snippet member in the data collection of the code completion popups.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetMember.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetMember</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetMember.#ctor(Stimulsoft.Editor.ICodeSnippetMembers)">
            <summary>
            Initializes a new instance of the <c>CodeSnippetMembers</c> class with specified parent.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetMember.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value"></param>
            <returns>A signed number indicating the relative values of this instance and value.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetMember.Parent">
            <summary>
            Gets or sets a parent of the <c>CodeSnippetMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetMember.EditPath">
            <summary>
            Gets a string value that specifies the full path of the <c>IListMember</c>. 
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetMember.Name">
            <summary>
            Gets or sets a string value that specifies the name of the <c>IListMember</c>. Useful to find necessary item within the <c>ICodeSnippetMember</c> collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetMember.Path">
            <summary>
            Gets or sets a string value that specifies the path to the file containing source of the <c>ICodeSnippetMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetMember.ImageIndex">
            <summary>
            Gets or sets the index of the image displayed for the <c>ICodeSnippetMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetMember.SnippetsAndMembers">
            <summary>
            Provides an indexed access to the nested snippets and members objects.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetMember.Members">
            <summary>
            Provides an indexed access to the nested <c>ICodeSnippetMember</c> objects.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetMember.CodeSnippetMembers">
            <summary>
            Gets or sets the <c>Members</c> property in the form of the CodeSnippetMember array.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetMember.Snippets">
            <summary>
            Provides an indexed access to the nested<c>ICodeSnippet</c> objects.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetMember.CodeSnippets">
            <summary>
            Gets or sets the <c>Snippets</c> property in the form of the CodeSnippet array.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.CodeSnippetMembers">
            <summary>
            Represents collection containing list of code templates.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetMembers.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetMembers</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetMembers.#ctor(Stimulsoft.Editor.ICodeSnippetMember)">
            <summary>
            Initializes a new instance of the <c>CodeSnippetMembers</c> class with specified parent.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetMembers.OnClosePopup(System.Object,Stimulsoft.Editor.ClosingEventArgs)">
            <summary>
            Checks for nested members and raises <c>ClosePopup</c> event if they are not found.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>ClosingEventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetMembers.AddSnippetMember">
            <summary>
            Adds a new item to the <c>ICodeSnippetMembers</c> collection.
            </summary>
            <returns><c>ICodeSnippetMember</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetMembers.InsertSnippetMember(System.Int32)">
            <summary>
            Inserts a new item to the specified position within the <c>ICodeSnippetMembers</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetMember</c> that is inserted.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetMembers.GetName(System.Int32)">
            <summary>
            Returns <c>ICodeSnippetMember.Name</c> of the snippet member specified by index.
            </summary>
            <param name="index">Specifies index of the snippet.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetMembers.GetText(System.Int32)">
            <summary>
            Returns an empty string
            </summary>
            <param name="index">Specifies index of the snippet.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetMembers.GetImageIndex(System.Int32)">
            <summary>
            Returns <c>ICodeSnippetMember.ImageIndex</c> from the snippet specified by index.
            </summary>
            <param name="index">Specifies index of the snippet.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetMembers.GetColumnText(System.Int32,System.Int32)">
            <summary>
            Returns text from specified column and snippet.
            </summary>
            <param name="index">Specifies index of the snippet.</param>
            <param name="column">Specifies index of the snippet.</param>
            <returns>Text representing specified snippet.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetMembers.ColumnVisible(System.Int32)">
            <summary>
            Indicates whether specified column is visible.
            </summary>
            <param name="column">Specifies index of the column.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetMembers.GetParent">
            <summary>
            Returns code completion provider owning this <c>ICodeCompletionProvider</c> instance.
            </summary>
            <returns>Parent of the <c>ICodeCompletionProvider</c>.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetMembers.FindByShortcut(System.String,System.Boolean)">
            <summary>
            Gets a code snippet by its shortcut.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetMembers.ColumnCount">
            <summary>
            Returns number of the columns. In this class <c>ColumnCount</c> always return 1.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetMembers.EditPath">
            <summary>
            Gets or sets a value indicating path to the nested code completion provider.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetMembers.Parent">
            <summary>
            Gets or sets a parent of the <c>CodeSnippetMembers</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetMembers.Item(System.Int32)">
            <summary>
            Provides an indexed access to <c>ICodeSnippetMember</c> objects stored in the collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetMembers.Members">
            <summary>
            Provides an indexed access to <c>CodeSnippetMember</c> objects stored in the collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetMembers.Images">
            <summary>
            Gets or sets the ImageList for code completion items.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetMembers.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>CodeSnippetMembers</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.CodeSnippetHeader">
            <summary>
            Represents code snippet header.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetHeader.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetHeader</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetHeader.Assign(Stimulsoft.Editor.ICodeSnippetHeader)">
            <summary>
            Copies the contents of another <c>ICodeSnippetHeader</c> object.
            </summary>
            <param name="source">Specifies <c>ICodeSnippetHeader</c> to assign.</param>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetHeader.Title">
            <summary>
            Gets or sets a string value that specifies the title of the code snippet. Useful to find necessary item within the snippets collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetHeader.Description">
            <summary>
            Gets or sets a string value that specifies short description of the code snippet, that can help user to choose snippet from the popup window.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetHeader.Author">
            <summary>
            Gets or sets a string value that specifies author of the code snippet.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetHeader.Shortcut">
            <summary>
            Gets or sets a string value that specifies shortut of the code snippet.
            This shortuct is replaced by entire snippet when user presses Tab in the editor.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetHeader.Types">
            <summary>
            Specifies how the code snippet is inserted into the code.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetHeader.SnippetTypes">
            <summary>
            Gets or sets the <c>Types</c> property in the form of the CodeSnippetType array.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.CodeSnippetType">
            <summary>
            Specifies how the code snippet is inserted into the code.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetType.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetType</c> class with default settings.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetType.SnippetType">
            <summary>
            Specifies how the code snippet is inserted into the code.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.CodeSnippetLiteral">
            <summary>
            Represents literal that make up the parts of a code snippet that you can edit.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetLiteral.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetLiteral</c> class with default settings.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetLiteral.Default">
            <summary>
            Specifies the default value of the literal or object for an IntelliSense Code Snippet.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetLiteral.Function">
            <summary>
            Specifies a function to execute when the literal or object receives focus in the Editor.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetLiteral.ID">
            <summary>
            Specifies the unique identifier for the object or literal..
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetLiteral.ToolTip">
            <summary>
            Specifies the ToolTip description to be associated with the literal in the code snippet.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetLiteral.Editable">
            <summary>
            Specifies whether literal is editable or not.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetLiteral.Type">
            <summary>
            Specifies the type of the object.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.CodeSnippetObject">
            <summary>
            Represents literal that make up the parts of a code snippet that you can edit.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetObject.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetObject</c> class with default settings.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.CodeSnippetDeclaration">
            <summary>
            Represents literals and objects that make up the parts of a code snippet that you can edit.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetDeclaration.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetDeclaration</c> with default settings.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetDeclaration.Literals">
            <summary>
            Defines the literals of the code snippet that you can edit
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetDeclaration.SnippetLiterals">
            <summary>
            Gets or sets the <c>Literals</c> property in the form of the CodeSnippetLiteral array.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetDeclaration.Objects">
            <summary>
            Defines the objects of the code snippet that you can edit. 
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetDeclaration.SnippetObjects">
            <summary>
            Gets or sets the <c>Objects</c> property in the form of the CodeSnippetObject array.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.CodeSnippetImport">
            <summary>
            Represents imported namespace used by an IntelliSense Code Snippet.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetImport.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetImport</c> class with default settings.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetImport.Namespace">
            <summary>
            Specifies the namespace used by the code snippet
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.CodeSnippetReference">
            <summary>
            Contains information about assembly references for the code snippet.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetReference.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetReference</c> class with default settings.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetReference.Assembly">
            <summary>
            Contains the name of the assembly referenced by the code snippet.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetReference.Url">
            <summary>
            Contains a URL that provides more information about the referenced assembly.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.CodeSnippetCode">
            <summary>
            Specifies the code that you want to insert into a file.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetCode.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetCode</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetCode.Assign(Stimulsoft.Editor.ICodeSnippetCode)">
            <summary>
            Copies the contents of another <c>ICodeSnippetCode</c> object.
            </summary>
            <param name="source">Specifies <c>ICodeSnippetCode</c> to assign.</param>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetCode.Delimiter">
            <summary>
            Specifies the delimiter used to describe literals and objects in the code.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetCode.Kind">
            <summary>
            Specifies the kind of code the snippet contains, and thus, where the snippet can be inserted. 
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetCode.Language">
            <summary>
            Specifies the language of the code snippet.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetCode.Code">
            <summary>
            Specifies the code that you want to insert into a file.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.CodeSnippetTypes">
            <summary>
            Specifies how the code snippet is inserted into the code.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetTypes.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetTypes</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetTypes.AddSnippetType">
            <summary>
            Adds new item to the specified position within the <c>ICodeSnippetTypes</c> collection.
            </summary>
            <returns><c>ICodeSnippetType</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetTypes.InsertSnippetType(System.Int32)">
            <summary>
            Inserts a new item to the specified position within the <c>ICodeSnippetTypes</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetType</c> that is inserted.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetTypes.Item(System.Int32)">
            <summary>
            Provides an indexed access to <c>ICodeSnippetType</c> objects stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.CodeSnippetLiterals">
            <summary>
            Provides an indexed access to individual <c>ICodeSnippetLiteral</c> objects.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetLiterals.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetLiterals</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetLiterals.AddLiteral">
            <summary>
            Adds a new item to the specified position within the <c>ICodeSnippetLiterals</c> collection.
            </summary>
            <returns><c>ICodeSnippetLiteral</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetLiterals.InsertLiteral(System.Int32)">
            <summary>
            Inserts a new item to the specified position within the <c>ICodeSnippetLiterals</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetLiteral</c> that is inserted.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetLiterals.Item(System.Int32)">
            <summary>
            Provides an indexed access to <c>ICodeSnippetLiteral</c> objects stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.CodeSnippetObjects">
            <summary>
            Provides an indexed access to individual <c>ICodeSnippetObject</c> objects.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetObjects.AddObject">
            <summary>
            Adds a new item to the specified position within the <c>ICodeSnippetObjects</c> collection.
            </summary>
            <returns><c>ICodeSnippetObject</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetObjects.InsertObject(System.Int32)">
            <summary>
            Inserts a new item to the specified position within the <c>ICodeSnippetObject</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetObject</c> that is inserted.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetObjects.Item(System.Int32)">
            <summary>
            Provides an indexed access to <c>ICodeSnippetObject</c> objects stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.CodeSnippetDeclarations">
            <summary>
            Provides an indexed access to individual <c>ICodeSnippetDeclaration</c> objects.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetDeclarations.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetDeclarations</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetDeclarations.AddDeclaration">
            <summary>
            Adds a new item to the specified position within the <c>ICodeSnippetDeclarations</c> collection.
            </summary>
            <returns><c>ICodeSnippetDeclaration</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetDeclarations.InsertDeclaration(System.Int32)">
            <summary>
            Inserts a new item to the specified position within the <c>ICodeSnippetDeclarations</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetDeclaration</c> that is inserted.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetDeclarations.Item(System.Int32)">
            <summary>
            Provides an indexed access to <c>ICodeSnippetDeclaration</c> objects stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.CodeSnippetImports">
            <summary>
            Provides an indexed access to individual <c>ICodeSnippetImport</c> objects.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetImports.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetImports</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetImports.AddImport">
            <summary>
            Adds a new item to the specified position within the <c>ICodeSnippetImports</c> collection.
            </summary>
            <returns><c>ICodeSnippetImport</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetImports.InsertImport(System.Int32)">
            <summary>
            Inserts a new item to the specified position within the <c>ICodeSnippetImports</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetImport</c> that is inserted.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetImports.Item(System.Int32)">
            <summary>
            Provides an indexed access to <c>ICodeSnippetImport</c> objects stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.CodeSnippetReferences">
            <summary>
            Provides an indexed access to individual <c>ICodeSnippetReference</c> objects.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetReferences.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetReferences</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetReferences.AddReference">
            <summary>
            Adds a new item to the specified position within the <c>ICodeSnippetReferences</c> collection.
            </summary>
            <returns><c>ICodeSnippetReference</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetReferences.InsertReference(System.Int32)">
            <summary>
            Inserts a new item to the specified position within the <c>ICodeSnippetReferences</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetReference</c> that is inserted.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.CodeSnippetReferences.Item(System.Int32)">
            <summary>
            Provides an indexed access to <c>ICodeSnippetReference</c> objects stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ParameterMember">
            <summary>
            Implements properties for a particular parameter member within list member parameters.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ParameterMember.Name">
            <summary>
            Gets or sets a string value that specifies name of the <c>IParameterMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ParameterMember.DataType">
            <summary>
            Gets or sets a string value that specifies datatype of the <c>IParameterMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ParameterMember.Description">
            <summary>
            Gets or sets a string value that specifies short description of the <c>IParameterMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ParameterMember.Qualifier">
            <summary>
            Gets or sets a string value that specifies parameter modifier of the <c>IParameterMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ParameterMember.Text">
            <summary>
            Gets or sets string value that specifies text of the <c>IParameterMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ParameterMember.Modifiers">
            <summary>
            Gets or sets a string value that specifies parameter modifier.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ListMember">
            <summary>
            Implements properties and methods for a particular list member in the data collection of the code completion popups.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ListMember.#ctor">
            <summary>
            Initializes a new instance of the <c>ListMember</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ListMember.#ctor(Stimulsoft.Editor.IListMembers)">
            <summary>
            Initializes a new instance of the <c>ListMember</c> class with specified owner.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ListMember.UpdateParamText">
            <summary>
            Updates Parameter text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ListMember.GetParamText(System.Boolean)">
            <summary>
            Converts <c>Parameters</c> property to a single string.
            </summary>
            <param name="useFormatting">Specifies whether to use html formatting tags</param>
            <returns>Returns <c>Parameters</c> in the form of comma separated text, framed by parens.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ListMember.GetOwnDescription">
            <summary>
            Return member's description.
            </summary>
            <returns>String value that describes the member.</returns>
            <remarks>In this class method always return empty string. Descendant classes can override this method.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.ListMember.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value"></param>
            <returns>A signed number indicating the relative values of this instance and value.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.ListMember.Owner">
            <summary>
            Gets IListMembers instance owning the <c>ListMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ListMember.Name">
            <summary>
            Gets or sets a string value that specifies the name of the <c>ListMember</c>. Useful to find necessary item within the <c>ListMember</c> collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ListMember.DisplayText">
            <summary>
            Gets or sets a string value displayed as a "name" part of <c>ListMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ListMember.DataType">
            <summary>
            Gets or sets a string value that specifies data type of the <c>ListMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ListMember.Description">
            <summary>
            Gets or sets a string value that specifies short description of the <c>ListMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ListMember.ImageIndex">
            <summary>
            Gets or sets the index of the image displayed for the <c>ListMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ListMember.Qualifier">
            <summary>
            Gets or sets a string value that specifies access modifiers of the <c>ListMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ListMember.CustomData">
            <summary>
            Gets or sets an object that can hold a user defined data attached to the <c>ListMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ListMember.ParamText">
            <summary>
            Gets or sets a string value that specifies comma separated list of parameters of the <c>ListMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ListMember.Parameters">
            <summary>
            Gets or sets a collection of parameters of this <c>ListMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ListMember.Params">
            <summary>
            Gets or sets the <c>Parameters</c> property in the form of the ParameterMember array.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ListMember.Overloads">
            <summary>
            Gets or sets number of overloading members <c>ListMember</c> in the collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ListMember.OwnDescription">
            <summary>
            Gets or sets a boolean value that indicates whether <c>ListMember</c> Description property should return GetOwnDescription.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ListMember.OwnDescriptionText">
            <summary>
            Gets or sets a string value that represent default description text for <c>ListMember</c>
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ListMember.CurrentParamIndex">
            <summary>
            Gts or sets index of current parameter in the parameters collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ListMembers">
            <summary>
            Represents data collection related to popup list box controls.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ListMembers.#ctor">
            <summary>
            Initializes a new instance of the <c>ListMembers</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ListMembers.GetName(System.Int32)">
            <summary>
            Returns string reperesenting name of the item.
            </summary>
            <param name="index">Index of item within collection.</param>
            <returns>String representing name of specified item.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ListMembers.GetText(System.Int32)">
            <summary>
            Returns string representing default column.
            </summary>
            <param name="index">Index of item within collection.</param>
            <returns>Text representing default column.</returns>
            <remarks>In this class method returns the same value with <c>GetName</c> method.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.ListMembers.GetImageIndex(System.Int32)">
            <summary>
            Returns index of image that is displayed for item given by Index.
            </summary>
            <param name="index">Index of item within collection.</param>
            <returns>Index of image corresponding to given item.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ListMembers.GetDescription(System.Int32)">
            <summary>
            Returns a content of the column, named 'Description', of the specified item from the collection.
            </summary>
            <param name="index">Index of the item within the collection.</param>
            <returns>String content of specified column.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ListMembers.GetListMember(System.Int32)">
            <summary>
            Returns item from <c>ListMembers</c> collection by specified index.
            </summary>
            <param name="index">Specifies index of <c>IListMember</c> to return.</param>
            <returns><c>IListMember</c> at specified index.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ListMembers.CreateListMember">
            <summary>
            Initializes a new instance of the <c>ListMember</c> class with default settings.
            </summary>
            <returns><c>IListMember</c> that represents this new instance.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ListMembers.AddMember">
            <summary>
            Adds a new item to the <c>ListMembers</c> collection.
            </summary>
            <returns><c>IListMember</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ListMembers.InsertMember(System.Int32)">
            <summary>
            Inserts a new item to the specified position within the <c>ListMembers</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>IListMember</c> that is inserted.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ListMembers.GetColumnText(System.Int32,System.Int32)">
            <summary>
            Returns text from given list member in the specified column.
            </summary>
            <param name="index">Specifies index of list member.</param>
            <param name="column">Specifies index of column.</param>
            <returns>Text representing specified list member.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ListMembers.ColumnVisible(System.Int32)">
            <summary>
            Indicates whether specified column is visible.
            </summary>
            <param name="column">Specifies index of the column.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ListMembers.ResetShowHints">
            <summary>
            Resets the <c>ShowHints</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ListMembers.ResetShowParams">
            <summary>
            Resets the <c>ShowParams</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ListMembers.ResetShowQualifiers">
            <summary>
            Resets the <c>ShowQualifiers</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ListMembers.ResetShowResults">
            <summary>
            Resets the <c>ShowResults</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ListMembers.ColumnCount">
            <summary>
            Represents number of the columns. In this class <c>ColumnCount</c> always return 4.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ListMembers.ShowQualifiers">
            <summary>
            Gets or sets a value indicating whether the "Qualifiers" column is visible.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ListMembers.ShowResults">
            <summary>
            Gets or sets a value indicating whether the "Results" column is visible.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ListMembers.ShowParams">
            <summary>
            Gets or sets a value indicating whether the "Params" column is visible.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ListMembers.ShowHints">
            <summary>
            Gets or sets a value indicating whether popup listbox should display additional information for selected list member.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ListMembers.Item(System.Int32)">
            <summary>
            Provides an indexed access to <c>IListMember</c> objects stored in the collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ListMembers.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>ListMembers</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.ParameterInfo">
            <summary>
            Represents Parameter Info data related to popup window and popup hint controls.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.QuickInfo">
            <summary>
            Represents simple text data related to popup hint.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.QuickInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>QuickInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.QuickInfo.GetName(System.Int32)">
            <summary>
            Returns string reperesenting name of the item.
            </summary>
            <param name="index">Index of item within collection.</param>
            <returns>String representing name of specified item.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.QuickInfo.GetText(System.Int32)">
            <summary>
            Returns string representing default column.
            </summary>
            <param name="index">Index of item within collection.</param>
            <returns>Text representing default column.</returns>
            <remarks>In this class method returns the same value with <c>GetName</c> method.</remarks>
        </member>
        <member name="P:Stimulsoft.Editor.QuickInfo.Text">
            <summary>
            Gets or sets content of the <c>IQuickInfo</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.QuickInfo.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>QuickInfo</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.CodeCompletionRepository">
            <summary>
            Represents properties and methods to perform code completion functionality.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionRepository.#ctor(System.Boolean,Stimulsoft.Editor.ISyntaxTree)">
            <summary>
            Initializes a new instance of the <c>CodeCompletionRepository</c> class with specified parameters.
            </summary>
            <param name="caseSensitive">Specifies CaseSensitive property of this new instance.</param>
            <param name="syntaxTree">Specifies SyntaxTree property of this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionRepository.GetNodeType(System.String,Stimulsoft.Editor.ISyntaxNode,System.Drawing.Point)">
            <summary>
            Obtains information type of the <c>SyntaxNode</c>
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> representing a current language element.</param>
            <param name="text">Specifies source text.</param>
            <param name="position">Specifies starting position to search</param>
            <returns>Object represening type of found member.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionRepository.GetMemberType(Stimulsoft.Editor.ISyntaxNode,System.Drawing.Point,System.Object,System.String,Stimulsoft.Editor.StaticScope@)">
            <summary>
            Obtains information about a member of some language element.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> representing a current language element.</param>
            <param name="position">Specifies position of language element.</param>
            <param name="member">Specifies language element.</param>
            <param name="name">Specifies name of the member to locate.</param>
            <param name="scope">Retrieves information about search constraints for this language element.</param>
            <returns>Object represening information about found member.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionRepository.GetDescription(Stimulsoft.Editor.IListMembers,Stimulsoft.Editor.ISyntaxNode,System.Object,System.String,System.Boolean)">
            <summary>
            Obtains description of some language element.
            </summary>
            <param name="members">Specifies ListMembers interface used to get language-specific description.</param>
            <param name="node">Specifies <c>ISyntaxNode</c> that representing language element to describe.</param>
            <param name="member">Specifies language element to describe.</param>
            <param name="name">Specifies name of described language element.</param>
            <param name="fullDescription">Specifies whether description should include name and type of the found element.</param>
            <returns>String that describes specified language element.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionRepository.GetMemberType(System.String,Stimulsoft.Editor.ISyntaxNode,System.String@,System.Drawing.Point@,System.Drawing.Point@,Stimulsoft.Editor.StaticScope@)">
            <summary>
            Obtains information about some language element to perform code completion related operations.
            </summary>
            <param name="text">Specifies source text.</param>
            <param name="node">Specifies <c>ISyntaxNode</c> representing current language element.</param>
            <param name="name">Retrieves name of found language element.</param>
            <param name="position">Specifies position of found language element in the code text and updates it if needed.</param>
            <param name="endPos">Specifies end position of found language element in the code text and updates it if needed.</param>
            <param name="scope">Retrieves information about search constraints for the language element.</param>
            <returns>Object representing information about language element to complete.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionRepository.GetSpecialMemberType(System.String,Stimulsoft.Editor.ISyntaxNode,System.String@,System.Drawing.Point@,System.Drawing.Point@,Stimulsoft.Editor.StaticScope@)">
            <summary>
            Obtains information about some language element to perform code completion related operations in special cases.
            </summary>
            <param name="text">Specifies source text.</param>
            <param name="node">Specifies <c>ISyntaxNode</c> representing current language element.</param>
            <param name="name">Retrieves name of found language element.</param>
            <param name="position">Specifies position of found language element in the code text and updates it if needed.</param>
            <param name="endPos">Specifies position of found language element in the code text and updates it if needed.</param>
            <param name="scope">Retrieves information about search constraints for the language element.</param>
            <returns>Object representing information about language element to complete.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionRepository.GetMethodType(System.String,Stimulsoft.Editor.ISyntaxNode,System.String@,System.Drawing.Point@,System.Drawing.Point@,System.Int32@,System.Int32@,Stimulsoft.Editor.StaticScope@)">
            <summary>
            Obtains information about some method of specified language element.
            </summary>
            <param name="text">Specifies source text.</param>
            <param name="node">Specifies <c>ISyntaxNode</c> represening current language element.</param>
            <param name="name">Retrieves name of found method.</param>
            <param name="position">Retrieves start positon of the method in the code text.</param>
            <param name="endPos">Retrieves end position of the method in the code text.</param>
            <param name="paramIndex">Retrieves index of current parameter in the code text.</param>
            <param name="scope">Retrieves information about search constraints for the language element.</param>
            <returns>Object representing information about found method.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionRepository.FillMembers(Stimulsoft.Editor.ISyntaxNode,System.Drawing.Point,Stimulsoft.Editor.IListMembers,System.Object,System.String,Stimulsoft.Editor.StaticScope,System.Int32@)">
            <summary>
            Fills list members provider with list of its member, providing available choices for the specified language element.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> representing current language element.</param>
            <param name="position">Specifies position of language element in the text.</param>
            <param name="members">Specifies provider to fill with available members.</param>
            <param name="member">Specifies language element.</param>
            <param name="name">Specifies filter used to fill members.</param>
            <param name="scope">Specifies search constraints.</param>
            <param name="selIndex">Specifies index of default list member</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionRepository.FillMember(Stimulsoft.Editor.IListMembers,System.Object,System.String,Stimulsoft.Editor.StaticScope)">
            <summary>
            Obtains information about individual member of specified language element.
            </summary>
            <param name="members">Specifies provider to fill with available members.</param>
            <param name="member">Specifies language element.</param>
            <param name="name">Specifies name of member to retrieve.</param>
            <param name="scope">Specifies search constraints.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionRepository.FillMember(Stimulsoft.Editor.IListMembers,System.Object,System.String,System.Int32,Stimulsoft.Editor.StaticScope)">
            <summary>
            Obtains information about individual member of specified language element.
            </summary>
            <param name="members">Specifies provider to fill with available members.</param>
            <param name="member">Specifies language element.</param>
            <param name="name">Specifies name of member to retrieve.</param>
            <param name="paramIndex">Specifies index of current member parameter.</param>
            <param name="scope">Specifies search constraints.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionRepository.FindDeclaration(System.String,Stimulsoft.Editor.ISyntaxNode,System.Drawing.Point)">
            <summary>
            Obtains information about where the language element is declared.
            </summary>
            <param name="text">Specifies the source text.</param>
            <param name="node">Specifies <c>ISyntaxNode</c> representing a current language element.</param>
            <param name="position">Specifies position of language element.</param>
            <returns><c>ISyntaxNode</c> representing declaration of the language element.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionRepository.FindReferences(Stimulsoft.Editor.ISyntaxNode,Stimulsoft.Editor.ISyntaxNodes)">
            <summary>
            Locates all references to the node in the text.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> to find references.</param>
            <param name="references">Retrieves references to node.</param>
            <returns>Number of found references.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionRepository.RegisterSyntaxTree(Stimulsoft.Editor.ISyntaxTree)">
            <summary>
            Adds specified tree to the list of syntax trees for code-completion related purposes.
            </summary>
            <param name="tree">Specifies <c>ISyntaxTree</c> to add.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionRepository.UnregisterSyntaxTree(Stimulsoft.Editor.ISyntaxTree)">
            <summary>
            Removes specified tree from the list of syntax trees.
            </summary>
            <param name="tree">Specifies <c>ISyntaxTree</c> to remove.</param>
            <returns>True if succeed (tree is present in the tree list); otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionRepository.RegisterSnippet(System.String,System.Boolean)">
            <summary>
            When implemented by a class, registers snippet to be displayed in code completion window
            </summary>
            <param name="snippet">Specifies name of snippet to be displayed</param>
            <param name="isStatement">Specifies whether snippet will have statement image index</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionRepository.UnregisterSnippet(System.String)">
            <summary>
            When implemented by a class, removes specified snippet from the list of snippets.
            </summary>
            <param name="snippet">Specifies name of snippet to be removed</param>
            <returns>True if succeed; otherwise false</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionRepository.GetCodeSnippets(System.String)">
            <summary>
            Returns code snippets for the given language.
            </summary>
            <param name="language">Represents a language</param>
            <returns>ICodeSnippetsProvider instance for a given language.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionRepository.FillBaseMembers">
            <summary>
            Indicates whether members of <c>Object</c> class should be present in the member collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionRepository.CaseSensitive">
            <summary>
            Indicates whether searching for language element's members should be case sensitive.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionRepository.SyntaxTree">
            <summary>
            Gets or sets a hierarchical collection of <c>ISyntaxNode</c> elements.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionRepository.SyntaxTrees">
            <summary>
            Gets or sets list of <c>ISyntaxTree</c> objects attached to this <c>CodeCompletionRepository</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.CodeCompletionRepository.Snippets">
            <summary>
            Represents a collection of snippets that are displayed in code completion window.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.CodeCompletionRepository.MemberLookup">
            <summary>
            Occurs while trying to obtain information about some member of language element.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.CodeCompletionRepository.DescriptionLookup">
            <summary>
            Occurs while trying to obtain description of some language element.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.Lexer">
            <summary>
            Represents class that performs lexical analysis of the specified text.
            </summary>
            <remarks>Lexer class is designed to recognize source code syntax, such as reserved words, comments, numbers, strings and any other syntax structures. Use Scheme property to specify lexical analisys rules.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.Lexer.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <c>Lexer</c> class with specified container.
            </summary>
            <param name="container">Specifies IContainer that contains this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Lexer.#ctor">
            <summary>
            Initializes a new instance of the <c>Lexer</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Lexer.BeginUpdate">
            <summary>
            Prevents object state updating until calling <c>EndUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Lexer.EndUpdate">
            <summary>
            Re-enables object state updating, that was turn of by calling <c>BeginUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Lexer.AddNotifier(Stimulsoft.Editor.INotifier)">
            <summary>
            Adds new handler to respond a notification.
            </summary>
            <param name="sender">Specifies an object that can respond a notification.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Lexer.RemoveNotifier(Stimulsoft.Editor.INotifier)">
            <summary>
            Exclude specified handler from notification handlers list.
            </summary>
            <param name="sender">Specifies an object that can respond a notification.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Lexer.Notify">
            <summary>
            Notifies all notifiers about updating object state.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Lexer.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Lexer.ParseText(System.Int32,System.Int32,System.String,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Performs lexical analysis of given text.
            </summary>
            <param name="state">Specifies start lexical state.</param>
            <param name="line">Specifies current line within the text.</param>
            <param name="str">Text to analyse.</param>
            <param name="pos">Starting position.</param>
            <param name="len">Integer value to receive length of parsed element.</param>
            <param name="style">Retrieves style of text being parsed.</param>
            <returns>Final lexical state.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Lexer.ParseText(System.Int32,System.Int32,System.String,System.Int16[]@)">
            <summary>
            Performs lexical analysis of given text.
            </summary>
            <param name="state">Specifies start lexical state.</param>
            <param name="line">Specifies current line within the text.</param>
            <param name="str">Text to analyse.</param>
            <param name="colorData">Receives color data representing lexical information of the given text.</param>
            <returns>Final lexical state.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Lexer.ShouldSerializeToCode">
            <summary>
            Indicates whether the <c>Lexer</c> content should be persisted.
            </summary>
            <returns>In this class method always return true.</returns>
            <remarks>Descendant classes can override this method.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.Lexer.SaveScheme(System.String)">
            <summary>
            Saves <c>LexScheme</c> to the specified file.
            </summary>
            <param name="fileName">Name of the file to save scheme.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Lexer.LoadScheme(System.String)">
            <summary>
            Loads <c>LexScheme</c> from the specified file.
            </summary>
            <param name="fileName">Name of the file to load scheme.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Lexer.SaveScheme(System.IO.TextWriter)">
            <summary>
            Saves <c>LexScheme</c> to the specified destination.
            </summary>
            <param name="writer">The TextWriter object to write scheme.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Lexer.SaveScheme(System.IO.TextWriter,Stimulsoft.Editor.LexScheme)">
            <summary>
            Saves specified scheme to the specified destination.
            </summary>
            <param name="writer">The TextWriter object to write scheme.</param>
            <param name="scheme">LexScheme to save.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Lexer.LoadScheme(System.IO.TextReader)">
            <summary>
            Loads <c>LexScheme</c> from the specified source.
            </summary>
            <param name="reader">The TextReader object to read scheme.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Lexer.ResetDefaultState">
            <summary>
            Resets the <c>DefaultState</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Lexer.XmlScheme">
            <summary>
            Gets or sets an xml representation of <c>Scheme</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Lexer.Scheme">
            <summary>
            Gets or sets list of rules for lexical analysis.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Lexer.LexScheme">
            <summary>
            Gets or sets list of rules for lexical analysis.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Lexer.DefaultState">
            <summary>
            Gets or sets default state of the <c>Lexer</c>.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.Lexer.TextParsed">
            <summary>
            Occurs when text line is parsed, allowing to modify colors/styles information about the parsed line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Lexer.XmlInfo">
            <summary>
            Gets or sets an xml representation of this <c>Lexer</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:Stimulsoft.Editor.ColorThemes">
            <summary>
            Represents a collection of color themes.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ColorThemes.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ColorThemes.ActiveThemeIndex">
            <summary>
            Gets or sets the index of the active color theme.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ColorThemes.ActiveTheme">
            <summary>
            Gets or sets the active color theme.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ColorThemes.Themes">
            <summary>
            Gets or sets an array of ColorTheme objects.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ColorThemes.Add(Stimulsoft.Editor.IColorTheme)">
            <summary>
            Adds a ColorTheme object to the end of the list.
            </summary>
            <param name="colorTheme">ColorTheme object.</param>       
        </member>
        <member name="M:Stimulsoft.Editor.ColorThemes.Remove(System.Int32)">
            <summary>
            Removes the ColorTheme object at the specified index.
            </summary>
            <param name="name">Index of the ColorTheme object to remove.</param>
            <returns>true - index parameter was valid and ColorTheme object was removed. false - index parameter was invalid and no ColorTheme object was removed.</returns>        
        </member>
        <member name="M:Stimulsoft.Editor.ColorThemes.Clone">
            <summary>
            
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ColorTheme">
            <summary>
            Represents a single color theme.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ColorTheme.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ColorTheme.#ctor(System.String,System.Boolean,System.String,System.Single,System.Drawing.FontStyle,Stimulsoft.Editor.LexStyle[])">
            <summary>
            Constructor.
            </summary>
            <param name="name">Color theme name.</param>
            <param name="readOnly">A flag that indicates whether or not the color theme should be modified.</param>
            <param name="fontName">Font name.</param>
            <param name="fontSize">Font size.</param>
            <param name="fontStyle">Font style.</param>
            <param name="lexStyles">LexStyle array.</param>
        </member>
        <member name="P:Stimulsoft.Editor.ColorTheme.Name">
            <summary>
            Gets or sets the name of the color theme.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ColorTheme.ReadOnly">
            <summary>
            Gets or sets a bool value that indicates whether
            or not the color theme should be modified.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ColorTheme.Font">
            <summary>
            Gets or sets the font used for the color theme.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ColorTheme.FontName">
            <summary>
            Property for persisting the font name. Reserved for internal use. This property is used by the XmlSerializer.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ColorTheme.FontSize">
            <summary>
            Property for persisting the font size. Reserved for internal use. This property is used by the XmlSerializer.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ColorTheme.FontStyle">
            <summary>
            Property for persisting the FontStyle. Reserved for internal use. This property is used by the XmlSerializer.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ColorTheme.LexStyles">
            <summary>
            Gets or sets the LexStyle array used for the 
            color theme.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ColorTheme.GetLexStyle(System.String,Stimulsoft.Editor.ILexStyle@)">
            <summary>
            Gets the LexStyle object that corresponds to the name parameter.
            </summary>
            <param name="lexStyleName">Name of the LexStyle object such as "idents".</param>
            <returns>true - LexStyle object found, false - LexStyle object not found.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ColorTheme.Contains(System.String)">
            <summary>
            Determines whether the LexStyle array contains a specific lex style using the name of the lex style.
            </summary>
            <param name="lexStyleName">Name of the LexStyle object such as "idents".</param>
            <returns>true - array contains the specified LexStyle object, false - array does not contain the specified LexStyle object.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.ColorTheme.Item(System.String)">
            <summary>
            Specifies an Item indexer that uses the name of the LexStyle as an index.
            </summary>
            <param name="lexStyleName">Name of the LexStyle such as "ident".</param>
            <returns>LexStyle object that corresponds to the lexStyleName parameter, or null for an invalid name.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ColorTheme.Clone">
            <summary>
            Returns a deep copy of the ColorTheme instance on which it is invoked.
            </summary>
            <returns>System.Object that can be casted to ColorTheme.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.LexStyle">
            <summary>
            Represents an individual lexical style with the collection of lexical styles.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LexStyle.#ctor">
            <summary>
            Initializes a new instance of the <c>LexStyle</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LexStyle.#ctor(Stimulsoft.Editor.ILexScheme)">
            <summary>
            Initializes a new instance of the <c>LexStyle</c> class with specified owner.
            </summary>
            <param name="scheme"><c>ILexScheme</c> that contains this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LexStyle.Update">
            <summary>
            Processes changes of any <c>LexStyle</c> properties.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LexStyle.Assign(Stimulsoft.Editor.ILexStyle)">
            <summary>
            Copies the contents of another <c>ILexStyle</c> object.
            </summary>
            <param name="source">Specifies <c>ILexStyle</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LexStyle.ResetBackColor">
            <summary>
            Resets the <c>BackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LexStyle.ResetForeColor">
            <summary>
            Resets the <c>ForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LexStyle.ResetFontStyle">
            <summary>
            Resets the <c>FontStyle</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LexStyle.ResetPlainText">
            <summary>
            Resets the <c>PlainText</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LexStyle.ShouldSerializeXmlForeColor">
            <summary>
            Indicates whether the <c>XmlForeColor</c> property should be persisted.
            </summary>
            <returns>True if <c>XmlForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LexStyle.ShouldSerializeXmlBackColor">
            <summary>
            Indicates whether the <c>XmlBackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>XmlBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LexStyle.ShouldSerializePlainText">
            <summary>
            Indicates whether the <c>PlainText</c> property should be persisted.
            </summary>
            <returns>True if <c>PlainText</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LexStyle.ShouldSerializeFontStyle">
            <summary>
            Indicates whether the <c>FontStyle</c> property should be persisted.
            </summary>
            <returns>True if <c>FontStyle</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.LexStyle.Name">
            <summary>
            Gets or sets name of the <c>LexStyle</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexStyle.Desc">
            <summary>
            Gets or sets a description of the <c>LexStyle</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexStyle.ForeColor">
            <summary>
            Gets or sets a foreground color of the <c>LexStyle</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexStyle.BackColor">
            <summary>
            Gets or sets a background color of the <c>LexStyle</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexStyle.XmlForeColor">
            <summary>
            Gets or sets string representation of the <c>ForeColor</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexStyle.XmlBackColor">
            <summary>
            Gets or sets string representation of the <c>BackColor</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexStyle.FontStyle">
            <summary>
            Gets or sets a font style of the <c>LexStyle</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexStyle.Index">
            <summary>
            Gets or sets index of this <c>LexStyle</c> within the lexical style collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexStyle.PlainText">
            <summary>
            Gets or sets value indicating whether Edit control should use text formatting rules, like checking spelling.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexStyle.Scheme">
            <summary>
            Gets or sets <c>ILexScheme</c> that owns this <c>LexStyle</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexStyle.ForeColorEnabled">
            <summary>
            Gets or sets a flag that indicates whether the GUI control 
            that corresponds to the ForeColor property should be enabled or disabled.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexStyle.BackColorEnabled">
            <summary>
            Gets or sets a flag that indicates whether the GUI control 
            that corresponds to the BackColor property should be enabled or disabled.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexStyle.BoldEnabled">
            <summary>
            Gets or sets a flag that indicates whether the GUI control 
            that corresponds to the Bold property should be enabled or disabled.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexStyle.ItalicEnabled">
            <summary>
            Gets or sets a flag that indicates whether the GUI control 
            that corresponds to the Italic property should be enabled or disabled.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexStyle.UnderlineEnabled">
            <summary>
            Gets or sets a flag that indicates whether the GUI control 
            that corresponds to the Underline property should be enabled or disabled.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.LexReswordSet">
            <summary>
            Represents class to specify keywords for <c>ILexSyntaxBlock.LexReswordSets</c> collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LexReswordSet.#ctor">
            <summary>
            Initializes a new instance of the <c>LexReswordSet</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LexReswordSet.#ctor(Stimulsoft.Editor.ILexScheme,Stimulsoft.Editor.ILexReswordSets,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>LexReswordSet</c> class with specified parameters.
            </summary>
            <param name="scheme">Specifies <c>ILexScheme</c> that owns this new instance.</param>
            <param name="caseSensitive">Indicates whether this new instance is case-sensitive or not.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LexReswordSet.AddResword(System.String)">
            <summary>
            Adds a new element to the resword collection.
            </summary>
            <param name="resword">Resword to add.</param>
            <returns>Index of added element in the resword collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LexReswordSet.Clear">
            <summary>
            Removes all items from Reswords collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LexReswordSet.FindResword(System.String)">
            <summary>
            Locates given resword in Reswords collection.
            </summary>
            <param name="resword">Resword to locate.</param>
            <returns>True if resword presents in the Reswords collection; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.LexReswordSet.CaseSensitive">
            <summary>
            Gets or sets a value indicating whether <c>LexReswordSet</c> is case-sensitive or not.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexReswordSet.ReswordStyle">
            <summary>
            Gets or sets an <c>ILexStyle</c> of resword collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexReswordSet.Name">
            <summary>
            Gets or set name for the <c>LexReswordSet</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexReswordSet.Index">
            <summary>
            Represents index of the <c>LexReswordSet</c> within the reswords collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexReswordSet.ReswordStyleIndex">
            <summary>
            Gets or sets index of the ReswordStyle within the lexical style collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexReswordSet.Reswords">
            <summary>
            Gets or sets a collection of keywords for the <c>LexReswordSet</c>.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.LexSyntaxBlock">
            <summary>
            Represents an individual syntax block in the collection of syntax blocks.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LexSyntaxBlock.#ctor">
            <summary>
            Initializes a new instance of the <c>LexSyntaxBlock</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LexSyntaxBlock.#ctor(Stimulsoft.Editor.ILexScheme,Stimulsoft.Editor.ILexSyntaxBlocks)">
            <summary>
            Initializes a new instance of the <c>LexSyntaxBlock</c> class with specified owner.
            </summary>
            <param name="scheme"><c>ILexScheme</c> that owns this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LexSyntaxBlock.FindResword(System.String)">
            <summary>
            Locates <c>LexReswordSet</c> containing given resword.
            </summary>
            <param name="resword">The resword to search for.</param>
            <returns>Index of <c>LexReswordSet</c> if resword collection contains specified resword; otherwise - 1.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LexSyntaxBlock.AddExpression(System.String)">
            <summary>
            Adds new element to the expression collection.
            </summary>
            <param name="expression">Regular expression to add.</param>
            <returns>Index of added element in the expression collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LexSyntaxBlock.ShouldSerializeReswords">
            <summary>
            Indicates whether the <c>Reswords</c> property should be persisted.
            </summary>
            <returns>Always return false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LexSyntaxBlock.ShouldSerializeReswordSets">
            <summary>
            Indicates whether the <c>ReswordSets</c> property should be persisted.
            </summary>
            <returns>True if <c>ReswordSets</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.LexSyntaxBlock.Name">
            <summary>
            Gets or sets name of the <c>LexSyntaxBlock</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexSyntaxBlock.Desc">
            <summary>
            Gets or sets description of the <c>LexSyntaxBlock</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexSyntaxBlock.CaseSensitive">
            <summary>
            Gets or sets a value indicating whether <c>LexSyntaxBlock</c> is case-sensitive or not.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexSyntaxBlock.Style">
            <summary>
            Gets or sets an <c>ILexStyle</c> object, applicable for text that matches <c>LexSyntaxBlock</c> expression.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexSyntaxBlock.LeaveState">
            <summary>
            Gets or sets <c>ILexState</c> object that specifies lexical resulting state after lexical analyzer locates text, that matches to the <c>LexSyntaxBlock.Expression</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexSyntaxBlock.LexStyleIndex">
            <summary>
            Represents index of the <c>Style</c> within the style collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexSyntaxBlock.LeaveStateIndex">
            <summary>
            Represents index of the <c>LeaveState</c> within the state collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexSyntaxBlock.LexReswordSets">
            <summary>
            Gets or sets collection of the <c>ILexReswordSet</c> object containing reserwed words.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexSyntaxBlock.ReswordSets">
            <summary>
            Gets or sets the <c>LexReswordSets</c> property in the form of the LexReswordSet array.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexSyntaxBlock.Expressions">
            <summary>
            Gets or sets collection of the expressions used by <c>Lexer</c> to parse the text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexSyntaxBlock.Expression">
            <summary>
            Represents a collective regular expression pattern for the <c>LexSyntaxBlock.Expressions</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexSyntaxBlock.Index">
            <summary>
            Represents index of the <c>LexSyntaxBlock</c> within the lexical syntax block collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexSyntaxBlock.Scheme">
            <summary>
            Gets or sets <c>ILexScheme</c> that owns this <c>LexSyntaxBlock</c>.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.LexState">
            <summary>
            Represents an individual lexical state with collection of lexical states.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LexState.#ctor">
            <summary>
            Initializes a new instance of the <c>LexState</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LexState.#ctor(Stimulsoft.Editor.ILexScheme)">
            <summary>
            Initializes a new instance of the <c>LexState</c> class with specified owner.
            </summary>
            <param name="scheme"><c>ILexScheme</c> that owns this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LexState.FindSyntaxBlock(System.String)">
            <summary>
            Finds <c>ILexSyntaxBlock</c> by its name.
            </summary>
            <param name="name">Specifis name of the <c>ILexSyntaxBlock</c>.</param>
            <returns><c>ILexSyntaxBlock</c> that is found.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LexState.ResetCaseSensitive">
            <summary>
            Resets the <c>CaseSensitive</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexState.Name">
            <summary>
            Gets or sets name of the <c>LexState</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexState.Desc">
            <summary>
            Gets or sets description of the <c>ILexState</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexState.CaseSensitive">
            <summary>
            Gets or sets a value indicating whether the analizer should perform case sensitive parsing for this <c>LexState</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexState.LexSyntaxBlocks">
            <summary>
            Gets or sets a collection of lexical syntax blocks.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexState.SyntaxBlocks">
            <summary>
            Gets or sets <c>LexSyntaxBlocks</c> property in the form of LexSyntaxBlock array.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexState.Expression">
            <summary>
            Represents a collective regular expression pattern for the <c>LexState</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexState.Regex">
            <summary>
            Represents a regular expression that contains <c>Expression</c> as a pattern.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexState.Index">
            <summary>
            Represents index of the <c>LexState</c> within the lexical state collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexState.Scheme">
            <summary>
            Gets or sets <c>ILexScheme</c> that owns this <c>LexState</c>.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.LexStyles">
            <summary>
            Provides an indexed access to individual <c>ILexStyle</c> objects.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LexStyles.#ctor(Stimulsoft.Editor.ILexScheme)">
            <summary>
            Initializes a new instance of the <c>LexStyles</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ILexScheme</c> that owns this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LexStyles.AddLexStyle">
            <summary>
            Creates new <c>ILexStyle</c> and adds it to <c>LexScheme.LexStyles</c> collection.
            </summary>
            <returns><c>ILexStyle</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LexStyles.InsertLexStyle(System.Int32)">
            <summary>
            Inserts a new item to the specified position within the <c>ILexStyles</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ILexStyle</c> that is inserted.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LexStyles.FindLexStyle(System.String)">
            <summary>
            Finds <c>ILexStyle</c> by its name.
            </summary>
            <param name="name">Name of the <c>ILexStyle</c>.</param>
            <returns><c>ILexStyle</c> that is found.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.LexStyles.Item(System.Int32)">
            <summary>
            Provides an indexed access to <c>ILexStyle</c> objects stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.LexStates">
            <summary>
            Provides an indexed access to individual <c>ILexState</c> objects.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LexStates.#ctor(Stimulsoft.Editor.ILexScheme)">
            <summary>
            Initializes a new instance of the <c>LexStates</c> with specified owner.
            </summary>
            <param name="owner">Specifies <c>ILexScheme</c> that owns this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LexStates.AddLexState">
            <summary>
            Creates new <c>ILexState</c> and adds it to <c>LexScheme.LexStates</c> collection.
            </summary>
            <returns><c>ILexState</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LexStates.InsertLexState(System.Int32)">
            <summary>
            Inserts a new item to the specified position within the <c>ILexStates</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ILexState</c> that is inserted.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LexStates.FindLexState(System.String)">
            <summary>
            Finds <c>ILexState</c> by its name.
            </summary>
            <param name="name">Name of the <c>ILexState</c>.</param>
            <returns><c>ILexState</c> that is found.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.LexStates.Item(System.Int32)">
            <summary>
            Provides an indexed access to <c>ILexState</c> objects stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.LexSyntaxBlocks">
            <summary>
            Provides an indexed access to individual <c>ILexSyntaxBlock</c> objects.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LexSyntaxBlocks.#ctor(Stimulsoft.Editor.ILexState,Stimulsoft.Editor.ILexScheme)">
            <summary>
            Initializes a new instance of the <c>LexSyntaxBlocks</c> class with specifies parameters.
            </summary>
            <param name="state">Specifies <c>ILexState</c> to which this new instance belongs.</param>
            <param name="owner">Specifies <c>ILexScheme</c> that owns this new instance.</param>
        </member>
        <member name="M:Stimulsoft.Editor.LexSyntaxBlocks.AddLexSyntaxBlock">
            <summary>
            Creates new <c>ILexSyntaxBlock</c> and adds it to the <c>LexSyntaxBlocks</c> collection.
            </summary>
            <returns><c>ILexSyntaxBlock</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LexSyntaxBlocks.InsertLexSyntaxBlock(System.Int32)">
            <summary>
            Inserts a new item to the specified position within the <c>ILexSyntaxBlocks</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ILexSyntaxBlock</c> that is inserted.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LexSyntaxBlocks.FindSyntaxBlock(System.String)">
            <summary>
            Finds <c>ILexSyntaxBlock</c> by its name.
            </summary>
            <param name="name">Specifis name of the <c>ILexSyntaxBlock</c>.</param>
            <returns><c>ILexSyntaxBlock</c> that is found.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.LexSyntaxBlocks.Item(System.Int32)">
            <summary>
            Provides an indexed access to <c>ILexSyntaxBlock</c> objects stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.LexReswordSets">
            <summary>
            Represents properties and methods to provide an indexed access to individual <c>ILexReswordSet</c> objects.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LexReswordSets.AddLexReswordSet">
            <summary>
            Adds a new item to the end of the <c>ILexReswordSets</c> collection.
            </summary>
            <returns><c>ILexReswordSet</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LexReswordSets.InsertLexReswordSet(System.Int32)">
            <summary>
            Inserts a new item to the specified position within the <c>ILexReswordSets</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ILexReswordSet</c> that is inserted.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LexReswordSets.FindResword(System.String)">
            <summary>
            Locates <c>ILexReswordSet</c> containing given resword.
            </summary>
            <param name="resword">The resword to search for.</param>
            <returns>Index of <c>ILexReswordSet</c> if resword collection contains specified resword; otherwise - 1.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.LexReswordSets.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to <c>ILexReswordSet</c> objects stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.LexScheme">
            <summary>
            Represents class contains rules for text lexical analysis.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LexScheme.#ctor">
            <summary>
            Initializes a new instance of the <c>LexScheme</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LexScheme.ClearScheme">
            <summary>
            Removes all states and styles from this <c>LexScheme</c> and sets other properties to default values.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.LexScheme.GetLexState(System.Int32)">
            <summary>
            Retrieves lexical state from states collection by its index.
            </summary>
            <param name="index">Specifies number of lexical state within the collection of states.</param>
            <returns><c>ILexState</c> at specified index.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LexScheme.GetLexStyle(System.Int32)">
            <summary>
            Retrieves lexical style from styles collection by its index.
            </summary>
            <param name="index">Specifies number of lexical style within the collection of styles.</param>
            <returns><c>ILexStyle</c> at specified index.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LexScheme.IsPlainText(System.Int32)">
            <summary>
            Indicates whether <c>PlainText</c> property of lexical style given by its index is true.
            </summary>
            <param name="style">index of lexical style to check-up.</param>
            <returns>True if lexical style <c>PlainText</c> property is true; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.LexScheme.IsEmpty">
            <summary>
            Indicates whether <c>LexScheme</c> is empty , that is does not contain any styles, states, author, copyright, and description information.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Stimulsoft.Editor.LexScheme.Author">
            <summary>
            Gets or sets author of the <c>LexScheme</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexScheme.Name">
            <summary>
            Gets or sets <c>LexScheme</c> name.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexScheme.Desc">
            <summary>
            Gets or sets description of the <c>LexScheme</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexScheme.Copyright">
            <summary>
            Gets or sets copyright of the <c>LexScheme</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexScheme.FileExtension">
            <summary>
            Gets or sets string value indicating associated file extension of the <c>ILexScheme</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexScheme.FileType">
            <summary>
            Gets or sets string value indicating associated file type of the <c>ILexScheme</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexScheme.Version">
            <summary>
            Gets or sets version of the <c>LexScheme</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexScheme.LexStyles">
            <summary>
            Gets or sets collection of lexical styles.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexScheme.LexStates">
            <summary>
            Gets or sets collection of lexical states.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexScheme.Styles">
            <summary>
            Gets or sets <c>LexStyles</c> property in the form of LexStyle array.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.LexScheme.States">
            <summary>
            Gets or sets <c>LexStates</c> property in the form of LexState array.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.Parser">
            <summary>
            Represents class that performs lexical analysis of specified text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Parser.#ctor">
            <summary>
            Initializes a new instance of the <c>Parser</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Parser.Reset(System.Int32,System.Int32,System.Int32)">
            <summary>
            Resets <c>Parser</c> to the specified position.
            </summary>
            <param name="line">Specifies new line index.</param>
            <param name="pos">Specifies new position of character within the line.</param>
            <param name="state">Specifies new <c>State</c>.</param>
        </member>
        <member name="M:Stimulsoft.Editor.Parser.Reset">
            <summary>
            Resets <c>Parser</c> to the start position.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Parser.NextToken">
            <summary>
            Parses text from current position to the next token and updates <c>TokenPos</c>, <c>CurrentPos</c> and <c>TokenString</c> properties.
            </summary>
            <returns>Token that corresponds to the next position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Parser.NextToken(System.String@)">
            <summary>
            Parses text from current position to the next token and updates <c>TokenPos</c>, <c>CurrentPos</c> and <c>TokenString</c> properties.
            </summary>
            <param name="str">Retrieves token string for the next token.</param>
            <returns>Token that corresponds to the next position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Parser.PeekToken">
            <summary>
            Parses next portion of the text, remaning current position unchanged.
            </summary>
            <returns>Token that corresponds to the next position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Parser.PeekToken(System.String@)">
            <summary>
            Parses next portion of the text, remaning current position unchanged.
            </summary>
            <param name="str">Retrieves token string for the next token.</param>
            <returns>Token that corresponds to the next position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Parser.PeekValidToken">
            <summary>
            Parses to the next valid (non-whitespace, non-comment) portion of the text, remaning current position unchanged.
            </summary>
            <returns>Next valid token.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Parser.PeekValidToken(System.String@)">
            <summary>
            Parses to the next valid (non-whitespace, non-comment) portion of the text, remaning current position unchanged.
            </summary>
            <param name="str">Retrieves token string for the next valid token.</param>
            <returns>Next valid token.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Parser.NextValidToken">
            <summary>
            Parses text from current position to the next valid (non-whitespace, non-comment) token and updates <c>TokenPos</c>, <c>CurrentPos</c> and <c>TokenString</c> properties.
            </summary>
            <returns>Next valid token.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Parser.NextValidToken(System.String@)">
            <summary>
            Parses text from current position to the next valid (non-whitespace, non-comment) token and updates <c>TokenPos</c>, <c>CurrentPos</c> and <c>TokenString</c> properties.
            </summary>
            <param name="str">Retrieves token string for the next valid token.</param>
            <returns>Next valid token.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.Parser.SaveState">
            <summary>
            Saves current <c>Parser</c> state and position.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Parser.RestoreState">
            <summary>
            Restores <c>Parser</c> state and position stored by <c>SaveState</c> method.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.Parser.RestoreState(System.Boolean)">
            <summary>
            Restores <c>Parser</c> state and position stored by <c>SaveState</c> method.
            </summary>
            <param name="restore">Indicates whether <c>Parser</c> should restore it's state to previous position or simply delete information about previously stored state.</param>
        </member>
        <member name="P:Stimulsoft.Editor.Parser.Eof">
            <summary>
            Indicates whether current position is out of the text, signalling that whole text is parsed.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Parser.Token">
            <summary>
            Represents token (number of style in the class style collection) related to the current position in the parsed text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Parser.State">
            <summary>
            Represents current <c>Parser</c> state.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Parser.TokenString">
            <summary>
            Represents text of the current syntax token.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Parser.TokenPosition">
            <summary>
            Represents start position of the current token.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Parser.CurrentPosition">
            <summary>
            Represents position of current character within the current line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Parser.Strings">
            <summary>
            Gets or sets a list of strings to parse.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.Parser.Lines">
            <summary>
            Gets or sets a list of string to parse represented as string array.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.OutlineRange">
            <summary>
            Represents individual outlining section that can appear in the Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.OutlineRange.#ctor">
            <summary>
            Initializes a new instance of the <c>OutlineRange</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.OutlineRange.#ctor(System.Drawing.Point,System.Drawing.Point,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <c>OutlineRange</c> class with specified parameters.
            </summary>
            <param name="start">Specifies start position of the text to outline.</param>
            <param name="end">Specifies end position of the text to outline.</param>
            <param name="level">Specifies level of outline nesting for new instance.</param>
            <param name="text">Specifies text substituting collapsed outline section.</param>
        </member>
        <member name="M:Stimulsoft.Editor.OutlineRange.#ctor(System.Drawing.Point,System.Drawing.Point,System.Int32,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>OutlineRange</c> class with specified parameters.
            </summary>
            <param name="start">Specifies start position of the text to outline.</param>
            <param name="end">Specifies end position of the text to outline.</param>
            <param name="level">Specifies level of outline nesting for new instance.</param>
            <param name="text">Specifies text substituting collapsed outline section.</param>
            <param name="visible">Indicates whether this new instance is visible (expanded).</param>
        </member>
        <member name="P:Stimulsoft.Editor.OutlineRange.Text">
            <summary>
            Represents text substituting collapsed outline section.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.OutlineRange.DisplayText">
            <summary>
            Represents text substituting collapsed outline section if outline buttons are displayed.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.OutlineRange.Visible">
            <summary>
            Gets or sets a value indicating whether outline section is visible (expanded).
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.OutlineRange.Level">
            <summary>
            Represents level of outline nesting for the outline section.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.SnippetRange">
            <summary>
            Represents individual outlining section that can appear in the Edit control.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SnippetRange.#ctor(System.Drawing.Point,System.Drawing.Point,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>SnippetRange</c> class with specified parameter.
            </summary>
            <param name="start">Specifies start position of the code snippet.</param>
            <param name="end">Specifies end position of the code snippet.</param>
            <param name="id">Specifies id of the code snippet.</param>
            <param name="tooltip">Specifies short description of the code snippet.</param>
        </member>
        <member name="P:Stimulsoft.Editor.SnippetRange.Id">
            <summary>
            Represents name of code snippet.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SnippetRange.Tooltip">
            <summary>
            Represents short description of the code snippet.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SnippetRange.IsEditable">
            <summary>
            Represents short description of the code snippet.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.StringList">
            <summary>
            Represents collection containing list of strings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.StringList.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetList</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.StringList.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <c>CodeSnippetList</c> class with specified reader.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.StringList.LoadFile(System.String)">
            <summary>
            Loads the contents of the specified file.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.StringList.LoadFile(System.String,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified file with specified encoding.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.StringList.LoadStream(System.IO.TextReader)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.StringList.LoadStream(System.IO.Stream)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.StringList.LoadStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.StringList.SaveFile(System.String)">
            <summary>
            Saves text content to the specific file.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.StringList.SaveFile(System.String,System.Text.Encoding)">
            <summary>
            Saves text content to the specific file with specific encoding.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.StringList.SaveStream(System.IO.TextWriter)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.StringList.SaveStream(System.IO.Stream)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.StringList.SaveStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.StringList.Item(System.Int32)">
            <summary>
            Provides an indexed access to individual strings stored in the collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.StringList.Text">
            <summary>
            Gets or sets the strings in the <c>SyntaxStrings</c> as a single string with the individual strings delimited by carriage returns.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.StringList.LineTerminator">
            <summary>
            Gets or sets a string value that terminates line.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.SyntaxErrorList">
            <summary>
            Represents collection containing list of syntax errors.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxErrorList.#ctor">
            <summary>
            Initializes a new instance of the <c>SyntaxErrorList</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxErrorList.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Changes positions of any syntax errors located next to the specified position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies start position to change.</param>
            <param name="y">The Y-constituent of the Point value that specifies start position to change.</param>
            <param name="deltaX">Specifies horizontal displacement.</param>
            <param name="deltaY">Specifies vertical displacement.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxErrorList.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            Removes all syntax errors from the error collection which position in the specified rectangle.
            </summary>
            <param name="rect">Specified rectangle to remove syntax errors.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxErrorList.Sort">
            <summary>
            Sorts the syntax errors.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxErrorList.FindError(System.Drawing.Point,System.Boolean,System.Int32@)">
            <summary>
            Locates error at specified position.
            </summary>
            <param name="position">Position to locate error.</param>
            <param name="exact">Specifies whether search should be precise.</param>
            <param name="index">Receives index of syntax error in the error collection.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.CodeSnippetList">
            <summary>
            Represents collection containing list of code snippet literals.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetList.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetList</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetList.NeedClear(System.Int32)">
            <summary>
            Obtains boolean value indicating whether all snippets need removing from the list.
            </summary>
            <param name="y">Line being changed.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetList.NeedClear(System.Drawing.Rectangle)">
            <summary>
            Obtains boolean value indicating whether all snippets need removing from the list.
            </summary>
            <param name="rect">Rectangle specifying block being deleted.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetList.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Changes positions of any code snippet located next to the specified position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies start position to change.</param>
            <param name="y">The Y-constituent of the Point value that specifies start position to change.</param>
            <param name="deltaX">Specifies horizontal displacement.</param>
            <param name="deltaY">Specifies vertical displacement.</param>
            <param name="preserveBounds">Specifies whether snippet bounds should be preserved.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetList.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            Removes all snippets from the snippet collection which position in the specified rectangle.
            </summary>
            <param name="rect">Specified rectangle to remove snippets.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetList.GetFirstSnippet">
            <summary>
            Finds first snippet in snippet collection with nonemtpy id.
            </summary>
            <returns>Index of found snippet.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetList.GetNextSnippet(System.Int32)">
            <summary>
            Finds next snippet in snippet collection with diferent id.
            </summary>
            <param name="index">Specified index of snippet to search from.</param>
            <returns>Index of found snippet.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetList.GetPrevSnippet(System.Int32)">
            <summary>
            Finds previous snippet in snippet collection with diferent id.
            </summary>
            <param name="index">Specified index of snippet to search from.</param>
            <returns>Index of found snippet.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetList.IsFirstSnippet(Stimulsoft.Editor.IRange)">
            <summary>
            Checks whether code snippet represents first snippet in subset of snippets that have the same ids.
            </summary>
            <param name="range">Specified the code snippet</param>
            <returns>Returns True if snippet represents the first snippet with unique id.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetList.IsFirstSnippet(System.Int32)">
            <summary>
            Checks whether code snippet represents first snippet in subset of snippets that have the same ids.
            </summary>
            <param name="index">Specified index of the snippet.</param>
            <returns>Returns True if snippet represents the first snippet with unique id.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetList.FindSnippet(System.Drawing.Point,System.Boolean,System.Int32@)">
            <summary>
            Locates code snippet at specified position.
            </summary>
            <param name="position">Position to locate code snippet.</param>
            <param name="exact">Specifies whether search should be precise.</param>
            <param name="index">Receives index of code snippet in the snippets collection.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.CodeSnippetList.Sort">
            <summary>
            Sorts the snippet list.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.SyntaxConsts">
            <summary>
            Contains default constants related to lexical and syntax analyzers.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ClosePopupEvent">
            <summary>
            Represents a method that will handle the <c>CodeCompletionProvider.ClosePopup</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <c>ClosingEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:Stimulsoft.Editor.ShowPopupEvent">
            <summary>
            Represents a method that will handle the <c>CodeCompletionProvider.ShowPopup</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <c>ShowingEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:Stimulsoft.Editor.TextParsedEvent">
            <summary>
            Represents a method that will handle the <c>ILexer.TextParsed</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <c>TextParsedEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:Stimulsoft.Editor.LexerProc">
            <summary>
            Represents a method intendent to perform lexical analysis.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.MemberLookupEvent">
            <summary>
            Represents a method that will handle the <c>CodeCompletionRepository.MemberLookup</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <c>MemberLookupEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:Stimulsoft.Editor.DescriptionLookupEvent">
            <summary>
            Represents a method that will handle the <c>CodeCompletionRepository.DescriptionLookup</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <c>DescriptionLookupEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:Stimulsoft.Editor.CodeCompletionArgs">
            <summary>
            Provides data for the code completion events.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionArgs.Provider">
            <summary>
            Represents the object that provides data for code completion.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionArgs.KeyChar">
            <summary>
            Represents the character typed in the Edit control.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionArgs.CompletionType">
            <summary>
            Represents type of code completion window.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionArgs.Interval">
            <summary>
            Represents the delay, in miliiseconds before displaying code completion window. Set Interval to 0 to make code completion window appearing immediately.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionArgs.Handled">
            <summary>
            Represents a value indicating whether the CodeCompletion event is handled. If the event is handled, code completion box will not appear.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionArgs.NeedShow">
            <summary>
            Represents a value indicating whether the code completion popup need showing.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionArgs.ToolTip">
            <summary>
            Represents a value indicating whether code completion window should popup in the form of the tooltip.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionArgs.SelIndex">
            <summary>
            Represents the index specifying the currently selected item of code completion box.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionArgs.StartPosition">
            <summary>
            Specifies position within the text where code competion window is valid.
            <seealso cref="!:QWhale.Syntax.CodeCompletionArgs.EndPosition"/>
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionArgs.EndPosition">
            <summary>
            Specifies position within the text where code competion window is valid.
            <seealso cref="!:QWhale.Syntax.CodeCompletionArgs.StartPosition"/>
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionArgs.DisplayPosition">
            <summary>
            Specifies position within the text where code competion window is displayed.
            <seealso cref="!:QWhale.Syntax.CodeCompletionArgs.StartPosition"/>
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionArgs.NeedReparse">
            <summary>
            Specifies whether current scope should be reparsed when executing code completion request.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionArgs.Init">
            <summary>
            Initializes <c>CodeCompletionArgs</c> with default values.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionArgs.Init(Stimulsoft.Editor.CodeCompletionType,System.Drawing.Point,System.Boolean)">
            <summary>
            Initializes <c>CodeCompletionArgs</c> with specified parameters.
            </summary>
            <param name="completionType">Specifies code completion type.</param>
            <param name="position">Specifies start position.</param>
            <param name="needReparse">Specifies whether current scope should be reparsed when executing code completion request.</param>
        </member>
        <member name="M:Stimulsoft.Editor.CodeCompletionArgs.Init(Stimulsoft.Editor.CodeCompletionType,System.Drawing.Point)">
            <summary>
            Initializes <c>CodeCompletionArgs</c> with specified parameters.
            </summary>
            <param name="completionType">Specifies code completion type.</param>
            <param name="position">Specifies start position.</param>
        </member>
        <member name="T:Stimulsoft.Editor.ShowingEventArgs">
            <summary>
            Provides data for the <c>ICodeCompletionProvider.ShowPopup</c> event.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ShowingEventArgs.Provider">
            <summary>
            Represents the object that provides data for code completion window.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ShowingEventArgs.NeedShow">
            <summary>
            Represents a value indicating whether the popup window needs showing.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ShowingEventArgs.#ctor(Stimulsoft.Editor.ICodeCompletionProvider)">
            <summary>
            Initializes a new instance of the <c>ShowingEventArgs</c> class with specific provider.
            </summary>
            <param name="provider">Specifies Provider property for this new instance.</param>
        </member>
        <member name="T:Stimulsoft.Editor.ClosingEventArgs">
            <summary>
            Provides data for the <c>ICodeCompletionProvider.ClosePopup</c> event.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ClosingEventArgs.Accepted">
            <summary>
            Represents a value indicating whether the value displayed in CodeCompletion window should be accepted.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ClosingEventArgs.UseIndent">
            <summary>
            Represents a value indicating whether the multi-line text should be indented when inserting to the edit control.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ClosingEventArgs.Handled">
            <summary>
            Represents the boolean value indicating whether popup should be closed or not.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ClosingEventArgs.Text">
            <summary>
            Represents the string value that returned by popup being closed.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ClosingEventArgs.Provider">
            <summary>
            Represents the object that provides data for code completion.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ClosingEventArgs.#ctor(System.Boolean,Stimulsoft.Editor.ICodeCompletionProvider)">
            <summary>
            Initializes a new instance of the <c>ClosingEventArgs</c> class with the specific parameters.
            </summary>
            <param name="accepted">The boolean value that specifies whether the popup window input is accepted.</param>
            <param name="provider">Specifies the object that provides data for code completion.</param>
        </member>
        <member name="T:Stimulsoft.Editor.MemberLookupEventArgs">
            <summary>
            Provides data for the <c>ICodeCompletionRepository.MemberLookup</c> event,
            used to search for the specified member.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.MemberLookupEventArgs.Member">
            <summary>
            Represents an object containing members.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.MemberLookupEventArgs.Name">
            <summary>
            The String containing the name of the member to get. 
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.MemberLookupEventArgs.Result">
            <summary>
            An object representing the member with the specified name, if found; otherwise, a null reference.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.MemberLookupEventArgs.Scope">
            <summary>
            Specifies the search constraints. 
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.MemberLookupEventArgs.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <c>MemberLookupEventArgs</c> class with specified parameters.
            </summary>
            <param name="member">Specifies Member property of this new instance.</param>
            <param name="name">Specifies Name property of this new instance.</param>
        </member>
        <member name="T:Stimulsoft.Editor.DescriptionLookupEventArgs">
            <summary>
            Provides data for the <c>ICodeCompletionRepository.DescriptionLookup</c> event,
            used to search for the description of specified member.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DescriptionLookupEventArgs.Member">
            <summary>
            Represents an object to lookup.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DescriptionLookupEventArgs.Name">
            <summary>
            The String containing the name of the object. 
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.DescriptionLookupEventArgs.Description">
            <summary>
            Result string representing description of the member.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.DescriptionLookupEventArgs.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <c>DescriptionLookupEventArgs</c> with specified parameters.
            </summary>
            <param name="member">Specifies Member property of this new instance.</param>
            <param name="name">Specifies Name property of this new instance.</param>
        </member>
        <member name="T:Stimulsoft.Editor.TextParsedEventArgs">
            <summary>
            Provides data for the <c>ILexer.TextParsed</c> event.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.TextParsedEventArgs.String">
            <summary>
            Represents parsed text line.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.TextParsedEventArgs.ColorData">
            <summary>
            Represents color information for the parsed line.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.StaticScope">
            <summary>
            Specifies the way in which the search for members and types is conducted by code completion repository.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.StaticScope.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.StaticScope.Static">
            <summary>
            Specifies that member to search is a static (belongs to the type itself rather than to a specific object).
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.StaticScope.Instance">
            <summary>
            Specifies that member is instance (belongs to the object).
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.StaticScope.Global">
            <summary>
            Specifies that member is global (belongs to the global module).
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.StaticScope.Protected">
            <summary>
            Specifies that member may be protected.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.StaticScope.TypeName">
            <summary>
            Specifies that member should display type name in code completion window.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.StaticScope.Delegate">
            <summary>
            Specifies that member should display event handler code completion window.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.StaticScope.Method">
            <summary>
            Specifies that member represents Reflection MethodBase.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.StaticScope.Property">
            <summary>
            Specifies that member represents Reflection PropertyInfo.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.StaticScope.Field">
            <summary>
            Specifies that member represents Reflection FieldInfo.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.StaticScope.ShortType">
            <summary>
            Specifies that member should display type short name in rather full name. 
            Appropriate only if TypeName flag is on
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.StaticScope.Private">
            <summary>
            Specifies that member may be private.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.CodeCompletionType">
            <summary>
            Specifies types of code completion window used to complete language elements.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionType.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionType.CompleteWord">
            <summary>
            Specifies that code completion window displayed to complete the rest of a variable, command, or function name once you have entered enough characters to disambiguate the term.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionType.ListMembers">
            <summary>
            Specifies that code completion window displayed with a list of valid member variables or functions for the appropriate class, struct, union or namespace.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionType.ParameterInfo">
            <summary>
            Specifies that code completion window displayed with information about the number, names, and types of parameters required by a function or attribute.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionType.QuickInfo">
            <summary>
            Specifies that code completion window displayed with information in a form of short description.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionType.CodeSnippets">
            <summary>
            Specifies that code completion window displayed with a list of templates with commonly used programming statements that can be inserted into the code.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.CodeCompletionType.SpecialListMembers">
            <summary>
            Specifies spcial cases for code completion window.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.UpdateReason">
            <summary>
            Defines reason of updating control's text content.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UpdateReason.Navigate">
            <summary>
            Specifies that current position in the control's text content changed.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UpdateReason.Insert">
            <summary>
            Specifies that some text inserted.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UpdateReason.Delete">
            <summary>
            Specifies that some text deleted.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UpdateReason.Break">
            <summary>
            Specifies that text line was broken into two lines.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UpdateReason.UnBreak">
            <summary>
            Specifies that two lines concatenated.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UpdateReason.DeleteBlock">
            <summary>
            Specifies that some block of text deleted.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UpdateReason.InsertBlock">
            <summary>
            Specifies that some block of text inserted.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.UpdateReason.Other">
            <summary>
            Specifies another reason of the control's text content updating.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.SyntaxOptions">
            <summary>
            Defines possibilities of formatting Edit control's content.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SyntaxOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SyntaxOptions.Outline">
            <summary>
            Specifies that information about outline sections within the text is available.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SyntaxOptions.SmartIndent">
            <summary>
            Specifies that information about indent level of each line in the text is available.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SyntaxOptions.CodeCompletion">
            <summary>
            Specifies that information about code completion for language elements within the text is available.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SyntaxOptions.SyntaxErrors">
            <summary>
            Specifies that information about syntax errors within the text is available.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SyntaxOptions.ReparseOnLineChange">
            <summary>
            Specifies that text should be reparsed when the current line changes.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SyntaxOptions.QuickInfoTips">
            <summary>
            Specifies that text quick info tooltip should be displayed when mouse is moved over control.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SyntaxOptions.AutoComplete">
            <summary>
            Specifies that parser will complete statements if possible.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.LexToken">
            <summary>
            Defines types of lexical token that represents result lexical analysis of each element within the text.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.LexToken.Identifier">
            <summary>
            Specifies that lexical element represents identifier.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.LexToken.Number">
            <summary>
            Specifies that lexical element represents number.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.LexToken.Resword">
            <summary>
            Specifies that lexical element represents key word.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.LexToken.Comment">
            <summary>
            Specifies that lexical element represents comment.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.LexToken.XmlComment">
            <summary>
            Specifies that lexical element represents xml comment.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.LexToken.Symbol">
            <summary>
            Specifies that lexical element represents particular symbol.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.LexToken.Whitespace">
            <summary>
            Specifies that lexical element represents blank space between other lexical tokens.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.LexToken.String">
            <summary>
            Specifies that lexical element represents string literal.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.LexToken.Directive">
            <summary>
            Specifies that lexical element represents directive.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.SnippetType">
            <summary>
            Defines snippet behaviour.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SnippetType.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SnippetType.SurroundsWith">
            <summary>
            Allows the code snippet to be placed around a selected piece of code
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SnippetType.Expansion">
            <summary>
            Allows the code snippet to be inserted at the cursor.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SnippetType.Refactoring">
            <summary>
            Specifies that the code snippet is used during Visual C# refactoring. Refactoring cannot be used in custom code snippets.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ParameterModifer">
            <summary>
            Defines parameter modifiers.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ParameterModifer.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ParameterModifer.Optional">
            <summary>
            Specifies that parameter is optional.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ParameterModifer.In">
            <summary>
            Specifies that parameter is in.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ParameterModifer.Out">
            <summary>
            Specifies that parameter is out.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.ParameterModifer.Retval">
            <summary>
            Specifies that parameter is retval.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IOutlineRange">
            <summary>
            Represents individual outlining section that can appear in the Edit control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IOutlineRange.Text">
            <summary>
            When implemented by a class, represents text substituting collapsed outline section.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IOutlineRange.DisplayText">
            <summary>
            When implemented by a class, represents text substituting collapsed outline section if outline buttons are displayed.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IOutlineRange.Visible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether outline section is visible (expanded).
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IOutlineRange.Level">
            <summary>
            When implemented by a class, represents level of outline nesting for the outline section.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeCompletionProvider">
            <summary>
            Represents properties and methods to provide data related to Code Completion popup listbox and popup hint controls.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionProvider.ColumnVisible(System.Int32)">
            <summary>
            When implemented by a class, indicates whether specified column is visible.
            </summary>
            <param name="column">Specifies index of the column.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionProvider.GetColumnText(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, returns text from given item in the specified column.
            </summary>
            <param name="index">Specifies index of item.</param>
            <param name="column">Specifies index of column.</param>
            <returns>Text representing specified item.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionProvider.GetText(System.Int32)">
            <summary>
            When implemented by a class, returns string representing default column.
            </summary>
            <param name="index">Index of item within collection.</param>
            <returns>Text representing default column.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionProvider.GetName(System.Int32)">
            <summary>
            When implemented by a class, returns string reperesenting name of the item.
            </summary>
            <param name="index">Index of item within collection.</param>
            <returns>String representing name of specified item.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionProvider.IndexOfName(System.String,System.Boolean)">
            <summary>
            When implemented by a class, returns index of item within collection by it's name.
            </summary>
            <param name="name">Specifies Name property of item to find.</param>
            <param name="caseSensitive">Indicates whether search should be case sensitive.</param>
            <returns>Index of found item.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionProvider.GetParent">
            <summary>
            When implemented by a class, returns code completion provider owning this <c>ICodeCompletionProvider</c> instance.
            </summary>
            <returns>Parent of the <c>ICodeCompletionProvider</c>.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionProvider.SaveFile(System.String)">
            <summary>
            When implemented by a class, saves content of the snippet to the specific file.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionProvider.SaveStream(System.IO.TextWriter)">
            <summary>
            When implemented by a class, saves content of the snippet to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionProvider.SaveStream(System.IO.Stream)">
            <summary>
            When implemented by a class, saves content of the snippet to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionProvider.LoadFile(System.String)">
            <summary>
            When implemented by a class, loads the contents of the specified file into the snippet.
            </summary>
            <param name="fileName">Name of file to load.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionProvider.LoadStream(System.IO.TextReader)">
            <summary>
            When implemented by a class, loads the contents of the specified stream into the snippet.
            </summary>
            <param name="reader">The TextReader object to read.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionProvider.LoadStream(System.IO.Stream)">
            <summary>
            When implemented by a class, loads the contents of the given stream into the snippet.
            </summary>
            <param name="Stream">The Stream object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionProvider.Sort">
            <summary>
            When implemented by a class, sorts elements in the list
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionProvider.Sort(System.Collections.IComparer)">
            <summary>
            When implemented by a class, sorts elements in the list using the specified comparer.
            </summary>
            <param name="comparer">The <c>IComparer</c> implementation to use when comparing elements.</param>
        </member>
        <member name="E:Stimulsoft.Editor.ICodeCompletionProvider.ClosePopup">
            <summary>
            When implemented by a class, occurs when popup control is closed.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.ICodeCompletionProvider.ShowPopup">
            <summary>
            When implemented by a class, occurs when popup control is displayed.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionProvider.ColumnCount">
            <summary>
            When implemented by a class, represents number of the columns.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionProvider.Strings">
            <summary>
            When implemented by a class, provides an indexed access to the text of default column.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionProvider.ImageIndexes">
            <summary>
            When implemented by a class, provides an indexed access to the image index of each column.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionProvider.Descriptions">
            <summary>
            When implemented by a class, provides an indexed access to the description of each column.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionProvider.ShowDescriptions">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether provider should display Description part in a form of tooltip near the popup control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionProvider.SelIndex">
            <summary>
            When implemented by a class, represents the index specifying the currently selected item of the popup control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionProvider.Images">
            <summary>
            When implemented by a class, gets or sets the ImageList for code completion items.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionProvider.UseIndent">
            <summary>
            When implemented by a class, gets or sets a boolean value indicating whether the multi-line text should be indented when inserting to the edit control.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionProvider.UseHtmlFormatting">
            <summary>
            When implemented by a class, gets or sets a boolean value indicating whether html formatting tags may appear in the text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionProvider.EditField">
            <summary>
            When implemented by a class, gets or sets a value indicating editable field of the code completion provider.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionProvider.EditPath">
            <summary>
            When implemented by a class, gets or sets a value indicating path to the nested code completion provider.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeSnippetHeader">
            <summary>
            Represents properties and methods describing code snippet header.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeSnippetHeader.Assign(Stimulsoft.Editor.ICodeSnippetHeader)">
            <summary>
            When implemented by a class, copies the contents of another <c>ICodeSnippetHeader</c> object.
            </summary>
            <param name="source">Specifies <c>ICodeSnippetHeader</c> to assign.</param>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetHeader.Title">
            <summary>
            When implemented by a class, gets or sets a string value that specifies the title of the code snippet. Useful to find necessary item within the snippets collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetHeader.Description">
            <summary>
            When implemented by a class, gets or sets a string value that specifies short description of the code snippet, that can help user to choose snippet from the popup window.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetHeader.Author">
            <summary>
            When implemented by a class, gets or sets a string value that specifies author of the code snippet.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetHeader.Shortcut">
            <summary>
            When implemented by a class, gets or sets a string value that specifies shortut of the code snippet.
            This shortuct is replaced by entire snippet when user presses Tab in the editor.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetHeader.Types">
            <summary>
            Specifies how the code snippet is inserted into the code.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeSnippetLiteral">
            <summary>
            Represents properties and methods describing literal that make up the parts of a code snippet that you can edit.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetLiteral.Default">
            <summary>
            When implemented by a class, specifies the default value of the literal or object for an IntelliSense Code Snippet.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetLiteral.Function">
            <summary>
            When implemented by a class, specifies a function to execute when the literal or object receives focus in the Editor.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetLiteral.ID">
            <summary>
            When implemented by a class, specifies the unique identifier for the object or literal.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetLiteral.Type">
            <summary>
            When implemented by a class, Specifies the type of the object.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetLiteral.ToolTip">
            <summary>
            When implemented by a class, specifies the ToolTip description to be associated with the literal in the code snippet.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetLiteral.Editable">
            <summary>
            When implemented by a class, specifies whether literal is editable or not.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeSnippetObject">
            <summary>
            Represents properties and methods describing literal that make up the parts of a code snippet that you can edit.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeSnippetDeclaration">
            <summary>
            Represents properties and methods describing literals and objects that make up the parts of a code snippet that you can edit.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetDeclaration.Literals">
            <summary>
            When implemented by a class, defines the literals of the code snippet that you can edit
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetDeclaration.Objects">
            <summary>
            When implemented by a class, defines the objects of the code snippet that you can edit. 
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeSnippetImport">
            <summary>
            Represents imported namespace used by an IntelliSense Code Snippet.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetImport.Namespace">
            <summary>
            When inplemented by a class, specifies the namespace used by the code snippet
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeSnippetReference">
            <summary>
            Contains information about assembly references for the code snippet.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetReference.Assembly">
            <summary>
            When inplemented by a class, contains the name of the assembly referenced by the code snippet.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetReference.Url">
            <summary>
            When inplemented by a class, contains a URL that provides more information about the referenced assembly.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeSnippetCode">
            <summary>
            Specifies the code that you want to insert into a file.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeSnippetCode.Assign(Stimulsoft.Editor.ICodeSnippetCode)">
            <summary>
            When implemented by a class, copies the contents of another <c>ICodeSnippetCode</c> object.
            </summary>
            <param name="source">Specifies <c>ICodeSnippetCode</c> to assign.</param>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetCode.Delimiter">
            <summary>
            When inplemented by a class, specifies the delimiter used to describe literals and objects in the code.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetCode.Kind">
            <summary>
            When inplemented by a class, specifies the kind of code the snippet contains, and thus, where the snippet can be inserted. 
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetCode.Language">
            <summary>
            When inplemented by a class, specifies the language of the code snippet.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetCode.Code">
            <summary>
            When inplemented by a class, specifies the code that you want to insert into a file.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeSnippetType">
            <summary>
            Specifies how the code snippet is inserted into the code.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetType.SnippetType">
            <summary>
            When inplemented by a class, specifies how the code snippet is inserted into the code.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeSnippetLiterals">
            <summary>
            Represents properties and methods to provide an indexed access to individual <c>ICodeSnippetLiteral</c> objects.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeSnippetLiterals.AddLiteral">
            <summary>
            When implemented by a class, adds a new item to the specified position within the <c>ICodeSnippetLiterals</c> collection.
            </summary>
            <returns><c>ICodeSnippetLiteral</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeSnippetLiterals.InsertLiteral(System.Int32)">
            <summary>
            When implemented by a class, inserts a new item to the specified position within the <c>ICodeSnippetLiterals</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetLiteral</c> that is inserted.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetLiterals.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to <c>ICodeSnippetLiteral</c> objects stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeSnippetTypes">
            <summary>
            Specifies how the code snippet is inserted into the code.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeSnippetTypes.AddSnippetType">
            <summary>
            When implemented by a class, adds a new item to the specified position within the <c>ICodeSnippetTypes</c> collection.
            </summary>
            <returns><c>ICodeSnippetType</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeSnippetTypes.InsertSnippetType(System.Int32)">
            <summary>
            When implemented by a class, inserts a new item to the specified position within the <c>ICodeSnippetTypes</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetType</c> that is inserted.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetTypes.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to <c>ICodeSnippetType</c> objects stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeSnippetObjects">
            <summary>
            Represents properties and methods to provide an indexed access to individual <c>ICodeSnippetObject</c> objects.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeSnippetObjects.AddObject">
            <summary>
            When implemented by a class, adds a new item to the specified position within the <c>ICodeSnippetObjects</c> collection.
            </summary>
            <returns><c>ICodeSnippetObject</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeSnippetObjects.InsertObject(System.Int32)">
            <summary>
            When implemented by a class, inserts a new item to the specified position within the <c>ICodeSnippetObject</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetObject</c> that is inserted.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetObjects.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to <c>ICodeSnippetObject</c> objects stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeSnippetDeclarations">
            <summary>
            Represents properties and methods to provide an indexed access to individual <c>ICodeSnippetDeclaration</c> objects.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeSnippetDeclarations.AddDeclaration">
            <summary>
            When implemented by a class, adds a new item to the specified position within the <c>ICodeSnippetDeclarations</c> collection.
            </summary>
            <returns><c>ICodeSnippetDeclaration</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeSnippetDeclarations.InsertDeclaration(System.Int32)">
            <summary>
            When implemented by a class, inserts a new item to the specified position within the <c>ICodeSnippetDeclarations</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetDeclaration</c> that is inserted.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetDeclarations.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to <c>ICodeSnippetDeclaration</c> objects stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeSnippetImports">
            <summary>
            Represents properties and methods to provide an indexed access to individual <c>ICodeSnippetImport</c> objects.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeSnippetImports.AddImport">
            <summary>
            When implemented by a class, adds a new item to the specified position within the <c>ICodeSnippetImports</c> collection.
            </summary>
            <returns><c>ICodeSnippetImport</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeSnippetImports.InsertImport(System.Int32)">
            <summary>
            When implemented by a class, inserts a new item to the specified position within the <c>ICodeSnippetImports</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetImport</c> that is inserted.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetImports.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to <c>ICodeSnippetImport</c> objects stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeSnippetReferences">
            <summary>
            Represents properties and methods to provide an indexed access to individual <c>ICodeSnippetReference</c> objects.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeSnippetReferences.AddReference">
            <summary>
            When implemented by a class, adds a new item to the specified position within the <c>ICodeSnippetReferences</c> collection.
            </summary>
            <returns><c>ICodeSnippetReference</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeSnippetReferences.InsertReference(System.Int32)">
            <summary>
            When implemented by a class, inserts a new item to the specified position within the <c>ICodeSnippetReferences</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetReference</c> that is inserted.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetReferences.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to <c>ICodeSnippetReference</c> objects stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeSnippet">
            <summary>
            Represents properties and methods describing particular code snippet in the snippets collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippet.Header">
            <summary>
            When implemented by a class, gets a header associated with the snippet.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippet.Declarations">
            <summary>
            When implemented by a class, specifies the literals and objects that make up the parts of a code snippet that you can edit.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippet.Imports">
            <summary>
            When implemented by a class, contains the imported namespaces for the code snippet
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippet.References">
            <summary>
            When implemented by a class, contains information about assembly references for the code snippet
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippet.Code">
            <summary>
            When implemented by a class, gets or sets a string value that specifies code of the template. The code completion control, that holds a templates collection inserts code when user accepts the input.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippet.Description">
            <summary>
            When implemented by a class, gets description of the <c>ICodeSnippet</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippet.ImageIndex">
            <summary>
            When implemented by a class, gets or sets the index of the image displayed for the template.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippet.CustomData">
            <summary>
            When implemented by a class, gets or sets an object that can hold a user defined data attached to the template.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippet.Parent">
            <summary>
            When implemented by a class, gets or sets a parent of the <c>ICodeSnippet</c>.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeSnippetsProvider">
            <summary>
            Represents base interface for code snippets provider.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeSnippetsProvider.FindByShortcut(System.String,System.Boolean)">
            <summary>
            When implemented by a class, gets a code snippet by its shortcut.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeSnippets">
            <summary>
            Represents collection containing list of code snippets.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeSnippets.AddSnippet">
            <summary>
            When implemented by a class, adds a new item to the <c>ICodeSnippets</c> collection.
            </summary>
            <returns><c>ICodeSnippet</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeSnippets.InsertSnippet(System.Int32)">
            <summary>
            When implemented by a class, inserts a new item to the specified position within the <c>ICodeSnippets</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippet</c> that is inserted.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippets.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to <c>ICodeSnippet</c> objects stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeSnippetMember">
            <summary>
            Represents properties and methods for a particular code snippet member in the data collection of the code completion popups.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetMember.Name">
            <summary>
            When implemented by a class, gets or sets a string value that specifies the name of the <c>IListMember</c>. Useful to find necessary item within the <c>ICodeSnippetMember</c> collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetMember.EditPath">
            <summary>
            When implemented by a class, gets a string value that specifies the full path of the <c>IListMember</c>. 
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetMember.Path">
            <summary>
            When implemented by a class, gets or sets a string value that specifies the path to the file containing source of the <c>ICodeSnippetMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetMember.ImageIndex">
            <summary>
            When implemented by a class, gets or sets the index of the image displayed for the <c>ICodeSnippetMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetMember.Members">
            <summary>
            When implemented by a class, provides an indexed access to the nested <c>ICodeSnippetMember</c> objects.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetMember.Snippets">
            <summary>
            When implemented by a class, provides an indexed access to the nested <c>ICodeSnippet</c> objects.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetMember.SnippetsAndMembers">
            <summary>
            When implemented by a class, provides an indexed access to the nested <c>ICodeSnippet</c> and <c>ICodeSnippetMember</c> objects.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetMember.Parent">
            <summary>
            When implemented by a class, gets or sets a parent of the <c>ICodeSnippetMember</c>.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeSnippetMembers">
            <summary>
            Represents collection containing list of code snippets.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeSnippetMembers.AddSnippetMember">
            <summary>
            When implemented by a class, adds a new item to the <c>ICodeSnippetMembers</c> collection.
            </summary>
            <returns><c>ICodeSnippetMember</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeSnippetMembers.InsertSnippetMember(System.Int32)">
            <summary>
            When implemented by a class, inserts a new item to the specified position within the <c>ICodeSnippetMembers</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetMember</c> that is inserted.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetMembers.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to <c>ICodeSnippetMember</c> objects stored in the collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeSnippetMembers.Parent">
            <summary>
            When implemented by a class, gets or sets a parent of the <c>ICodeSnippetMembers</c>.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IParameterMember">
            <summary>
            Represents properties for a particular parameter member within list member parameters.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IParameterMember.Name">
            <summary>
            When implemented by a class, gets or sets a string value that specifies name of the <c>IParameterMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IParameterMember.DataType">
            <summary>
            When implemented by a class, gets or sets a string value that specifies datatype of the <c>IParameterMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IParameterMember.Description">
            <summary>
            When implemented by a class, gets or sets a string value that specifies short description of the <c>IParameterMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IParameterMember.Qualifier">
            <summary>
            When implemented by a class, gets or sets a string value that specifies parameter modifier of the <c>IParameterMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IParameterMember.Text">
            <summary>
            When implemented by a class, gets or sets an string value that specifies text of the <c>IParameterMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IParameterMember.Modifiers">
            <summary>
            When implemented by a class, gets or sets a string value that specifies parameter modifier.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IListMember">
            <summary>
            Represents properties and methods for a particular list member in the data collection of the code completion popups.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IListMember.GetOwnDescription">
            <summary>
            When implemented by a class, return member's description.
            </summary>
            <returns>String value that describes itself.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IListMember.UpdateParamText">
            <summary>
            When implemented by a class, updates Parameter text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IListMember.GetParamText(System.Boolean)">
            <summary>
            Converts <c>Parameters</c> property to a single string.
            </summary>
            <param name="useFormatting">Specifies whether to use html formatting.</param>
            <returns>Returns <c>Parameters</c> in the form of comma separated text, framed by parens.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.IListMember.Name">
            <summary>
            When implemented by a class, gets or sets a string value that specifies the name of the <c>IListMember</c>. Useful to find necessary item within the <c>IListMember</c> collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IListMember.DisplayText">
            <summary>
            When implemented by a class, gets or sets a string value displayed as a "name" part of <c>IListMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IListMember.DataType">
            <summary>
            When implemented by a class, gets or sets a string value that specifies data type of the <c>IListMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IListMember.Description">
            <summary>
            When implemented by a class, gets or sets a string value that specifies short description of the <c>IListMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IListMember.Qualifier">
            <summary>
            When implemented by a class, gets or sets a string value that specifies access modifiers of the <c>IListMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IListMember.Overloads">
            <summary>
            When implemented by a class, gets or sets number of overloading members <c>IListMember</c> in the collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IListMember.CustomData">
            <summary>
            When implemented by a class, gets or sets an object that can hold a user defined data attached to the <c>IListMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IListMember.ParamText">
            <summary>
            When implemented by a class, gets or sets a string value that specifies comma separated list of parameters of the <c>IListMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IListMember.Parameters">
            <summary>
            When implemented by a class, gets or sets a collection of parameters of this <c>IListMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IListMember.CurrentParamIndex">
            <summary>
            When implemented by a class, gets or sets index of current parameter in the parameters collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IListMember.OwnDescription">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether <c>IListMember</c> Description property should return GetOwnDescription.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IListMember.OwnDescriptionText">
            <summary>
            When implemented by a class, gets or sets a string value that represent default description text for <c>ListMember</c>
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IListMember.ImageIndex">
            <summary>
            When implemented by a class, gets or sets the index of the image displayed for the <c>IListMember</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IListMember.Owner">
            <summary>
            Wnen implemented by a class, gets IListMembers instance owning the <c>ListMember</c>.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IListMembers">
            <summary>
            Represents data collection related to popup list box controls.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IListMembers.CreateListMember">
            <summary>
            Initializes a new instance of the <c>ListMember</c> class with default settings.
            </summary>
            <returns><c>IListMember</c> that represents this new instance.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IListMembers.AddMember">
            <summary>
            When implemented by a class, adds a new item to the <c>IListMembers</c> collection.
            </summary>
            <returns><c>IListMember</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IListMembers.InsertMember(System.Int32)">
            <summary>
            When implemented by a class, inserts a new item to the specified position within the <c>IListMembers</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>IListMember</c> that is inserted.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IListMembers.GetListMember(System.Int32)">
            <summary>
            When implemented by a class, returns item from <c>IListMembers</c> collection by specified Index.
            </summary>
            <param name="index">Specifies index of <c>IListMember</c> to return.</param>
            <returns><c>IListMember</c> at specified index.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IListMembers.ResetShowQualifiers">
            <summary>
            When implemented by a class, resets the <c>ShowQualifiers</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IListMembers.ResetShowResults">
            <summary>
            When implemented by a class, resets the <c>ShowResults</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IListMembers.ResetShowParams">
            <summary>
            When implemented by a class, resets the <c>ShowParams</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IListMembers.ResetShowHints">
            <summary>
            When implemented by a class, resets the <c>ShowHints</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IListMembers.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to <c>IListMember</c> objects stored in the collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IListMembers.ShowQualifiers">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the "Qualifiers" column is visible.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IListMembers.ShowResults">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the "Results" column is visible.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IListMembers.ShowParams">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the "Params" column is visible.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IListMembers.ShowHints">
            <summary>
            When implemented by a class, gets or sets a value indicating whether popup listbox should display additional information for selected list member.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IQuickInfo">
            <summary>
            Represents simple text data related to popup hint.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IQuickInfo.Text">
            <summary>
            When implemented by a class, gets or sets content of the <c>IQuickInfo</c>.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IParameterInfo">
            <summary>
            Represents Parameter Info data related to popup hint controls.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ILexer">
            <summary>
            Represents properties and methods for performing lexical analysis of the specified text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ILexer.ParseText(System.Int32,System.Int32,System.String,System.Int16[]@)">
            <summary>
            When implemented by a class, performs lexical analysis of given text.
            </summary>
            <param name="state">Specifies start lexical state.</param>
            <param name="line">Specifies current line within the text.</param>
            <param name="str">Text to analyse.</param>
            <param name="colorData">Receives color data representing lexical information of the given text.</param>
            <returns>Final lexical state.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ILexer.ParseText(System.Int32,System.Int32,System.String,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            When implemented by a class, performs lexical analysis of given text.
            </summary>
            <param name="state">Specifies start lexical state.</param>
            <param name="line">Specifies current line within the text.</param>
            <param name="str">Text to analyse.</param>
            <param name="pos">Starting position.</param>
            <param name="len">Integer value to receive length of parsed element.</param>
            <param name="style">Retrieves style of text being parsed.</param>
            <returns>Final lexical state.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ILexer.SaveScheme(System.String)">
            <summary>
            When implemented by a class, saves <c>ILexScheme</c> to the specified file.
            </summary>
            <param name="fileName">Name of the file to save the scheme.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ILexer.LoadScheme(System.String)">
            <summary>
            When implemented by a class, loads <c>ILexScheme</c> from the specified file.
            </summary>
            <param name="fileName">Name of the file to load the scheme.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ILexer.SaveScheme(System.IO.TextWriter)">
            <summary>
            When implemented by a class, saves <c>ILexScheme</c> to the specified destination.
            </summary>
            <param name="writer">The TextWriter object to write the scheme.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ILexer.LoadScheme(System.IO.TextReader)">
            <summary>
            When implemented by a class, loads <c>ILexScheme</c> from the specified source.
            </summary>
            <param name="reader">The TextReader object to read the scheme.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ILexer.ResetDefaultState">
            <summary>
            When implemented by a class, resets the <c>DefaultState</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexer.Scheme">
            <summary>
            When implemented by a class, gets or sets list of rules for lexical analysis.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexer.XmlScheme">
            <summary>
            When implemented by a class, gets or sets an xml representation of <c>Scheme</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexer.DefaultState">
            <summary>
            When implemented by a class, gets or sets default state of the <c>ILexer</c>.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.ILexer.TextParsed">
            <summary>
            When implemented by a class, occurs when text line is parsed, allowing to modify colors/styles information about the parsed line.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IColorThemes">
            <summary>
            Properties and methods that represent a collection of color themes.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IColorThemes.ActiveThemeIndex">
            <summary>
            When implemented by a class, gets or sets the index of the
            active ColorTheme.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IColorThemes.ActiveTheme">
            <summary>
            When implemented by a class, gets or sets the active ColorTheme.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IColorThemes.Add(Stimulsoft.Editor.IColorTheme)">
            <summary>
            When implemented by a class, adds a ColorTheme object to the collection.
            </summary>
            <param name="colorTheme">ColorTheme object.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IColorThemes.Remove(System.Int32)">
            <summary>
            When implemented by a class, removes the ColorTheme object at the specified index.
            </summary>
            <param name="name">Index of the ColorTheme object to remove.</param>
            <returns>true - index parameter was valid and ColorTheme object was removed. false - index parameter was invalid and no ColorTheme object was removed.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.IColorThemes.Themes">
            <summary>
            When implemented by a class, gets or sets an array of objects that implement IColorTheme.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IColorTheme">
            <summary>
            Properties and methods for representing a single color theme.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IColorTheme.Name">
            <summary>
            When implemented by a class, gets or sets the name of the color theme.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IColorTheme.ReadOnly">
            <summary>
            When implemented by a class, gets or sets a bool value that indicates
            whether or not the color theme should be modified.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IColorTheme.Font">
            <summary>
            When implemented by a class, gets or sets the font used for the color theme.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IColorTheme.LexStyles">
            <summary>
            When implemented by a class, gets or sets the LexStyle array used for the 
            color theme.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IColorTheme.Contains(System.String)">
            <summary>
            When implemented by a class, determines whether the LexStyle array contains a specific lex style using the name of the lex style.
            </summary>
            <param name="lexStyleName">Name of the LexStyle object such as "idents".</param>
            <returns>true - array contains the specified LexStyle object, false - array does not contain the specified LexStyle object.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.IColorTheme.Item(System.String)">
            <summary>
            When implemented by a class, specifies an Item indexer that uses the name of the LexStyle as an index.
            </summary>
            <param name="lexStyleName">Name of the LexStyle such as "ident".</param>
            <returns>LexStyle object that corresponds to the name parameter, or null for an invalid name.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.ILexStyle">
            <summary>
            Represents properties and methods for individual lexical style with the collection of lexical styles.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ILexStyle.Assign(Stimulsoft.Editor.ILexStyle)">
            <summary>
            When implemented by a class, copies the contents of another <c>ILexStyle</c> object.
            </summary>
            <param name="source">Specifies <c>ILexStyle</c> to assign.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ILexStyle.ResetForeColor">
            <summary>
            When implemented by a class, resets the <c>ForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ILexStyle.ResetBackColor">
            <summary>
            When implemented by a class, resets the <c>BackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ILexStyle.ResetFontStyle">
            <summary>
            When implemented by a class, resets the <c>FontStyle</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ILexStyle.ResetPlainText">
            <summary>
            When implemented by a class, resets the <c>PlainText</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexStyle.Name">
            <summary>
            When implemented by a class, gets or sets name of the <c>ILexStyle</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexStyle.Desc">
            <summary>
            When implemented by a class, gets or sets a description of the <c>ILexStyle</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexStyle.ForeColor">
            <summary>
            When implemented by a class, gets or sets a foreground color of the <c>ILexStyle</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexStyle.BackColor">
            <summary>
            When implemented by a class, gets or sets a background color of the <c>ILexStyle</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexStyle.FontStyle">
            <summary>
            When implemented by a class, gets or sets a font style of the <c>ILexStyle</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexStyle.ForeColorEnabled">
            <summary>
            When implemented by a class, gets or sets a flag that indicates whether the GUI control 
            that corresponds to the ForeColor property should be enabled or disabled.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexStyle.BackColorEnabled">
            <summary>
            When implemented by a class, gets or sets a flag that indicates whether the GUI control 
            that corresponds to the BackColor property should be enabled or disabled.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexStyle.BoldEnabled">
            <summary>
            When implemented by a class, gets or sets a flag that indicates whether the GUI control 
            that corresponds to the Bold property should be enabled or disabled.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexStyle.ItalicEnabled">
            <summary>
            When implemented by a class, gets or sets a flag that indicates whether the GUI control 
            that corresponds to the Italic property should be enabled or disabled.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexStyle.UnderlineEnabled">
            <summary>
            When implemented by a class, gets or sets a flag that indicates whether the GUI control 
            that corresponds to the Underline property should be enabled or disabled.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexStyle.PlainText">
            <summary>
            When implemented by a class, gets or sets value indicating whether Edit control should use text formatting rules, like checking spelling.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexStyle.Index">
            <summary>
            When implemented by a class, represents index of the <c>ILexStyle</c> within the lexical style collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ILexStyles">
            <summary>
            Represents properties and methods to provide an indexed access to individual <c>ILexStyle</c> objects.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ILexStyles.AddLexStyle">
            <summary>
            When implemented by a class, adds a new item to the specified position within the <c>ILexStyles</c> collection.
            </summary>
            <returns><c>ILexStyle</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ILexStyles.InsertLexStyle(System.Int32)">
            <summary>
            When implemented by a class, inserts a new item to the specified position within the <c>ILexStyles</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ILexStyle</c> that is inserted.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ILexStyles.FindLexStyle(System.String)">
            <summary>
            When implemented by a class, finds <c>ILexStyle</c> by its name.
            </summary>
            <param name="name">Name of the <c>ILexStyle</c>.</param>
            <returns><c>ILexStyle</c> that is found.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.ILexStyles.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to <c>ILexStyle</c> objects stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ILexStates">
            <summary>
            Represents properties and methods to provide an indexed access to individual <c>ILexState</c> objects.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ILexStates.AddLexState">
            <summary>
            When implemented by a class, adds a new item to the specified position within the <c>ILexStates</c> collection.
            </summary>
            <returns><c>ILexState</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ILexStates.InsertLexState(System.Int32)">
            <summary>
            When implemented by a class, inserts a new item to the specified position within the <c>ILexStates</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ILexState</c> that is inserted.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ILexStates.FindLexState(System.String)">
            <summary>
            When implemented by a class, finds <c>ILexState</c> by its name.
            </summary>
            <param name="name">Name of the <c>ILexState</c>.</param>
            <returns><c>ILexState</c> that is found.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.ILexStates.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to <c>ILexState</c> objects stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ILexSyntaxBlocks">
            <summary>
            Represents properties and methods to provide an indexed access to individual <c>ILexSyntaxBlock</c> objects.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ILexSyntaxBlocks.AddLexSyntaxBlock">
            <summary>
            When implemented by a class, adds a new item to the specified position within the <c>ILexReswordSets</c> collection.
            </summary>
            <returns><c>ILexSyntaxBlock</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ILexSyntaxBlocks.InsertLexSyntaxBlock(System.Int32)">
            <summary>
            When implemented by a class, inserts a new item to the specified position within the <c>ILexSyntaxBlocks</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ILexSyntaxBlock</c> that is inserted.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ILexSyntaxBlocks.FindSyntaxBlock(System.String)">
            <summary>
            When implemented by a class, finds <c>ILexSyntaxBlock</c> by its name.
            </summary>
            <param name="name">Specifis name of the <c>ILexSyntaxBlock</c>.</param>
            <returns><c>ILexSyntaxBlock</c> that is found.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.ILexSyntaxBlocks.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to <c>ILexSyntaxBlock</c> objects stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ILexReswordSets">
            <summary>
            Represents properties and methods to provide an indexed access to individual <c>ILexReswordSet</c> objects.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ILexReswordSets.AddLexReswordSet">
            <summary>
            When implemented by a class, adds a new item to the specified position within the <c>ILexReswordSets</c> collection.
            </summary>
            <returns><c>ILexReswordSet</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ILexReswordSets.InsertLexReswordSet(System.Int32)">
            <summary>
            When implemented by a class, inserts a new item to the specified position within the <c>ILexReswordSets</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ILexReswordSet</c> that is inserted.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ILexReswordSets.FindResword(System.String)">
            <summary>
            When implemented by a class, locates <c>ILexReswordSet</c> containing given resword.
            </summary>
            <param name="resword">The resword to search for.</param>
            <returns>Index of <c>ILexReswordSet</c> if resword collection contains specified resword; otherwise - 1.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.ILexReswordSets.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to <c>ILexReswordSet</c> objects stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ILexScheme">
            <summary>
            Represents properties and methods to specify rules for text lexical analysis.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ILexScheme.IsEmpty">
            <summary>
            When implemented by a class, indicates whether <c>ILexScheme</c> is empty , that is does not contain any styles, states, author, copyright, and description information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stimulsoft.Editor.ILexScheme.IsPlainText(System.Int32)">
            <summary>
            When implemented by a class, indicates whether <c>PlainText</c> property of lexical style given by its index is true.
            </summary>
            <param name="style">index of lexical style to check-up.</param>
            <returns>True if lexical style <c>PlainText</c> property is true; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ILexScheme.ClearScheme">
            <summary>
            When implemented by a class, removes all states and styles from this <c>LexScheme</c> and sets other properties to default values.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexScheme.Author">
            <summary>
            When implemented by a class, gets or sets author of the <c>ILexScheme</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexScheme.Name">
            <summary>
            When implemented by a class, gets or sets <c>ILexScheme</c> name.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexScheme.Desc">
            <summary>
            When implemented by a class, gets or sets description of the <c>ILexScheme</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexScheme.Copyright">
            <summary>
            When implemented by a class, gets or sets copyright of the <c>ILexScheme</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexScheme.FileExtension">
            <summary>
            When implemented by a class, gets or sets string value indicating associated file extension of the <c>ILexScheme</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexScheme.FileType">
            <summary>
            When implemented by a class, gets or sets string value indicating associated file type of the <c>ILexScheme</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexScheme.Version">
            <summary>
            When implemented by a class, gets or sets version of the <c>ILexScheme</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexScheme.LexStyles">
            <summary>
            When implemented by a class, gets or sets collection of lexical styles.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexScheme.LexStates">
            <summary>
            When implemented by a class, gets or sets collection of lexical states.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ILexReswordSet">
            <summary>
            Represents properties and methods to specify keywords for <c>ILexSyntaxBlock.LexReswordSets</c> collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ILexReswordSet.AddResword(System.String)">
            <summary>
            When implemented by a class, adds a new element to the resword collection.
            </summary>
            <param name="resword">Resword to add.</param>
            <returns>Index of added element in the resword collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ILexReswordSet.FindResword(System.String)">
            <summary>
            When implemented by a class, locates given resword in Reswords collection.
            </summary>
            <param name="resword">Resword to locate.</param>
            <returns>True if resword presents in the Reswords collection; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ILexReswordSet.Clear">
            <summary>
            When implemented in a class, removes all items from Reswords collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexReswordSet.Name">
            <summary>
            When implemented in a class, gets or set name for the <c>ILexReswordSet</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexReswordSet.ReswordStyle">
            <summary>
            When implemented by a class, gets or sets an <c>ILexStyle</c> of resword collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexReswordSet.Reswords">
            <summary>
            When implemented by a class, gets or sets a collection of keywords for the <c>ILexReswordSet</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexReswordSet.Index">
            <summary>
            When implemented by a class, represents index of the <c>ILexReswordSet</c> within the reswords collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ILexSyntaxBlock">
            <summary>
            Represents properties and methods for individual syntax block with collection of syntax blocks.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ILexSyntaxBlock.FindResword(System.String)">
            <summary>
            Locates <c>LexReswordSet</c> containing given resword.
            </summary>
            <param name="resword">The resword to search for.</param>
            <returns>Index of <c>LexReswordSet</c> if resword collection contains specified resword; otherwise - 1.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ILexSyntaxBlock.AddExpression(System.String)">
            <summary>
            When implemented by a class, adds new element to the expression collection.
            </summary>
            <param name="expression">Regular expression to add.</param>
            <returns>Index of added element in the expression collection.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.ILexSyntaxBlock.Name">
            <summary>
            When implemented by a class, gets or sets name of the <c>ILexSyntaxBlock</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexSyntaxBlock.Desc">
            <summary>
            When implemented by a class, gets or sets description of the <c>ILexSyntaxBlock</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexSyntaxBlock.Style">
            <summary>
            When implemented by a class, gets or sets an <c>ILexStyle</c> object, applicable for text that matches <c>ILexSyntaxBlock</c> expression.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexSyntaxBlock.LeaveState">
            <summary>
            When implemented by a class, gets or sets <c>ILexState</c> object that specifies lexical resulting state after lexical analyzer locates text, that matches to the <c>ILexSyntaxBlock.Expression</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexSyntaxBlock.LexReswordSets">
            <summary>
            When implemented by a class, gets or sets collection of the <c>ILexReswordSet</c> object containing reserwed words.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexSyntaxBlock.Expressions">
            <summary>
            When implemented by a class, gets or sets collection of the expressions used by <c>ILexer</c> to parse the text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexSyntaxBlock.Expression">
            <summary>
            When implemented by a class, represents a collective regular expression pattern for the <c>ILexSyntaxBlock.Expressions</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexSyntaxBlock.Index">
            <summary>
            When implemented by a class, represents index of the <c>ILexSyntaxBlock</c> within the lexical syntax block collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ILexState">
            <summary>
            Represents properties and methods for individual lexical state with collection of lexical states.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ILexState.ResetCaseSensitive">
            <summary>
            When implemented by a class, resets the <c>CaseSensitive</c> to the default value.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexState.Name">
            <summary>
            When implemented by a class, gets or sets name of the <c>ILexState</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexState.Desc">
            <summary>
            When implemented by a class, gets or sets description of the <c>ILexState</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexState.CaseSensitive">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the analizer should perform case sensitive parsing for this <c>ILexState</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexState.Expression">
            <summary>
            When implemented by a class, represents a collective regular expression pattern for the <c>ILexState</c>.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexState.LexSyntaxBlocks">
            <summary>
            When implemented by a class, gets or sets a collection of lexical syntax blocks.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexState.Regex">
            <summary>
            When implemented by a class, represents a regular expression that contains <c>Expression</c> as a pattern.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ILexState.Index">
            <summary>
            When implemented by a class, represents index of the <c>ILexState</c> within the lexical state collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.IExport">
            <summary>
            Represents methods to save text content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IExport.SaveFile(System.String)">
            <summary>
            When implemented by a class, saves text content to the specific file.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IExport.SaveFile(System.String,System.Text.Encoding)">
            <summary>
            When implemented by a class, saves text content to the specific file with specific encoding.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IExport.SaveStream(System.IO.TextWriter)">
            <summary>
            When implemented by a class, saves the text content to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IExport.SaveStream(System.IO.Stream)">
            <summary>
            When implemented by a class, saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IExport.SaveStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            When implemented by a class, saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.IImport">
            <summary>
            Represents methods to load text content.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IImport.LoadFile(System.String)">
            <summary>
            When implemented by a class, loads the contents of the specified file.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IImport.LoadFile(System.String,System.Text.Encoding)">
            <summary>
            When implemented by a class, loads the contents of the specified file with specified encoding.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IImport.LoadStream(System.IO.TextReader)">
            <summary>
            When implemented by a class, loads the contents of the specified stream.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IImport.LoadStream(System.IO.Stream)">
            <summary>
            When implemented by a class, loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IImport.LoadStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            When implemented by a class, loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.IStringList">
            <summary>
            Represents collection containing list of strings.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IStringList.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to individual strings stored in the collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IStringList.Text">
            <summary>
            When implemented by a class, gets or sets the strings in the <c>IStringList</c> as a single string with the individual strings delimited by carriage returns.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IStringList.LineTerminator">
            <summary>
            When implemented by a class, gets or sets a string value that terminates line.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.INotify">
            <summary>
            Represents properties and methods to manage notification between objects.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.INotify.BeginUpdate">
            <summary>
            When implemented by a class, prevents object state updating until calling <c>EndUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.INotify.EndUpdate">
            <summary>
            When implemented by a class, re-enables object state updating, that was turn of by calling <c>BeginUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.INotify.AddNotifier(Stimulsoft.Editor.INotifier)">
            <summary>
            When implemented by a class, adds new handler to respond a notification.
            </summary>
            <param name="sender">Specifies an object that can respond a notification.</param>
        </member>
        <member name="M:Stimulsoft.Editor.INotify.RemoveNotifier(Stimulsoft.Editor.INotifier)">
            <summary>
            When implemented by a class, exclude specified handler from notification handlers list.
            </summary>
            <param name="sender">Specifies an object that can respond a notification.</param>
        </member>
        <member name="M:Stimulsoft.Editor.INotify.Notify">
            <summary>
            When implemented by a class, notifies all notifiers about updating object state.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.INotify.UpdateCount">
            <summary>
            When implemented by a class, keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.INotifier">
            <summary>
            Represents method that informs object about changes in linked objects.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.INotifier.Notification(System.Object,System.EventArgs)">
            <summary>
            When implemented by a class, updates control's content according to the parameters of notification.
            </summary>
            <param name="sender">The source of the notification.</param>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="T:Stimulsoft.Editor.IParser">
            <summary>
            Represents properties and methods for perform lexical analysis of the text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IParser.Reset">
            <summary>
            When implemented by a class, resets <c>IParser</c> to the start position.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IParser.Reset(System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, resets <c>IParser</c> to the specified position.
            </summary>
            <param name="line">Specifies new line index.</param>
            <param name="pos">Specifies new position of character within the line.</param>
            <param name="state">Specifies new <c>State</c>.</param>
        </member>
        <member name="M:Stimulsoft.Editor.IParser.NextToken">
            <summary>
            When implemented by a class, parses text from current position to the next token and updates <c>TokenPos</c>, <c>CurrentPos</c> and <c>TokenString</c> properties.
            </summary>
            <returns>Token that corresponds to the next position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IParser.NextToken(System.String@)">
            <summary>
            When implemented by a class, parses text from current position to the next token and updates <c>TokenPos</c>, <c>CurrentPos</c> and <c>TokenString</c> properties.
            </summary>
            <param name="str">Retrieves token string for the next token.</param>
            <returns>Token that corresponds to the next position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IParser.PeekToken">
            <summary>
            When implemented by a class, parses next portion of the text, remaning current position unchanged.
            </summary>
            <returns>Token that corresponds to the next position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IParser.PeekToken(System.String@)">
            <summary>
            When implemented by a class, parses next portion of the text, remaning current position unchanged.
            </summary>
            <param name="str">Retrieves token string for the next token.</param>
            <returns>Token that corresponds to the next position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IParser.PeekValidToken">
            <summary>
            When implemented by a class, parses to the next valid (non-whitespace, non-comment) portion of the text, remaning current position unchanged.
            </summary>
            <returns>Next valid token.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IParser.PeekValidToken(System.String@)">
            <summary>
            When implemented by a class, parses to the next valid (non-whitespace, non-comment) portion of the text, remaning current position unchanged.
            </summary>
            <param name="str">Retrieves token string for the next valid token.</param>
            <returns>Next valid token.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IParser.NextValidToken">
            <summary>
            When implemented by a class, parses text from current position to the next valid (non-whitespace, non-comment) token and updates <c>TokenPos</c>, <c>CurrentPos</c> and <c>TokenString</c> properties.
            </summary>
            <returns>Next valid token.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IParser.NextValidToken(System.String@)">
            <summary>
            When implemented by a class, parses text from current position to the next valid (non-whitespace, non-comment) token and updates <c>TokenPos</c>, <c>CurrentPos</c> and <c>TokenString</c> properties.
            </summary>
            <param name="str">Retrieves token string for the next valid token.</param>
            <returns>Next valid token.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.IParser.SaveState">
            <summary>
            When implemented by a class, saves current <c>IParser</c> state and position.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IParser.RestoreState">
            <summary>
            When implemented by a class, restores <c>IParser</c> state and position stored by <c>SaveState</c> method.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.IParser.RestoreState(System.Boolean)">
            <summary>
            hen implemented by a class, restores <c>IParser</c> state and position stored by <c>SaveState</c> method.
            </summary>
            <param name="restore">Indicates whether <c>IParser</c> should restore it's state to previous position or simply delete information about previously stored state.</param>
        </member>
        <member name="P:Stimulsoft.Editor.IParser.Token">
            <summary>
            When implemented by a class, represents token (index of style in the class style collection) related to the current position in the parsed text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IParser.State">
            <summary>
            When implemented by a class, represents current <c>IParser</c> state.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IParser.TokenString">
            <summary>
            When implemented by a class, represents text of the current syntax token.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IParser.TokenPosition">
            <summary>
            When implemented by a class, represents start position of the current token.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IParser.CurrentPosition">
            <summary>
            When implemented by a class, represents position of current character within the current line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IParser.Eof">
            <summary>
            When implemented by a class, indicates whether current position is out of the text, signalling that whole text is parsed.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IParser.Strings">
            <summary>
            When implemented by a class, gets or sets a list of strings to parse.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.IParser.Lines">
            <summary>
            When implemented by a class, gets or sets a list of string to parse represented as string array.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ISyntaxParser">
            <summary>
            Represents properties and methods to perform syntax analysis of the text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxParser.ReparseText">
            <summary>
            When implemented by a class, reparses entire text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxParser.ReparseBlock(System.Drawing.Point)">
            <summary>
            When implemented by a class, reparses syntax block at specified position.
            </summary>
            <param name="position">Specifies position to find syntax block.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxParser.ReparseBlock(System.Drawing.Point,Stimulsoft.Editor.ISyntaxNode@,Stimulsoft.Editor.CodeCompletionType)">
            <summary>
            Reparses syntax block at specified position.
            </summary>
            <param name="position">Specifies position to find syntax block.</param>
            <param name="node">Returns node corresponding to the block being reparsed</param>
            <param name="completionType">Specifies code completion reason.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxParser.Outline(System.Collections.IList)">
            <summary>
            When implemented by a class, creates outlined sections for parsed text using result of syntax analysis and fills ranges parameter by the collection of the outlined sections.
            </summary>
            <param name="ranges">Retrieves <c>IOutlineRange</c> collection for outlined sections.</param>
            <returns>Number of outlined sections.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxParser.GetSmartIndent(System.Int32,System.Boolean)">
            <summary>
            When implemented by a class, returns indentation level of specified line.
            </summary>
            <param name="index">Specifies index of line to obtain indentation level.</param>
            <param name="autoIndent">Indicates whether indentation level should be caculated automatically, or obtained from the previous line.</param>
            <returns>Indentation level at line specified by index.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxParser.SmartFormatLine(System.Int32,System.String,System.Int16[])">
            <summary>
            When implemented by a class, formats line according to the parser rules.
            </summary>
            <param name="index">Specifies index of line to format.</param>
            <param name="text">specifies string representation of the line</param>
            <param name="colorData">specifies data containing color information for the given string</param>
            <returns>formatted line.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxParser.GetSyntaxErrors(System.Collections.IList)">
            <summary>
            When implemented by a class, retrieves all syntax errors that <c>ISyntaxParser</c> found while analysing the text.
            </summary>
            <param name="errors">Retrieves a collection of syntax error.</param>
            <returns>Number of syntax errors that are found.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxParser.CodeCompletion(System.String,System.Drawing.Point,Stimulsoft.Editor.CodeCompletionArgs)">
            <summary>
            When implemented by a class, performs code completion for the specified text representing language element.
            </summary>
            <param name="text">Specifies source text.</param>
            <param name="position">Specifies current position in text.</param>
            <param name="e">Contains data for the code completion.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxParser.ProcessAutoComplete(System.Drawing.Point,System.String@)">
            <summary>
            Checks whether end-of-block code needs inserting.
            </summary>
            <param name="position">Specifies current position in text.</param>
            <param name="code">output prameter to return code fragment to be insered</param>
            <returns>true if autocompletion of end-of-block needed; otherwise false</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxParser.GetSingleLineComment">
            <summary>
            When implemented by a class, gets the string that represents start symbol of single line comment.
            </summary>
            <returns>Single line comment string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxParser.GetBlock(System.Drawing.Point,System.Drawing.Point@)">
            <summary>
            When implemented by a class, gets syntax block at specified position.
            </summary>
            <param name="position">Position to find syntax block.</param>
            <param name="blockPt">Retrieves start position of found block.</param>
            <returns><c>ISyntaxNode</c> object containing syntax block.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxParser.GetNodeAt(System.Drawing.Point)">
            <summary>
            When implemented by a class, gets <c>ISyntaxNode</c> that corresponds to the specified position.
            </summary>
            <param name="position">Position to find node.</param>
            <returns><c>ISyntaxNode</c> at specified position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxParser.IsDeclaration(Stimulsoft.Editor.ISyntaxNode)">
            <summary>
            When implemented by a class, indicates whether specified node represents declaration elements.
            </summary>
            <param name="node">Specifies node to check-up.</param>
            <returns>True if specified node represents declaration element; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxParser.FindDeclaration(System.String,System.Drawing.Point)">
            <summary>
            When implemented by a class, finds the declaration node or type at given position.
            </summary>
            <param name="text">Contains string used to perform search.</param>
            <param name="position">Specifies position to find node.</param>
            <returns><c>object</c> that is found.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxParser.FindReferences(Stimulsoft.Editor.ISyntaxNode,Stimulsoft.Editor.ISyntaxNodes)">
            <summary>
            When implemented by a class, locates all references to the node in the text.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> to find references.</param>
            <param name="references">Retrieves references to node.</param>
            <returns>Number of found references.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxParser.ResetOptions">
            <summary>
            When implemented by a class, resets <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxParser.ResetCodeCompletionChars">
            <summary>
            When implemented by a class, resets <c>CodeCompletionChars</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxParser.ResetCodeCompletionStopChars">
            <summary>
            When implemented by a class, resets <c>CodeCompletionStopChars</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxParser.ResetAutoIndentChars">
            <summary>
            When implemented by a class, resets <c>AutoIndentChars</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxParser.ResetSmartFormatChars">
            <summary>
            When implemented by a class, resets <c>SmartFormatChars</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxParser.IsContentDivider(System.Int32)">
            <summary>
            When implemented by a class, gets boolean value indicating whether text content is divided at given line.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxParser.Options">
            <summary>
            When implemented by a class, gets or sets a flags determining syntax parsing and formatting behavior.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxParser.SyntaxTree">
            <summary>
            When implemented by a class, gets or sets a hierarchical collection of <c>ISyntaxNode</c> elements representing abstract syntax tree of the text being parsed.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxParser.CompletionRepository">
            <summary>
            When implemented by a class, gets or sets an <c>ICodeCompletionRepository</c> that holds methods for code completion purposes.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxParser.CodeSnippets">
            <summary>
            When implemented by a class, returns code snippets for the given parser.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxParser.CaseSensitive">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether <c>ISyntaxParser</c> should perform case-sensitive analysis if its content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxParser.UseScheme">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether <c>ISyntaxParser</c> should perform lexical analysis based on it's rules rather than using internal method.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxParser.CodeCompletionChars">
            <summary>
            When implemented by a class, gets or sets a collection of characters that initializes a code completion procedure when typing.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxParser.CodeCompletionStopChars">
            <summary>
            When implemented by a class, gets or sets a collection of characters that finalizes a code completion procedure when typing.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxParser.AutoIndentChars">
            <summary>
            When implemented by a class, gets or sets a collection of characters that initializes an indentation procedure when typing.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxParser.SmartFormatChars">
            <summary>
            When implemented by a class, gets or sets a collection of characters that initializes a smart formatting procedure when typing.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.ISyntaxParser.TextReparsed">
            <summary>
            When implemented by a class, occurs when <c>ISyntaxParser</c> text content is fully parsed.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ICodeCompletionRepository">
            <summary>
            Represents properties and methods to perform code completion functionality.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionRepository.GetNodeType(System.String,Stimulsoft.Editor.ISyntaxNode,System.Drawing.Point)">
            <summary>
            When implemented by a class,o btains information type of the <c>SyntaxNode</c>
            </summary>
            <param name="text">Specifies source text.</param>
            <param name="node">Specifies <c>ISyntaxNode</c> representing a current language element.</param>
            <param name="position">Specifies starting position to search</param>
            <returns>Object represening type of found member.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionRepository.GetMemberType(System.String,Stimulsoft.Editor.ISyntaxNode,System.String@,System.Drawing.Point@,System.Drawing.Point@,Stimulsoft.Editor.StaticScope@)">
            <summary>
            When implemented by a class, obtains information about some language element to perform code completion related operations.
            </summary>
            <param name="text">Specifies source text.</param>
            <param name="node">Specifies <c>ISyntaxNode</c> representing current language element.</param>
            <param name="name">Retrieves name of found language element.</param>
            <param name="position">Specifies position of found language element in the code text and updates it if needed.</param>
            <param name="endPos">Specifies end position of found language element in the code text and updates it if needed.</param>
            <param name="scope">Retrieves information about search constraints for the language element.</param>
            <returns>Object representing information about language element to complete.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionRepository.GetSpecialMemberType(System.String,Stimulsoft.Editor.ISyntaxNode,System.String@,System.Drawing.Point@,System.Drawing.Point@,Stimulsoft.Editor.StaticScope@)">
            <summary>
            When implemented by a class, obtains information about some language element to perform code completion related operations in special cases.
            </summary>
            <param name="text">Specifies source text.</param>
            <param name="node">Specifies <c>ISyntaxNode</c> representing current language element.</param>
            <param name="name">Retrieves name of found language element.</param>
            <param name="position">Specifies position of found language element in the code text and updates it if needed.</param>
            <param name="endPos">Specifies end position of found language element in the code text and updates it if needed.</param>
            <param name="scope">Retrieves information about search constraints for the language element.</param>
            <returns>Object representing information about language element to complete.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionRepository.GetMethodType(System.String,Stimulsoft.Editor.ISyntaxNode,System.String@,System.Drawing.Point@,System.Drawing.Point@,System.Int32@,System.Int32@,Stimulsoft.Editor.StaticScope@)">
            <summary>
            When implemented by a class, obtains information about some method of specified language element.
            </summary>
            <param name="text">Specifies source text.</param>
            <param name="node">Specifies <c>ISyntaxNode</c> represening current language element.</param>
            <param name="name">Retrieves name of found method.</param>
            <param name="position">Retrieves start positon of the method in the code text.</param>
            <param name="endPos">Retrieves end position of the method in the code text.</param>
            <param name="paramIndex">Retrieves index of current parameter in the code text.</param>
            <param name="paramCount">Retrieves number of the parameters.</param>
            <param name="scope">Retrieves information about search constraints for the language element.</param>
            <returns>Object representing information about found method.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionRepository.FillMembers(Stimulsoft.Editor.ISyntaxNode,System.Drawing.Point,Stimulsoft.Editor.IListMembers,System.Object,System.String,Stimulsoft.Editor.StaticScope,System.Int32@)">
            <summary>
            When implemented by a class, fills list members provider with list of its member, providing available choices for the specified language element.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> representing current language element.</param>
            <param name="position">Specifies position of language element in the text.</param>
            <param name="members">Specifies provider to fill with available members.</param>
            <param name="member">Specifies language element.</param>
            <param name="name">Specifies filter used to fill members.</param>
            <param name="scope">Specifies search constraints.</param>
            <param name="selIndex">Specifies index of default list member</param>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionRepository.FillMember(Stimulsoft.Editor.IListMembers,System.Object,System.String,System.Int32,Stimulsoft.Editor.StaticScope)">
            <summary>
            When implemented by a class, obtains information about individual member of specified language element.
            </summary>
            <param name="members">Specifies provider to fill with available members.</param>
            <param name="member">Specifies language element.</param>
            <param name="name">Specifies name of member to retrieve.</param>
            <param name="paramIndex">Specifies index of current member parameter.</param>
            <param name="scope">Specifies search constraints.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionRepository.GetMemberType(Stimulsoft.Editor.ISyntaxNode,System.Drawing.Point,System.Object,System.String,Stimulsoft.Editor.StaticScope@)">
            <summary>
            When implemented by a class, obtains information about a member of some language element.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> representing a current language element.</param>
            <param name="position">Specifies position of language element.</param>
            <param name="member">Specifies language element.</param>
            <param name="name">Specifies name of the member to locate.</param>
            <param name="scope">Retrieves information about search constraints for this language element.</param>
            <returns>Object represening information about found member.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionRepository.GetDescription(Stimulsoft.Editor.IListMembers,Stimulsoft.Editor.ISyntaxNode,System.Object,System.String,System.Boolean)">
            <summary>
            When implemented by a class, obtains description of some language element.
            </summary>
            <param name="members">Specifies ListMembers interface used to get language-specific description.</param>
            <param name="node">Specifies <c>ISyntaxNode</c> that representing language element to describe.</param>
            <param name="member">Specifies language element to describe.</param>
            <param name="name">Specifies name of described language element.</param>
            <param name="fullDescription">Specifies whether description should include name and type of the found element.</param>
            <returns>String that describes specified language element.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionRepository.FindDeclaration(System.String,Stimulsoft.Editor.ISyntaxNode,System.Drawing.Point)">
            <summary>
            When implemented by a class, obtains information about where the language element is declared.
            </summary>
            <param name="text">Specifies the source text.</param>
            <param name="node">Specifies <c>ISyntaxNode</c> representing a current language element.</param>
            <param name="position">Specifies position of language element.</param>
            <returns><c>object</c> representing declaration of the language element.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionRepository.FindReferences(Stimulsoft.Editor.ISyntaxNode,Stimulsoft.Editor.ISyntaxNodes)">
            <summary>
            When implemented by a class, locates all references to the node in the text.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> to find references.</param>
            <param name="references">Retrieves references to node.</param>
            <returns>Number of found references.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionRepository.RegisterSyntaxTree(Stimulsoft.Editor.ISyntaxTree)">
            <summary>
            When implemented by a class, adds specified tree to the list of syntax trees for code-completion related purposes.
            </summary>
            <param name="tree">Specifies <c>ISyntaxTree</c> to add.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionRepository.UnregisterSyntaxTree(Stimulsoft.Editor.ISyntaxTree)">
            <summary>
            When implemented by a class, removes specified tree from the list of syntax trees.
            </summary>
            <param name="tree">Specifies <c>ISyntaxTree</c> to remove.</param>
            <returns>True if succeed (tree is present in the tree list); otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionRepository.RegisterSnippet(System.String,System.Boolean)">
            <summary>
            When implemented by a class, registers snippet to be displayed in code completion window
            </summary>
            <param name="snippet">Specifies name of snippet to be displayed</param>
            <param name="isStatement">Specifies whether snippet will have statement image index</param>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionRepository.UnregisterSnippet(System.String)">
            <summary>
            When implemented by a class, removes specified snippet from the list of snippets.
            </summary>
            <param name="snippet">Specifies name of snippet to be removed</param>
            <returns>True if succeed; otherwise false</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ICodeCompletionRepository.GetCodeSnippets(System.String)">
            <summary>
            When implemented by a class, returns code snippets for the given language.
            </summary>
            <param name="language">Represents a language</param>
            <returns>ICodeSnippetsProvider instance for a given language.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionRepository.FillBaseMembers">
            <summary>
            When implemented by a class, indicates whether members of <c>Object</c> class should be present in the member collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionRepository.CaseSensitive">
            <summary>
            When implemented by a class, indicates whether searching for language element's members should be case sensitive.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionRepository.SyntaxTree">
            <summary>
            When implemented by a class, gets or sets a hierarchical collection of <c>ISyntaxNode</c> elements.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ICodeCompletionRepository.SyntaxTrees">
            <summary>
            When implemented by a class, gets or sets list of <c>ISyntaxTree</c> objects attached to this <c>ICodeCompletionRepository</c>.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.ICodeCompletionRepository.MemberLookup">
            <summary>
            When implemented by a class, occurs while trying to obtain information about some member of language element.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.ICodeCompletionRepository.DescriptionLookup">
            <summary>
            When implemented by a class, occurs while trying to obtain description of some language element.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.SyntaxNodeOptions">
            <summary>
            Defines syntax node behavior.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SyntaxNodeOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SyntaxNodeOptions.Indentation">
            <summary>
            Specifies that syntax node increments indentation level.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SyntaxNodeOptions.BackIndentation">
            <summary>
            Specifies that syntax node decrements indentation level.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SyntaxNodeOptions.KeepIndentation">
            <summary>
            Specifies that syntax node preserves indentation level.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SyntaxNodeOptions.Outlining">
            <summary>
            Specifies that syntax node can be outlined.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.SyntaxNodeOptions.CodeCompletion">
            <summary>
            Specifies that syntax node supports code completion functionality.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ISyntaxNodes">
            <summary>
            Represents collection containing list of syntax nodes.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxNodes.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to individual <c>ISyntaxNode</c> stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ISyntaxAttributes">
            <summary>
            Represents collection containing list of syntax attributes.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxAttributes.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to individual <c>ISyntaxAttribute</c> stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ISyntaxErrors">
            <summary>
            Represents collection containing list of syntax errors.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxErrors.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to individual <c>ISyntaxError</c> stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ISyntaxNode">
            <summary>
            Represents properties and methods to describe a particular language element.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxNode.Clear">
            <summary>
            When implemented by a class, removes all elements from child nodes, attribute and error collections.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxNode.AddChild(Stimulsoft.Editor.ISyntaxNode)">
            <summary>
            When implemented by a class, adds specified node to the child collection.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> to add.</param>
            <returns>Index of added node within the child collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxNode.AddChild">
            <summary>
            When implemented by a class, creates a new <c>ISyntaxNode</c> and adds it to the child collection.
            </summary>
            <returns><c>ISyntaxNode</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxNode.InsertChild(Stimulsoft.Editor.ISyntaxNode,System.Collections.IComparer)">
            <summary>
            When implemented by a class, inserts specified node to the child collection.
            </summary>
            <param name="node">Specifies node to insert.</param>
            <param name="comparer">Specifies method that compares nodes in the sorted child collection.</param>
            <returns>Index of inserted node in the child collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxNode.AddChildren(Stimulsoft.Editor.ISyntaxNodes)">
            <summary>
            When implemented by a class, adds specified nodes to the child collection.
            </summary>
            <param name="nodes">Specifies list of nodes to add.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxNode.AddAttribute(Stimulsoft.Editor.ISyntaxAttribute)">
            <summary>
            When implemented by a class, adds specified attribute to the attribute collection.
            </summary>
            <param name="attr">Specifies <c>ISyntaxAttribute</c> to add.</param>
            <returns>Index of added attribute in the attribute collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxNode.AddAttribute">
            <summary>
            When implemented by a class, creates a new <c>ISyntaxAttribute</c> and adds it to the attribute collection.
            </summary>
            <returns><c>ISyntaxAttribute</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxNode.AddAttributes(Stimulsoft.Editor.ISyntaxAttributes)">
            <summary>
            When implemented by a class, adds specified attributes to the attribute collection.
            </summary>
            <param name="attrs">Specifies list of attributes to add.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxNode.AddError(Stimulsoft.Editor.ISyntaxError)">
            <summary>
            When implemented by a class, adds specified error to the error collection.
            </summary>
            <param name="err">Specifies <c>ISyntaxError</c> to add.</param>
            <returns>Number of added error in the error collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxNode.AddError">
            <summary>
            When implemented by a class, creates a new <c>ISyntaxError</c> and add it to the error collection.
            </summary>
            <returns><c>ISyntaxError</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxNode.AddErrors(Stimulsoft.Editor.ISyntaxErrors)">
            <summary>
            When implemented by a class, adds specified errors to the error collection.
            </summary>
            <param name="errs">Specifies list of errors to add.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxNode.FindNode(System.String)">
            <summary>
            When implemented by a class, finds child node by its name.
            </summary>
            <param name="name">Specifies name of node.</param>
            <returns>First occurence of <c>ISyntaxNode</c> with specified name.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxNode.FindNode(System.Int32)">
            <summary>
            When implemented by a class, finds child node by its type.
            </summary>
            <param name="nodeType">Specifies type of node.</param>
            <returns>First occurence of <c>ISyntaxNode</c> with specified type.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxNode.FindNode(System.Object,System.Collections.IComparer)">
            <summary>
            When implemented by a class, finds specified child node.
            </summary>
            <param name="obj">Specifies node to locate.</param>
            <param name="comparer">Specifies method that compares nodes in the sorted child collection.</param>
            <returns><c>ISyntaxNode</c> that is located.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxNode.FindAttribute(System.String)">
            <summary>
            When implemented by a class, finds attribute by its name.
            </summary>
            <param name="name">Specifies name of attribute</param>
            <returns>First occurence of <c>ISyntaxAttribute</c> with specified name.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxNode.Sort(System.Collections.IComparer)">
            <summary>
            When implemented by a class, sorts the <c>ISyntaxNode</c> in the child list using the specified comparer.
            </summary>
            <param name="comparer">The IComparer implementation to use when comparing nodes.</param>
            <remarks>This method is recursive, so if some node in the child collection has childs they are also sorted.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxNode.GetIndent(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, returns indentation level of this syntax node.
            </summary>
            <param name="index">Specifies line to obtain indentation level.</param>
            <param name="indent">Default value of indentation level.</param>
            <returns>Indentation level of the node at the specified position.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxNode.Range">
            <summary>
            When implemented by a class, gets or sets node scope.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxNode.Position">
            <summary>
            When implemented by a class, gets or sets node position in the code text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxNode.Size">
            <summary>
            When implemented by a class, gets or sets node dimension.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxNode.Name">
            <summary>
            When implemented by a class, gets or sets node name.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxNode.NodeType">
            <summary>
            When implemented by a class, gets or sets type of the node.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxNode.Parent">
            <summary>
            When implemented by a class, gets or sets <c>ISyntaxNode</c> that holds this node in its child list.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxNode.Root">
            <summary>
            When implemented by a class, represents root level <c>ISyntaxNode</c> in the syntax tree.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxNode.Options">
            <summary>
            When implemented by a class, gets or sets node options that defines its behavior.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxNode.Childs">
            <summary>
            When implemented by a class, gets or sets a collection of child nodes in the form of array.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxNode.Attributes">
            <summary>
            When implemented by a class, gets or sets an attribute collection in the form of array.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxNode.Errors">
            <summary>
            When implemented by a class, gets or sets an error collection in the form of array.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxNode.ChildList">
            <summary>
            When implemented by a class, gets a list of child nodes.
            </summary>
            <remarks>If there is no child nodes, contains null reference.</remarks>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxNode.AttributeList">
            <summary>
            When implemented by a class, gets a list of attributes
            </summary>
            <remarks>If there is no attributes, contains null reference.</remarks>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxNode.ErrorList">
            <summary>
            When implemented by a class, gets a list of syntax errors
            </summary>
            <remarks>If there is no errors, contains null reference.</remarks>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxNode.HasChildren">
            <summary>
            When implemented by a class, indicates whether node has children.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxNode.HasAttributes">
            <summary>
            When implemented by a class, indicates whether node has attributes.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxNode.HasErrors">
            <summary>
            When implemented by a class, indicates whether node has errors.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxNode.Level">
            <summary>
            When implemented by a class, represents node level inside SyntaxTree.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxNode.ChildCount">
            <summary>
            When implemented by a class, represents number of children in the child collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxNode.AttributeCount">
            <summary>
            When implemented by a class, represents number of attributes in the attribute collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxNode.ErrorCount">
            <summary>
            When implemented by a class, represents number of syntax errors in the error collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxNode.Index">
            <summary>
            When implemented by a class, represents index of then node within its parent child collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ISyntaxAttribute">
            <summary>
            Represents properties to describe a particular attribute of language element.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxAttribute.Name">
            <summary>
            When implemented by a class, get or sets attribute name.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxAttribute.Value">
            <summary>
            When implemented by a class, get or sets value of the attribute.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxAttribute.Position">
            <summary>
            When implemented by a class, get or sets attribute position in the code text.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ISyntaxError">
            <summary>
            Represents properties to describe a particular syntax error in the code text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxError.Name">
            <summary>
            When implemented by a class, gets or sets error name.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxError.Description">
            <summary>
            When implemented by a class, gets or sets error description (reason).
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxError.Position">
            <summary>
            When implemented by a class, gets or sets error position in the code text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxError.Size">
            <summary>
            When implemented by a class, gets or sets error dimension.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxError.Range">
            <summary>
            When implemented by a class, gets or sets error scope.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.ISyntaxTree">
            <summary>
            Represents properties and methods to describe syntax structure of code text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxTree.Clear">
            <summary>
            When implemented by a class, removes all nodes from <c>ISyntaxTree</c> node collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxTree.Push(Stimulsoft.Editor.ISyntaxNode)">
            <summary>
            When implemented by a class, adds specified node to the stack of nodes.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> to add.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxTree.Pop">
            <summary>
            When implemented by a class, removes last added node from the stack of nodes.
            </summary>
            <returns><c>ISyntaxNode</c> that is removed.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxTree.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, removes all nodes from the node collection which position in the specified rectangle.
            </summary>
            <param name="rect">Specified rectangle to remove syntax nodes.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxTree.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32,Stimulsoft.Editor.UpdateReason)">
            <summary>
            When implemented by a class, changes positions of any syntax nodes and its elements located next to the specified position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies start position to change.</param>
            <param name="y">The Y-constituent of the Point value that specifies start position to change.</param>
            <param name="deltaX">Specifies horizontal displacement.</param>
            <param name="deltaY">Specifies vertical displacement.</param>
            <param name="reason">Specifies the reason of change.</param>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxTree.FindNode(System.Object,System.Collections.IComparer)">
            <summary>
            When implemented by a class, finds specified node.
            </summary>
            <param name="obj">Specifies node to locate.</param>
            <param name="comparer">Specifies method that compares nodes in the sorted node collection.</param>
            <returns><c>ISyntaxNode</c> that is located.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.ISyntaxTree.Sort(System.Collections.IComparer)">
            <summary>
            When implemented by a class, sorts all <c>ISyntaxNode</c> in the node collection using the specified comparer.
            </summary>
            <param name="comparer">The IComparer implementation to use when comparing nodes.</param>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxTree.Root">
            <summary>
            When implemented by a class, represents root level <c>ISyntaxNode</c> in this syntax tree.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.ISyntaxTree.Current">
            <summary>
            When implemented by a class, represents current <c>ISyntaxNode</c> in the node collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.SyntaxParser">
            <summary>
            Represents properties and methods to perform syntax analysis of the text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.#ctor">
            <summary>
            Initializes a new instance of the <c>SyntaxParser</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.ParseText(System.Int32,System.Int32,System.String,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Performs lexical analysis of given text.
            </summary>
            <param name="state">Specifies start lexical state.</param>
            <param name="line">Specifies current line within the text.</param>
            <param name="s">Text to analyse.</param>
            <param name="pos">Starting position.</param>
            <param name="len">Integer value to receive length of parsed element.</param>
            <param name="token">Retrieves style of text being parsed.</param>
            <returns>Final lexical state.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.ParseText(System.Int32,System.Int32,System.String,System.Int16[]@)">
            <summary>
            Performs lexical analysis of given text.
            </summary>
            <param name="state">Specifies start lexical state.</param>
            <param name="line">Specifies current line within the text.</param>
            <param name="str">Text to analyse.</param>
            <param name="colorData">Receives color data representing lexical information of the given text.</param>
            <returns>Final lexical state.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.LoadFile(System.String)">
            <summary>
            Loads the contents of the specified file.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.LoadFile(System.String,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified file with specified encoding.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.LoadStream(System.IO.TextReader)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.LoadStream(System.IO.Stream)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.LoadStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.Outline(System.Collections.IList)">
            <summary>
            Creates outlined sections for parsed text using result of syntax analysis and fills ranges parameter by the collection of the outlined sections.
            </summary>
            <param name="ranges">Retrieves <c>IOutlineRange</c> collection for outlined sections.</param>
            <returns>Number of outlined sections.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.GetSmartIndent(System.Int32,System.Boolean)">
            <summary>
            Returns indentation level of specified line.
            </summary>
            <param name="index">Specifies index of line to obtain indentation level.</param>
            <param name="autoIndent">Indicates whether indentation level should be caculated automatically, or obtained from the previous line.</param>
            <returns>Indentation level at line specified by index.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.SmartFormatLine(System.Int32,System.String,System.Int16[])">
            <summary>
            Formats line according to the parser rules.
            </summary>
            <param name="index">Specifies index of line to format.</param>
            <param name="text">specifies string representation of the line</param>
            <param name="colorData">specifies data containing color information for the given string</param>
            <returns>formatted line.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.CreateRepository">
            <summary>
            Creates <c>ICodeCompletionRepository</c> to perform code completion functionality for this parser.
            </summary>
            <returns><c>ICodeCompletionRepository</c> that is created.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.GetCompletionType(Stimulsoft.Editor.CodeCompletionArgs)">
            <summary>
            Obtains type of code completion window from specifies <c>CodeCompletionArgs</c> parameter.
            </summary>
            <param name="e">Contains data of code completion window.</param>
            <returns><c>CodeCompletionType</c> data of window to popup.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.ProcessAutoComplete(System.Drawing.Point,System.String@)">
            <summary>
            Checks whether end-of-block code needs inserting.
            </summary>
            <param name="position">Specifies current position in text.</param>
            <param name="code">output prameter to return code fragment to be insered</param>
            <returns>true if autocompletion of end-of-block needed; otherwise false</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.CodeCompletion(System.String,System.Drawing.Point,Stimulsoft.Editor.CodeCompletionArgs)">
            <summary>
            Performs code completion for the specified text representing language element.
            </summary>
            <param name="text">Specifies source text.</param>
            <param name="position">Specifies current position in text.</param>
            <param name="e">Contains data for the code completion.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.GetSyntaxErrors(System.Collections.IList)">
            <summary>
            Retrieves all syntax errors found while analysing the text.
            </summary>
            <param name="errors">Retrieves a collection of syntax error.</param>
            <returns>Number of syntax errors that are found.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.GetSingleLineComment">
            <summary>
            Gets the string that represents start symbol of single line comment.
            </summary>
            <returns>Single line comment string.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.Reset">
            <summary>
            Resets <c>SyntaxParser</c> to the start position.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.GetBlock(System.Drawing.Point,System.Drawing.Point@)">
            <summary>
            Obtains block node at specified position.
            </summary>
            <param name="position">Position to check-up.</param>
            <param name="blockPt">Retrieves position of block node.</param>
            <returns><c>ISyntaxNode</c> node representing block statement.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.IsDeclaration(Stimulsoft.Editor.ISyntaxNode)">
            <summary>
            Indicates whether specified node represents declaration elements.
            </summary>
            <param name="node">Specifies node to check-up.</param>
            <returns>True if specified node represents declaration element; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.GetNodeAt(System.Drawing.Point)">
            <summary>
            Gets <c>ISyntaxNode</c> that corresponds to the specified position.
            </summary>
            <param name="position">Position to find node.</param>
            <returns><c>ISyntaxNode</c> at specified position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.FindDeclaration(System.String,System.Drawing.Point)">
            <summary>
            Finds the declaration node at given position.
            </summary>
            <param name="text">Contains string used to perform search.</param>
            <param name="position">Specifies position to find node.</param>
            <returns><c>ISyntaxNode</c> node representing declaration.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.FindReferences(Stimulsoft.Editor.ISyntaxNode,Stimulsoft.Editor.ISyntaxNodes)">
            <summary>
            Locates all references to the node in the text.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> to find references.</param>
            <param name="references">Retrieves references to node.</param>
            <returns>Number of found references.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.ReparseBlock(System.Drawing.Point)">
            <summary>
            Reparses syntax block at specified position.
            </summary>
            <param name="position">Specifies position to find syntax block.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.ReparseBlock(System.Drawing.Point,Stimulsoft.Editor.ISyntaxNode@,Stimulsoft.Editor.CodeCompletionType)">
            <summary>
            Reparses syntax block at specified position.
            </summary>
            <param name="position">Specifies position to find syntax block.</param>
            <param name="node">Returns node corresponding to the block being reparsed</param>
            <param name="completionType">Specifies code completion reason.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.ReparseText">
            <summary>
            Reparses entire text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.GetNodeForCodeCompletion(System.Drawing.Point)">
            <summary>
            Returns syntax node corresponding to current position.
            </summary>
            <param name="position">specifies given position</param>
            <returns>Syntax node at given position.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.IsContentDivider(System.Int32)">
            <summary>
            Gets boolean value indicating whether text content is divided at given line.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.ResetOptions">
            <summary>
            Resets <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.ResetCodeCompletionChars">
            <summary>
            Resets <c>CodeCompletionChars</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.ResetCodeCompletionStopChars">
            <summary>
            Resets <c>CodeCompletionStopChars</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.ResetAutoIndentChars">
            <summary>
            Resets <c>AutoIndentChars</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.ResetSmartFormatChars">
            <summary>
            Resets <c>SmartFormatChars</c> to the default value.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.ShouldSerializeCodeCompletionChars">
            <summary>
            Indicates whether the <c>CodeCompletionChars</c> property should be persisted.
            </summary>
            <returns>True if <c>CodeCompletionChars</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.ShouldSerializeCodeCompletionStopChars">
            <summary>
            Indicates whether the <c>CodeCompletionStopChars</c> property should be persisted.
            </summary>
            <returns>True if <c>CodeCompletionStopChars</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.ShouldSerializeSmartFormatChars">
            <summary>
            Indicates whether the <c>SmartFormatChars</c> property should be persisted.
            </summary>
            <returns>True if <c>SmartFormatChars</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxParser.ShouldSerializeAutoIndentChars">
            <summary>
            Indicates whether the <c>AutoIndentChars</c> property should be persisted.
            </summary>
            <returns>True if <c>AutoIndentChars</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxParser.Options">
            <summary>
            Gets or sets a flags determining syntax parsing and formatting behavior.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxParser.SyntaxTree">
            <summary>
            Gets or sets a hierarchical collection of <c>ISyntaxNode</c> elements representing abstract syntax tree of the text being parsed.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxParser.CaseSensitive">
            <summary>
            Gets or sets a boolean value that indicates whether <c>SyntaxParser</c> should perform case-sensitive analysis of its content.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxParser.UseScheme">
            <summary>
            Gets or sets a boolean value that indicates whether <c>ISyntaxParser</c> should perform lexical analysis based on it's rules rather than using internal method.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxParser.CompletionRepository">
            <summary>
            Gets or sets an <c>ICodeCompletionRepository</c> that holds methods for code completion purposes.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxParser.CodeSnippets">
            <summary>
            When implemented by a class, returns code snippets for the given parser.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxParser.CodeCompletionChars">
            <summary>
            Gets or sets a collection of characters that initializes a code completion procedure when typing.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxParser.CodeCompletionStopChars">
            <summary>
            Gets or sets a collection of characters that finalizes a code completion procedure when typing.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxParser.SmartFormatChars">
            <summary>
            Gets or sets a collection of characters that initializes a smart formatting procedure when typing.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxParser.AutoIndentChars">
            <summary>
            Gets or sets a collection of characters that initializes an indentation procedure when typing.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxParser.XmlScheme">
            <summary>
            Gets or sets an xml representation of <c>Scheme</c> property.
            </summary>
        </member>
        <member name="E:Stimulsoft.Editor.SyntaxParser.TextReparsed">
            <summary>
            Occurs when <c>SyntaxParser</c> text content is fully parsed.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.SyntaxNode">
            <summary>
            Represents a particular language element.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxNode.#ctor">
            <summary>
            Initializes a new instance of the <c>SyntaxNode</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxNode.#ctor(System.Drawing.Point,System.String)">
            <summary>
            Initializes a new instance of the <c>SyntaxNode</c> class with specified parameters.
            </summary>
            <param name="position">Specifies node Position.</param>
            <param name="name">Specifies node Name.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxNode.Finalize">
            <summary>
            Destroys the instance of the <c>SyntaxNode</c> class.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxNode.#ctor(System.Drawing.Point,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <c>SyntaxNode</c> class with specified parameters.
            </summary>
            <param name="position">Specifies node Position.</param>
            <param name="name">Specifies node Name.</param>
            <param name="nodeType">Specifies node type.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxNode.#ctor(System.Drawing.Point,System.String,System.Int32,Stimulsoft.Editor.SyntaxNodeOptions)">
            <summary>
            Initializes a new instance of the <c>SyntaxNode</c> class with specified parameters.
            </summary>
            <param name="position">Specifies node Position.</param>
            <param name="name">Specifies node Name.</param>
            <param name="nodeType">Specifies node type.</param>
            <param name="options">Specifies node options.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxNode.ToString">
            <summary>
            Returns a <c>String</c> that represents the current <c>SyntaxNode</c>.
            </summary>
            <returns>A <c>String</c>> that represents the current <c>SyntaxNode.</c></returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxNode.FindLast(System.Object,System.Int32@,System.Collections.IComparer)">
            <summary>
            Locates last child node matching the specified obj parameter.
            </summary>
            <param name="obj">Specifies node to locate.</param>
            <param name="index">Receives index of found node in the child collection.</param>
            <param name="comparer">Specifies method that compares nodes in the sorted child collection.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxNode.Clear">
            <summary>
            Removes all elements from child nodes, attribute and error collections.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxNode.AddChild(Stimulsoft.Editor.ISyntaxNode)">
            <summary>
            Adds specified node to the child collection.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> to add.</param>
            <returns>Index of added node within the child collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxNode.InsertChild(Stimulsoft.Editor.ISyntaxNode,System.Collections.IComparer)">
            <summary>
            Inserts specified node to the child collection.
            </summary>
            <param name="node">Specifies node to insert.</param>
            <param name="comparer">Specifies method that compares nodes in the sorted child collection.</param>
            <returns>Index of inserted node in the child collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxNode.AddChild">
            <summary>
            Creates a new <c>ISyntaxNode</c> and adds it to the child collection.
            </summary>
            <returns><c>ISyntaxNode</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxNode.AddChildren(Stimulsoft.Editor.ISyntaxNodes)">
            <summary>
            Adds specified nodes to the child collection.
            </summary>
            <param name="nodes">Specifies list of nodes to add.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxNode.AddAttribute(Stimulsoft.Editor.ISyntaxAttribute)">
            <summary>
            Adds specified attribute to the attribute collection.
            </summary>
            <param name="attr">Specifies <c>ISyntaxAttribute</c> to add.</param>
            <returns>Index of added attribute in the attribute collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxNode.AddAttribute">
            <summary>
            Creates a new <c>ISyntaxAttribute</c> and adds it to the attribute collection.
            </summary>
            <returns><c>ISyntaxAttribute</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxNode.AddAttributes(Stimulsoft.Editor.ISyntaxAttributes)">
            <summary>
            Adds specified attributes to the attribute collection.
            </summary>
            <param name="attrs">Specifies list of attributes to add.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxNode.AddError(Stimulsoft.Editor.ISyntaxError)">
            <summary>
            Adds specified error to the error collection.
            </summary>
            <param name="err">Specifies <c>ISyntaxError</c> to add.</param>
            <returns>Number of added error in the error collection.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxNode.AddError">
             <summary>
            Creates a new <c>ISyntaxError</c> and add it to the error collection.
             </summary>
             <returns><c>ISyntaxError</c> that is added.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxNode.AddErrors(Stimulsoft.Editor.ISyntaxErrors)">
            <summary>
            Adds specified errors to the error collection.
            </summary>
            <param name="errs">Specifies list of errors to add.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxNode.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the <c>ISyntaxNode</c> in the child list using the specified comparer.
            </summary>
            <param name="comparer">The IComparer implementation to use when comparing nodes.</param>
            <remarks>This method is recursive, so if some node in the child collection has childs they are also sorted.</remarks>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxNode.FindNode(System.String)">
            <summary>
            Finds child node by its name.
            </summary>
            <param name="name">Specifies name of node.</param>
            <returns>First occurence of <c>ISyntaxNode</c> with specified name.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxNode.FindNode(System.Int32)">
            <summary>
            Finds child node by its type.
            </summary>
            <param name="nodeType">Specifies type of node.</param>
            <returns>First occurence of <c>ISyntaxNode</c> with specified type.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxNode.FindNode(System.Object,System.Collections.IComparer)">
            <summary>
            Finds child node by comparing nodes with the given object.
            </summary>
            <param name="obj">Specifies node to locate.</param>
            <param name="comparer">Specifies method that compares nodes in the sorted child collection.</param>
            <returns><c>ISyntaxNode</c> that is located.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxNode.FindAttribute(System.String)">
            <summary>
            Finds attribute by its name.
            </summary>
            <param name="name">Specifies name of attribute</param>
            <returns>First occurence of <c>ISyntaxAttribute</c> with specified name.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxNode.GetIndent(System.Int32,System.Int32)">
            <summary>
            Returns indentation level of this syntax node.
            </summary>
            <param name="index">Specifies line to obtain indentation level.</param>
            <param name="indent">Default value of indentation level.</param>
            <returns>Indentation level of the node at the specified position.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxNode.Parent">
            <summary>
            Gets or sets <c>ISyntaxNode</c> that holds this node in its child list.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxNode.Root">
            <summary>
            Represents root level <c>ISyntaxNode</c> in the syntax tree.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxNode.Range">
            <summary>
            Gets or sets node scope.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxNode.Position">
            <summary>
            Gets or sets node position in the code text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxNode.Size">
            <summary>
            Gets or sets node dimension.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxNode.Name">
            <summary>
            Gets or sets node name.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxNode.NodeType">
            <summary>
            Gets or sets type of the node.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxNode.Childs">
            <summary>
            Gets or sets a collection of child nodes in the form of array.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxNode.Attributes">
            <summary>
            Gets or sets an attribute collection in the form of array.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxNode.Errors">
            <summary>
            Gets or sets an error collection in the form of array.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxNode.ChildList">
            <summary>
            Gets a list of child nodes.
            </summary>
            <remarks>If there is no child nodes, contains null reference.</remarks>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxNode.AttributeList">
            <summary>
            Gets a list of attributes.
            </summary>
            <remarks>If there is no attributes, contains null reference.</remarks>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxNode.ErrorList">
            <summary>
            Gets a list of syntax errors.
            </summary>
            <remarks>If there is no errors, contains null reference.</remarks>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxNode.HasChildren">
            <summary>
            Indicates whether node has children.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxNode.HasAttributes">
            <summary>
            Indicates whether node has attributes.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxNode.HasErrors">
            <summary>
            Indicates whether node has errors.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxNode.Options">
            <summary>
            Gets or sets node options that defines its behavior.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxNode.ChildCount">
            <summary>
            Represents number of children in the child collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxNode.AttributeCount">
            <summary>
            Represents number of attributes in the attribute collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxNode.ErrorCount">
            <summary>
            Represents number of syntax errors in the error collection.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxNode.Level">
            <summary>
            Represents node level inside SyntaxTree.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxNode.Index">
            <summary>
            Represents index of then node within its parent child collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.SyntaxNodes">
            <summary>
            Represents collection containing list of syntax nodes.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxNodes.Item(System.Int32)">
            <summary>
            Provides an indexed access to individual <c>ISyntaxNode</c> stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.SyntaxAttributes">
            <summary>
            Represents collection containing list of syntax attributes.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxAttributes.Item(System.Int32)">
            <summary>
            Provides an indexed access to individual <c>ISyntaxAttribute</c> stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.SyntaxErrors">
            <summary>
            Represents collection containing list of syntax errors.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxErrors.Item(System.Int32)">
            <summary>
            Provides an indexed access to individual <c>ISyntaxError</c> stored in the collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.SyntaxAttribute">
            <summary>
            Represents a particular attribute of language element.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxAttribute.#ctor">
            <summary>
            Initializes a new instance of the <c>SyntaxAttribute</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxAttribute.#ctor(System.Drawing.Point,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <c>SyntaxAttribute</c> class with specified parameters.
            </summary>
            <param name="position">Specified attribute Position.</param>
            <param name="name">Specifies attribute Name.</param>
            <param name="value">Specifies attribute Value.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxAttribute.ToString">
            <summary>
            Returns a <c>String</c> that represents the current <c>SyntaxAttribute</c>.
            </summary>
            <returns>A <c>String</c>> that represents the current <c>SyntaxAttribute.</c></returns>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxAttribute.Name">
            <summary>
            Get or sets attribute name.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxAttribute.Value">
            <summary>
            Get or sets value of the attribute.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxAttribute.Position">
            <summary>
            Get or sets attribute position in the code text.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.SyntaxError">
            <summary>
            Describes a particular syntax error in the code text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxError.#ctor">
            <summary>
            Initializes a new instance of the <c>SyntaxError</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxError.#ctor(System.Drawing.Point,System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>SyntaxError</c> class with specified parameters.
            </summary>
            <param name="position">Specifies error Position.</param>
            <param name="name">Specifies error Name.</param>
            <param name="description">Specifies error Description.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxError.ToString">
            <summary>
            Returns a <c>String</c> that represents the current <c>SyntaxError</c>.
            </summary>
            <returns>A <c>String</c>> that represents the current <c>SyntaxError.</c></returns>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxError.Name">
            <summary>
            Gets or sets error name.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxError.Description">
            <summary>
            Gets or sets error description (reason).
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxError.Range">
            <summary>
            Gets or sets error scope.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxError.Position">
            <summary>
            Gets or sets error position in the code text.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxError.Size">
            <summary>
            Gets or sets error dimension.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.SyntaxTree">
            <summary>
            Describes syntax structure of code text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxTree.#ctor">
            <summary>
            Initializes a new instance of the <c>SyntaxTree</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxTree.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            Removes all nodes from the node collection which position in the specified rectangle.
            </summary>
            <param name="rect">Specified rectangle to remove syntax nodes.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxTree.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32,Stimulsoft.Editor.UpdateReason)">
            <summary>
            Changes positions of any syntax nodes and its elements located next to the specified position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies start position to change.</param>
            <param name="y">The Y-constituent of the Point value that specifies start position to change.</param>
            <param name="deltaX">Specifies horizontal displacement.</param>
            <param name="deltaY">Specifies vertical displacement.</param>
            <param name="reason">Specifies the reason of change.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxTree.Push(Stimulsoft.Editor.ISyntaxNode)">
            <summary>
            Adds specified node to the stack of nodes.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> to add.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxTree.Pop">
            <summary>
            Removes last added node from the stack of nodes.
            </summary>
            <returns><c>ISyntaxNode</c> that is removed.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxTree.Sort(System.Collections.IComparer)">
            <summary>
            Sorts all <c>ISyntaxNode</c> in the node collection using the specified comparer.
            </summary>
            <param name="comparer">The IComparer implementation to use when comparing nodes.</param>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxTree.Clear">
            <summary>
            Removes all nodes from <c>SyntaxTree</c> node collection.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.SyntaxTree.FindNode(System.Object,System.Collections.IComparer)">
            <summary>
            Finds specified node.
            </summary>
            <param name="obj">Specifies node to locate.</param>
            <param name="comparer">Specifies method that compares nodes in the sorted node collection.</param>
            <returns><c>ISyntaxNode</c> that is located.</returns>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxTree.Root">
            <summary>
            Represents root level <c>ISyntaxNode</c> in this syntax tree.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.SyntaxTree.Current">
            <summary>
            Represents current <c>ISyntaxNode</c> (node on top of the stack) in the node collection.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlHelper">
            <summary>
            Represents methods to serialize color structure to XML.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlHelper.SerializeColor(System.Drawing.Color)">
            <summary>
            Serializes specified color.
            </summary>
            <param name="color">Color to serialize.</param>
            <returns>String representation of given color.</returns>
        </member>
        <member name="M:Stimulsoft.Editor.XmlHelper.DeserializeColor(System.String)">
            <summary>
            Deserializes specified string representation of color to Color structure.
            </summary>
            <param name="color">Specifies string to deserialize.</param>
            <returns>Color structure obtained from stirng representation.</returns>
        </member>
        <member name="T:Stimulsoft.Editor.XmlLexerInfo">
            <summary>
            Contains information about <c>Lexer</c> object's settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlLexerInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlLexerInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlLexerInfo.#ctor(Stimulsoft.Editor.Lexer)">
            <summary>
            Initializes a new instance of the <c>XmlLexerInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>Lexer</c> object to store settings.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XmlLexerInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlLexerInfo.FixupReferences(Stimulsoft.Editor.Lexer)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="P:Stimulsoft.Editor.XmlLexerInfo.DefaultState">
            <summary>
            Stores <c>Lexer.DefaultState</c> property.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlListMembersInfo">
            <summary>
            Contains information about <c>ListMembers</c> object's settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlListMembersInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlListMembersInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlListMembersInfo.#ctor(Stimulsoft.Editor.ListMembers)">
            <summary>
            Initializes a new instance of the <c>XmlListMembersInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ListMembers</c> object to store settings.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XmlListMembersInfo.FixupReferences(Stimulsoft.Editor.ListMembers)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="P:Stimulsoft.Editor.XmlListMembersInfo.ShowDescriptions">
            <summary>
            Stores <c>ListMembers.ShowHints</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlListMembersInfo.ShowHints">
            <summary>
            Stores <c>ListMembers.ShowHints</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlListMembersInfo.ShowQualifiers">
            <summary>
            Stores <c>ListMembers.ShowQualifiers</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlListMembersInfo.ShowResults">
            <summary>
            Stores <c>ListMembers.ShowResults</c> property.
            </summary>
        </member>
        <member name="P:Stimulsoft.Editor.XmlListMembersInfo.ShowParams">
            <summary>
            Stores <c>ListMembers.ShowParams</c> property.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlQuickInfo">
            <summary>
            Contains information about <c>QuickInfo</c> object's settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlQuickInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlQuickInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlQuickInfo.#ctor(Stimulsoft.Editor.QuickInfo)">
            <summary>
            Initializes a new instance of the <c>XmlQuickInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>QuickInfo</c> object to store settings.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XmlQuickInfo.FixupReferences(Stimulsoft.Editor.QuickInfo)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="P:Stimulsoft.Editor.XmlQuickInfo.Text">
            <summary>
            Stores <c>QuickInfo.Text</c> property.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlCodeSnippetsInfo">
            <summary>
            Contains information about <c>CodeSnippets</c> object's settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlCodeSnippetsInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetsInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlCodeSnippetsInfo.#ctor(Stimulsoft.Editor.CodeSnippets)">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetsInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>CodeSnippets</c> object to store settings.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XmlCodeSnippetsInfo.FixupReferences(Stimulsoft.Editor.CodeSnippets)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="P:Stimulsoft.Editor.XmlCodeSnippetsInfo.CodeSnippets">
            <summary>
            Stores <c>CodeSnippets</c> indexer.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlCodeSnippetMembersInfo">
            <summary>
            Contains information about <c>CodeSnippetMembers</c> object's settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlCodeSnippetMembersInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetMembersInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlCodeSnippetMembersInfo.#ctor(Stimulsoft.Editor.CodeSnippetMembers)">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetMembersInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>CodeSnippetMembers</c> object to store settings.</param>
        </member>
        <member name="M:Stimulsoft.Editor.XmlCodeSnippetMembersInfo.FixupReferences(Stimulsoft.Editor.CodeSnippetMembers)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="P:Stimulsoft.Editor.XmlCodeSnippetMembersInfo.CodeSnippetMembers">
            <summary>
            Stores <c>CodeSnippetMembers.Members</c> property.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlParser">
            <summary>
            Represents properties and methods to perform syntax analysis of specified xml code text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlParser.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlParser</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlParser.ReparseText">
            <summary>
            Reparses entire text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlParser.ResetOptions">
            <summary>
            Resets <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlCommentParser">
            <summary>
            Represents properties and methods to perform syntax analysis of specified xml code text.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlCommentParser.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlCommentParser</c> class with default settings.
            </summary>
        </member>
        <member name="M:Stimulsoft.Editor.XmlCommentParser.Reset">
            <summary>
            Resets <c>XmlCommentParser</c> to the start position.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.HtmlParser">
            <summary>
            Represents properties and methods to perform syntax analysis of specified html code text.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlLexerToken">
            <summary>
            Represents lexical tokens for Xml parser.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlLexerToken.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlLexerToken.WhiteSpace">
            <summary>
            Specifies that lexical token corresponds to whitespace symbol.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlLexerToken.Body">
            <summary>
            Specifies that lexical token corresponds to xml body.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlLexerToken.OpenTag">
            <summary>
            Specifies that lexical token corresponds to open tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlLexerToken.CloseTag">
            <summary>
            Specifies that lexical token corresponds to close tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlLexerToken.OpenEndTag">
            <summary>
            Specifies that lexical token corresponds to open end tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlLexerToken.CloseEndTag">
            <summary>
            Specifies that lexical token corresponds to close end tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlLexerToken.Equal">
            <summary>
            Specifies that lexical token corresponds to comment tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlLexerToken.TagName">
            <summary>
            Specifies that lexical token corresponds to name of tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlLexerToken.ParamName">
            <summary>
            Specifies that lexical token corresponds to name of parameter.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlLexerToken.ParamValue">
            <summary>
            Specifies that lexical token corresponds to parameter value.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlLexerToken.Comment">
            <summary>
            Specifies that lexical token corresponds to equality symbol.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.HtmlLexerToken">
            <summary>
            Represents lexical tokens for Html parser.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HtmlLexerToken.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HtmlLexerToken.WhiteSpace">
            <summary>
            Specifies that lexical token corresponds to whitespace symbol.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HtmlLexerToken.Body">
            <summary>
            Specifies that lexical token corresponds to html body.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HtmlLexerToken.OpenTag">
            <summary>
            Specifies that lexical token corresponds to open tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HtmlLexerToken.CloseTag">
            <summary>
            Specifies that lexical token corresponds to close tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HtmlLexerToken.OpenEndTag">
            <summary>
            Specifies that lexical token corresponds to open end tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HtmlLexerToken.CloseEndTag">
            <summary>
            Specifies that lexical token corresponds to close end tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HtmlLexerToken.Equal">
            <summary>
            Specifies that lexical token corresponds to equality symbol.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HtmlLexerToken.TagName">
            <summary>
            Specifies that lexical token corresponds to name of tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HtmlLexerToken.ParamName">
            <summary>
            Specifies that lexical token corresponds to name of parameter.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HtmlLexerToken.ParamValue">
            <summary>
            Specifies that lexical token corresponds to parameter value.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.HtmlLexerToken.Comment">
            <summary>
            Specifies that lexical token corresponds to html comment.
            </summary>
        </member>
        <member name="T:Stimulsoft.Editor.XmlNodeType">
            <summary>
            Represents node types for Xml parser.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlNodeType.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlNodeType.XmlUnit">
            <summary>
            Specifies that xml node corresponds to entire unit.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlNodeType.XmlOpenTag">
            <summary>
            Specifies that xml node corresponds to xml open tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlNodeType.XmlCloseTag">
            <summary>
            Specifies that xml node corresponds to xml close tag.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlNodeType.XmlParameter">
            <summary>
            Specifies that xml node corresponds to xml parameter.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlNodeType.XmlParameters">
            <summary>
            Specifies that xml node corresponds to list of xml parameters.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlNodeType.XmlBody">
            <summary>
            Specifies that xml node corresponds to xml body.
            </summary>
        </member>
        <member name="F:Stimulsoft.Editor.XmlNodeType.XmlComment">
            <summary>
            Specifies that xml node corresponds to xml comment.
            </summary>
        </member>
    </members>
</doc>
